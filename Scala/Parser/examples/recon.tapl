\x:Bool. x
(\x:Bool->Bool. if x false then true else false) (\x:Bool. if x then false else true) 
\x:Nat. succ x
(\x:Nat. succ (succ x)) (succ 0) 
\x:A. x
(\x:X. \y:X->X. y x)
(\x:X->X. x 0) (\y:Nat. y) 
(if (if (iszero b) then (\ e : A . 1) else (if (\ a : A . false) then 0 else false)) then (\ d : (C -> Bool) . (iszero 2)) else ((true c) (if c then 2 else 0)))
(if (iszero ((iszero true) false)) then (pred (\ b : ((C -> Nat) -> Bool) . (0 1))) else (succ ((iszero c) (1 b))))
(pred (pred (iszero 1)))
(succ (if ((if c then 2 else 0) false) then (pred true) else (if 2 then c else 0)))
(succ (\ a : (C -> B) . (iszero (\ e : Nat . 0))))
(if (iszero (pred (\ a : Nat . 0))) then ((\ d : Bool . a) (pred true)) else (iszero (pred (if (succ b) then (\ a : A . b) else 2))))
(\ d : ((((Nat -> Nat) -> (Bool -> Bool)) -> ((Nat -> Bool) -> Bool)) -> (((C -> B) -> (C -> A)) -> (Nat -> C))) . (if (if false then false else (iszero false)) then (pred (if false then 2 else true)) else (iszero (succ c))))
(succ (pred (succ (\ b : Nat . true))))
(((if c then b else b) (pred 0)) (\ d : ((B -> Nat) -> (Nat -> Bool)) . (if (iszero a) then (if false then b else b) else (iszero 0))))
((\ c : (C -> B) . (if b then c else a)) (\ a : (A -> B) . (iszero b)))
(succ (iszero (if (a a) then (succ b) else (if (true a) then false else (if 1 then c else a)))))
(succ (\ b : (A -> (C -> B)) . (iszero true)))
(iszero (\ b : (Nat -> Bool) . (succ true)))
(\ e : (((Nat -> B) -> ((B -> A) -> (Bool -> B))) -> ((C -> Nat) -> (Bool -> (A -> Bool)))) . ((if (pred c) then (\ e : Bool . b) else (\ d : C . (pred 1))) (succ (1 (succ 0)))))
(\ e : (((Bool -> B) -> (Nat -> Bool)) -> (A -> C)) . (\ a : ((A -> Nat) -> (B -> Bool)) . (\ b : (Bool -> Nat) . (1 0))))
(\ b : ((A -> B) -> (A -> (A -> B))) . (if (if false then (\ b : Bool . 0) else (succ 0)) then (iszero (if b then (if 1 then false else b) else a)) else (if 1 then true else c)))
(pred (\ d : (((B -> Nat) -> (Bool -> B)) -> (C -> Nat)) . (\ b : (C -> C) . (succ (\ d : Nat . true)))))
(if (pred (\ c : C . b)) then (\ c : ((B -> (C -> A)) -> (Bool -> Bool)) . (iszero b)) else (\ c : (B -> Bool) . (iszero (\ c : C . 0))))
(succ (succ (\ b : Nat . 0)))
(iszero (pred (succ (\ a : B . 2))))
(pred (if (iszero 2) then ((succ false) (2 2)) else (\ d : (A -> C) . (if c then c else 1))))
((iszero (\ d : Nat . false)) ((if b then 1 else c) (iszero 1)))
(pred (succ ((pred 0) (1 a))))
(\ b : (((C -> Nat) -> (Bool -> C)) -> (Bool -> (Bool -> B))) . (\ a : ((C -> Nat) -> (B -> A)) . ((if b then 0 else 2) (b 2))))
((iszero (iszero a)) (succ (\ e : (B -> Nat) . (iszero true))))
(\ b : (((A -> Bool) -> (C -> Bool)) -> ((C -> Nat) -> C)) . (if (if true then 1 else (succ b)) then (iszero a) else (succ (pred 1))))
((succ (succ true)) ((iszero false) (succ 2)))
((succ (false (iszero false))) (pred (if (iszero 0) then c else 1)))
((pred (pred c)) (succ (\ b : (C -> Nat) . b)))
(succ (if (if (pred (succ 0)) then (pred c) else (\ a : A . 2)) then (succ (pred a)) else (\ a : (A -> B) . a)))
(succ ((a (\ d : Nat . 1)) (pred 2)))
(pred (pred (succ (if b then a else 1))))
(pred (iszero (iszero 2)))
(pred (if (if (pred a) then 0 else (iszero 1)) then (if false then (c 2) else false) else (iszero (succ false))))
(pred (if (pred true) then (if (iszero b) then (pred c) else (iszero 2)) else (pred false)))
(pred (if (succ a) then (\ b : C . a) else (iszero (succ a))))
(\ d : ((B -> B) -> (B -> (B -> A))) . (\ c : ((C -> Bool) -> (Bool -> A)) . (\ b : Nat . a)))
(((succ c) (pred b)) ((if 1 then false else 2) (if (succ b) then (\ d : B . 2) else (\ a : C . b))))
(pred (\ b : (A -> B) . (pred b)))
(pred (iszero (succ (pred false))))
(((succ 1) (pred 0)) (succ (\ a : (C -> A) . b)))
(if ((1 b) (\ e : Bool . false)) then ((c (pred 2)) ((if false then 1 else true) (\ d : Nat . a))) else (pred (pred (true c))))
(succ (pred (iszero (pred (\ d : A . false)))))
(succ (pred (b 1)))
((pred (2 1)) (if (if (1 false) then true else false) then (0 2) else (succ 0)))
((iszero (pred true)) (iszero (pred (succ a))))
((succ (\ b : ((A -> A) -> (A -> B)) . (if 2 then 1 else (c 1)))) (succ (iszero a)))
(succ (iszero (false 0)))
(iszero ((\ c : (C -> A) . (succ a)) (\ b : ((Nat -> Nat) -> (A -> C)) . (succ 1))))
(succ (if (if 1 then (if c then true else false) else (2 2)) then ((pred 1) (b false)) else (\ b : (A -> (B -> Bool)) . (succ 0))))
(iszero (iszero (iszero 1)))
(\ a : ((Nat -> B) -> (Nat -> C)) . ((\ a : C . (pred 2)) (\ a : (C -> A) . (iszero c))))
((if (iszero (pred 1)) then ((if false then false else 0) (\ e : Nat . c)) else (if 2 then a else false)) (\ a : (B -> (C -> Nat)) . (iszero (1 false))))
(\ a : ((B -> Nat) -> ((Nat -> (C -> Bool)) -> (Nat -> A))) . (\ e : (A -> B) . (iszero 0)))
(\ c : ((Nat -> C) -> ((C -> A) -> (A -> A))) . (iszero (\ d : B . true)))
(if (if (succ (if true then c else false)) then (false (pred true)) else (a (succ true))) then (if (if (succ 0) then (\ e : Nat . 0) else (\ a : B . 1)) then (if (succ true) then (pred (succ b)) else ((a a) (pred 1))) else (if a then true else (if false then a else false))) else (\ e : ((C -> C) -> (A -> A)) . (b b)))
(\ c : (((Bool -> Bool) -> (B -> C)) -> (A -> A)) . (succ (pred 1)))
(\ d : (((Nat -> C) -> (Nat -> Bool)) -> (A -> C)) . (\ d : ((Nat -> (B -> A)) -> (C -> Nat)) . (iszero (\ e : (Nat -> B) . (iszero 2)))))
(pred (\ e : ((A -> A) -> (B -> B)) . (iszero (iszero c))))
(if (pred (succ a)) then (iszero ((if 1 then b else 0) (\ a : Nat . b))) else (\ a : ((A -> A) -> C) . (\ d : ((B -> A) -> (Nat -> A)) . (succ (\ d : Bool . b)))))
(\ d : ((B -> (B -> A)) -> ((Bool -> Bool) -> (B -> Nat))) . (succ (pred (succ 0))))
(iszero ((iszero 0) (pred (succ c))))
((if (pred (succ a)) then (succ false) else (0 (if a then 1 else b))) (pred (if false then false else (iszero false))))
(succ (\ b : (C -> Nat) . (succ (c 0))))
(if (iszero (if (pred true) then (\ e : (A -> B) . (iszero 2)) else (2 true))) then (iszero (\ d : A . (if c then 0 else b))) else (\ d : (Nat -> Bool) . (\ e : Nat . 0)))
(\ b : ((B -> C) -> (B -> B)) . (succ ((if c then a else 2) (\ d : Nat . true))))
(if (succ (pred (iszero true))) then (\ e : (C -> A) . (if false then c else b)) else (succ ((\ e : Nat . b) (b 0))))
(succ (\ e : (Nat -> A) . (\ d : B . false)))
(iszero (pred (iszero (pred c))))
(if (\ d : (B -> A) . (iszero 0)) then (iszero (c true)) else (pred (if (0 b) then (\ d : B . a) else false)))
(succ (if (if 2 then (succ a) else 1) then (c 0) else (succ a)))
(\ b : (((A -> Nat) -> ((B -> Bool) -> (Nat -> Nat))) -> ((B -> Bool) -> (Bool -> Bool))) . (pred (iszero (\ b : B . c))))
(if (\ a : (B -> B) . (succ 0)) then (iszero (succ false)) else (succ (succ 2)))
(iszero (iszero (pred c)))
(succ (\ b : (Bool -> Nat) . (pred (2 c))))
(succ (pred (\ b : B . a)))
(pred (iszero (succ a)))
(\ d : (((Nat -> Nat) -> (A -> C)) -> (B -> B)) . (iszero (if (\ a : (Bool -> Nat) . 1) then (0 1) else (iszero (iszero 2)))))
(succ (iszero (\ c : Bool . 0)))
(\ d : (((B -> A) -> (Nat -> Bool)) -> ((Bool -> A) -> (Nat -> (Bool -> Bool)))) . (succ (succ 1)))
((succ (iszero a)) (iszero (succ false)))
(succ (succ (iszero (\ c : C . 0))))
(pred ((iszero false) (if a then b else c)))
(iszero (pred (succ (iszero a))))
((iszero ((pred 0) (pred 1))) (pred (iszero (pred 0))))
(if (\ e : (B -> C) . (iszero false)) then (if (iszero b) then (pred (pred a)) else (succ true)) else (iszero (succ a)))
(pred (\ e : ((Nat -> B) -> (Bool -> A)) . (pred 1)))
((\ e : ((Bool -> Bool) -> C) . (((\ c : A . false) (iszero 1)) (iszero false))) (succ (1 2)))
(if (\ e : ((A -> C) -> (B -> B)) . (\ b : Nat . (\ c : Nat . 1))) then ((\ d : (Bool -> A) . (iszero a)) (pred (b 1))) else (if (iszero a) then (pred b) else (iszero (true 1))))
(succ (succ (pred c)))
(\ b : (((C -> Bool) -> (C -> B)) -> (((Bool -> Nat) -> (Bool -> Bool)) -> (C -> B))) . (\ a : (Nat -> B) . (if c then true else true)))
(pred (succ (pred b)))
(succ (pred (succ (2 a))))
(\ d : ((A -> (B -> B)) -> ((B -> Nat) -> A)) . (iszero (pred false)))
(\ e : ((A -> Bool) -> (A -> Bool)) . (\ a : (A -> Bool) . (\ a : (B -> Bool) . (true 0))))
(((if (succ 1) then c else false) (a (if b then true else b))) ((iszero 0) (iszero false)))
(\ a : (((Bool -> C) -> (Nat -> A)) -> ((B -> Bool) -> (A -> Nat))) . (if (succ 0) then (succ a) else (iszero 2)))
((pred ((1 true) (pred 2))) (iszero (false b)))
(iszero ((\ e : A . c) (if a then true else false)))
((iszero (b 2)) (succ (pred (c true))))
(pred (pred (iszero a)))
((\ e : ((B -> A) -> Nat) . (pred false)) (iszero (iszero (iszero b))))
(((\ b : C . (iszero 0)) (succ a)) (if (\ b : B . b) then (if 2 then (pred 2) else false) else (succ true)))
(iszero (pred (0 b)))
((pred (\ d : (Nat -> Bool) . 0)) ((iszero 0) (succ true)))
(pred (pred (if 1 then (succ a) else (\ b : Nat . a))))
(\ b : ((Nat -> (C -> C)) -> ((Nat -> Nat) -> (Nat -> B))) . ((\ e : A . 1) (succ 1)))
((succ (succ false)) (pred (if (a 2) then c else (pred true))))
(pred (pred (iszero 2)))
(pred (succ (a true)))
(if (iszero (1 a)) then (pred (\ c : (C -> A) . (if false then 0 else c))) else ((pred (\ b : C . b)) (pred (if a then 2 else c))))
(iszero (iszero ((\ e : Nat . a) 1)))
(if (\ d : ((B -> Bool) -> Nat) . (if (a false) then (\ a : B . 2) else (if 0 then b else 1))) then (pred (if a then a else c)) else (iszero (iszero (b a))))
((succ ((pred 0) (succ false))) (succ (pred 2)))
((succ (succ (succ 1))) (if (pred (iszero a)) then (succ (if a then true else 2)) else (2 (pred 1))))
(\ d : (((B -> A) -> (B -> Bool)) -> (B -> (B -> Bool))) . (iszero (\ d : (Nat -> Nat) . (pred c))))
(if (iszero (pred 1)) then (succ (succ (iszero (iszero 1)))) else (if (iszero c) then (c (succ a)) else (if (iszero (\ e : Bool . c)) then (if a then true else b) else (\ a : (B -> Nat) . (if a then c else 0)))))
(succ (iszero (pred (\ a : Nat . c))))
(iszero (if (2 (if true then 0 else false)) then (iszero (succ 2)) else (succ (pred c))))
(iszero (iszero (succ 1)))
(iszero (\ d : ((B -> C) -> Bool) . (succ (pred b))))
(iszero (iszero (iszero (succ (\ a : A . b)))))
(iszero (iszero (if (pred true) then (iszero c) else (pred a))))
((\ b : ((A -> Bool) -> (B -> Bool)) . (pred c)) ((iszero (succ 1)) (pred (iszero false))))
(succ (iszero ((succ 0) true)))
(succ (\ b : ((B -> Nat) -> (Bool -> Nat)) . (pred true)))
(\ a : ((C -> B) -> ((Bool -> B) -> Bool)) . (iszero (if 1 then 2 else true)))
(succ (succ (\ a : ((C -> C) -> (Bool -> Nat)) . (pred 1))))
(succ (succ (if (iszero true) then (\ e : (Bool -> A) . (false false)) else (iszero false))))
((if (iszero 2) then (pred true) else (iszero b)) (\ b : (Nat -> (Nat -> C)) . ((pred false) (if 1 then false else 1))))
(if (if (\ e : C . b) then (a 2) else (if a then 0 else b)) then (\ c : (B -> A) . (succ true)) else (pred (succ b)))
((pred (succ (if true then false else true))) (pred (iszero (succ c))))
(succ (\ a : (A -> B) . (pred b)))
(\ b : ((A -> A) -> ((A -> A) -> C)) . ((iszero 1) (if (pred 0) then c else (\ e : B . a))))
(iszero (\ d : (C -> A) . (\ e : (A -> Bool) . (pred false))))
(if (pred (iszero (\ d : Bool . a))) then (((succ a) (iszero a)) (if (\ d : Bool . 2) then (succ c) else (c 0))) else (pred ((if true then (succ a) else false) (\ d : (Bool -> C) . 1))))
(if (succ (b c)) then (pred (if (succ (pred true)) then (\ d : C . false) else (iszero 1))) else (if ((pred false) (if c then (succ b) else (succ a))) then (if (pred (0 2)) then (if (if b then c else false) then (iszero b) else (a false)) else (if b then 2 else b)) else (if (1 b) then (iszero (true false)) else (if 2 then c else false))))
(\ e : (((C -> Bool) -> B) -> ((B -> Bool) -> Bool)) . (\ d : ((C -> (Nat -> Bool)) -> ((B -> C) -> (C -> A))) . (a 2)))
(iszero (iszero (\ d : Bool . false)))
(\ e : ((Nat -> A) -> (C -> Nat)) . (succ (succ (succ 1))))
((if ((pred c) (pred c)) then (succ c) else (if (iszero 0) then (0 b) else (if a then b else a))) (pred (iszero 1)))
(iszero (pred ((1 b) (iszero true))))
(if ((succ true) (\ e : (Bool -> C) . (if 1 then false else b))) then (pred (iszero c)) else (if (if (pred a) then (iszero (a b)) else (a (\ d : A . 2))) then (iszero (1 1)) else (\ b : A . b)))
(succ (pred (if (iszero b) then (\ e : C . (false b)) else (succ (succ b)))))
(pred (iszero (pred 2)))
(iszero (pred (if (\ b : C . false) then (if 1 then c else c) else (if true then (if 0 then false else 1) else a))))
(pred ((succ a) (pred 1)))
(succ (succ (0 (iszero 2))))
(((succ (iszero a)) (\ d : (Bool -> B) . (succ a))) (if (\ a : (Bool -> B) . 1) then (if (succ 0) then (iszero (iszero 1)) else (if false then false else 0)) else (iszero (pred a))))
(pred (iszero (if (if a then c else b) then (succ (iszero 0)) else (iszero true))))
(\ d : ((((C -> Nat) -> (C -> Bool)) -> (A -> A)) -> (C -> (A -> Nat))) . (pred (if a then 1 else false)))
(((iszero a) (pred 2)) (succ (pred b)))
(\ e : ((((Bool -> C) -> (C -> C)) -> (Bool -> A)) -> ((Bool -> B) -> (A -> B))) . (\ a : (C -> A) . (false (0 b))))
(succ (if (if (pred c) then (\ d : Bool . 1) else (if (if c then 0 else false) then c else b)) then (if (if b then 2 else c) then (pred c) else c) else (\ c : (Nat -> B) . (if false then b else b))))
(\ c : ((A -> A) -> (Bool -> Nat)) . (if (if 2 then (succ true) else (iszero 2)) then (if 2 then 1 else true) else (succ true)))
((\ d : ((B -> B) -> A) . (succ 2)) (iszero (\ c : (Nat -> B) . 2)))
(succ (succ (succ true)))
(\ a : (((Bool -> Nat) -> A) -> (B -> (C -> A))) . (\ b : ((Bool -> C) -> Bool) . (pred a)))
((pred (if 1 then false else c)) (\ a : (Bool -> (Nat -> C)) . ((if c then c else a) (\ a : C . 2))))
(if (pred (\ e : (Bool -> C) . false)) then (iszero ((if 0 then (succ 0) else 2) (pred 0))) else (pred (\ e : C . true)))
((if (\ c : (Nat -> A) . (\ a : Nat . 2)) then (pred (2 2)) else (\ e : ((A -> Nat) -> (B -> C)) . (succ true))) ((pred 0) (pred (if a then false else 2))))
(succ (succ (iszero (\ e : B . a))))
(succ (succ (\ e : A . (succ 2))))
(\ a : (((Bool -> Bool) -> (A -> B)) -> (B -> A)) . (succ (pred 0)))
(if (if (succ false) then (succ (c b)) else (iszero false)) then ((c 0) (succ (pred b))) else (\ d : (C -> A) . (pred (iszero 0))))
(pred (((if (iszero a) then (if c then c else 1) else 0) (if (pred true) then 0 else 0)) ((succ 0) (if b then b else 1))))
(iszero ((succ (if a then c else a)) (pred (pred 2))))
(succ (iszero (iszero a)))
(\ d : (((A -> Bool) -> (C -> A)) -> ((A -> A) -> A)) . (\ a : (A -> (B -> B)) . (succ 1)))
((succ (succ 0)) (if (if (pred 2) then (iszero b) else (pred 0)) then (iszero (1 1)) else (succ (pred (\ d : C . true)))))
((\ b : ((C -> B) -> (Bool -> Bool)) . (iszero 1)) (iszero (if true then (if c then c else true) else (if a then b else true))))
(iszero (if (pred (if b then 0 else 1)) then (\ d : A . b) else (false a)))
(iszero (((pred 1) (iszero b)) (iszero (iszero a))))
(pred (iszero (\ c : Nat . true)))
((if (pred (pred 1)) then (if b then 0 else (if c then b else false)) else (succ (pred 0))) (iszero (if (succ true) then (iszero a) else 1)))
(succ (\ a : (Bool -> (C -> B)) . (pred (\ d : Nat . b))))
((iszero (succ 2)) ((pred 1) (\ b : (C -> B) . (succ true))))
(iszero ((if a then a else (\ b : Nat . true)) (iszero 2)))
(succ (succ (iszero (pred a))))
(\ c : ((A -> B) -> ((Nat -> Bool) -> (Nat -> C))) . (iszero ((pred false) (if 0 then 1 else c))))
((pred (pred (if b then true else 1))) (\ a : ((B -> (Nat -> Nat)) -> (C -> Nat)) . (succ (iszero (if 1 then true else 2)))))
(\ c : ((Bool -> C) -> (Bool -> Nat)) . (pred (\ b : (Bool -> A) . (\ a : A . a))))
(if (\ a : (A -> B) . ((true b) (pred false))) then (pred (pred (false 2))) else (iszero (iszero b)))
(iszero (succ (\ d : (Nat -> B) . (pred 2))))
((iszero (succ b)) (succ ((\ e : C . b) (succ false))))
(pred (\ e : (((C -> Bool) -> A) -> (A -> B)) . (succ (\ d : (Bool -> Nat) . (false b)))))
((pred (iszero 0)) (\ e : (Bool -> C) . (\ a : C . false)))
(pred ((pred c) (pred (iszero true))))
(if (succ (succ (succ 1))) then (((pred a) (if 2 then 0 else 1)) (iszero (succ true))) else ((iszero (succ false)) (if (iszero c) then (iszero a) else (succ 2))))
(\ e : (((Nat -> (Bool -> C)) -> (Bool -> C)) -> ((A -> Nat) -> (Bool -> Bool))) . (iszero (b 0)))
(succ (pred (true (0 1))))
(if (iszero (if 0 then true else 0)) then ((iszero (succ true)) (false 1)) else (if ((\ a : Bool . false) (pred 0)) then (if a then 0 else (\ e : Nat . 2)) else (\ e : (Bool -> Bool) . 1)))
(succ (if ((if a then 0 else c) 2) then (succ a) else (pred 1)))
(iszero ((if 1 then (if false then a else false) else a) (succ 0)))
(succ (\ d : ((Bool -> B) -> (C -> C)) . (if (false a) then (succ 0) else (c (succ a)))))
(iszero ((if 0 then (succ c) else (pred false)) (\ a : (C -> C) . (succ true))))
(succ (\ d : ((A -> Bool) -> (Nat -> Bool)) . (pred (iszero 1))))
(\ d : (((B -> Bool) -> (C -> Nat)) -> (A -> A)) . (pred (succ 2)))
((iszero (succ c)) (iszero ((succ c) c)))
((iszero ((\ e : Bool . a) (\ e : A . true))) (pred (if a then (pred 2) else (succ false))))
(succ (\ c : (C -> (Nat -> B)) . (pred 2)))
(pred (if (if (pred b) then (pred (\ c : Bool . 0)) else (if (iszero false) then (succ 1) else (pred 1))) then (if (if (if 2 then 1 else c) then (1 false) else c) then (if 1 then (if 2 then b else false) else 2) else (iszero (iszero true))) else (\ e : (Nat -> Nat) . (pred 2))))
(if (iszero (\ d : B . false)) then (succ (pred false)) else (succ (pred true)))
(pred (((a 1) 1) (succ (\ a : Bool . 1))))
(succ (pred ((1 (1 true)) (b 0))))
(iszero (\ b : (Nat -> A) . (succ true)))
(if ((if c then (succ 1) else (if 0 then a else 1)) ((false true) (succ false))) then (\ b : (C -> Bool) . (if a then a else 2)) else (succ (pred 0)))
(pred (\ b : (C -> Bool) . (c c)))
(if (\ a : (((B -> B) -> Bool) -> (B -> (A -> C))) . (succ 2)) then (iszero (succ (succ c))) else (pred (iszero 1)))
(pred ((succ (iszero c)) (succ (iszero true))))
(iszero (if (if (\ b : B . a) then (iszero 1) else (pred (succ true))) then (iszero (if 1 then b else b)) else (if (c 2) then (if (c false) then (true true) else (pred true)) else (pred 0))))
(succ (\ b : ((Bool -> B) -> (C -> Bool)) . (pred (b (succ 2)))))
((succ (iszero (succ b))) (iszero (succ (if 0 then b else 1))))
((pred ((succ false) (succ true))) (if (succ (iszero c)) then (if (succ 1) then (iszero a) else a) else (iszero (pred b))))
(if (iszero (succ (pred 0))) then (succ (pred b)) else ((iszero b) (if 1 then 0 else a)))
((((succ false) (if (pred 1) then 0 else 1)) (pred true)) ((pred (if b then 2 else 0)) (pred b)))
(succ (iszero (succ (iszero false))))
(iszero (iszero (if 2 then 1 else (1 0))))
(pred (pred (pred (iszero a))))
(pred (iszero ((succ (succ false)) (succ 0))))
(succ (iszero (pred (if (succ b) then (0 2) else c))))
((pred (\ b : (B -> C) . a)) (pred (if b then 0 else false)))
(if (if (iszero a) then (2 (iszero 0)) else ((pred c) c)) then ((iszero true) (\ e : (Nat -> C) . (pred true))) else (((pred true) (pred 0)) (\ b : Bool . (\ d : Bool . 2))))
(iszero (\ e : (C -> (Nat -> B)) . (pred (if (if true then 2 else b) then (iszero c) else (2 true)))))
(succ (iszero (iszero false)))
(pred (succ (\ d : A . false)))
((if (iszero (\ c : Bool . 2)) then (if (iszero true) then (pred 1) else (if 0 then a else c)) else (succ ((b c) (a 1)))) (\ a : ((B -> B) -> (Nat -> B)) . (if 1 then 1 else 2)))
(succ (iszero (succ 0)))
(pred (\ c : (Bool -> Nat) . (iszero 2)))
(if ((\ d : (A -> B) . a) (\ a : B . 0)) then (pred (pred b)) else (((pred false) (if b then (succ c) else 0)) (if (if 1 then 1 else 0) then (if 1 then false else true) else (1 (pred c)))))
(\ d : (((A -> Bool) -> A) -> ((C -> A) -> (Bool -> Bool))) . (\ c : ((Nat -> A) -> ((Bool -> Bool) -> (B -> A))) . (if a then (if true then 2 else b) else 0)))
(succ (iszero ((if 2 then false else c) false)))
(succ (\ c : (Bool -> Bool) . (pred b)))
(iszero (succ ((iszero c) (0 b))))
(succ (if ((c c) true) then (if (\ a : Nat . 1) then (if a then c else a) else 0) else (iszero (succ false))))
(\ a : ((((A -> Nat) -> (C -> Bool)) -> (B -> (Nat -> C))) -> ((Nat -> A) -> (Nat -> Bool))) . (pred ((succ b) (\ d : C . 1))))
(if ((succ (pred (pred 1))) (\ a : (A -> C) . (\ a : A . 2))) then ((if 0 then false else a) (false (\ b : Nat . true))) else (\ b : ((C -> Bool) -> Nat) . (iszero (pred 0))))
(pred (iszero (if true then c else (\ a : B . b))))
(succ (succ (iszero (pred b))))
(pred (if (succ b) then (iszero (if 0 then 0 else true)) else (pred false)))
((if (pred 1) then (pred b) else (iszero (\ b : B . 1))) (iszero (pred 0)))
(if (iszero (iszero 2)) then (\ e : ((C -> Bool) -> B) . (pred false)) else (succ ((true 0) 1)))
(iszero (pred (if (succ c) then c else 1)))
(\ c : ((C -> B) -> (B -> B)) . (iszero (if (\ a : B . 1) then (\ d : B . c) else (if 2 then 2 else c))))
(iszero (if ((\ e : A . false) c) then (pred 0) else (iszero (\ c : Bool . c))))
(succ (if (if 1 then (\ c : C . 2) else (pred c)) then (true (pred a)) else (pred 1)))
(if (\ d : (B -> C) . (iszero false)) then (iszero (if (if 0 then 2 else c) then (\ d : B . false) else (\ a : Bool . 1))) else (pred (\ d : B . 2)))
(pred (pred (pred 1)))
(if (iszero ((iszero 1) (pred a))) then (pred (if (succ 0) then a else (pred 2))) else (\ a : (C -> C) . (iszero c)))
(iszero (if (if (iszero (\ a : Bool . true)) then (b true) else (\ c : B . 2)) then ((b c) (pred 1)) else (pred (iszero 2))))
(\ c : ((B -> A) -> (Nat -> Bool)) . (succ (pred (0 2))))
(if (pred (1 c)) then (succ (0 1)) else (pred (succ (succ true))))
(\ b : (((Bool -> A) -> ((A -> Nat) -> Nat)) -> ((Bool -> Nat) -> B)) . (iszero (succ false)))
((if (succ 0) then (\ d : (C -> A) . (0 1)) else (\ b : B . b)) (pred (c c)))
(\ c : (((B -> C) -> Bool) -> ((Nat -> B) -> B)) . (iszero (succ 1)))
(pred (succ (if c then 2 else true)))
(if (if (pred 1) then (if false then b else a) else (pred true)) then (if (pred (pred b)) then (\ a : A . 0) else (iszero (\ d : (C -> C) . (if false then a else true)))) else (\ b : (B -> B) . (iszero b)))
(iszero (if (succ (iszero 0)) then (if (if c then (succ b) else (\ b : C . 2)) then (succ 2) else (\ c : C . (if 0 then false else 2))) else ((\ b : A . b) (if c then a else true))))
(pred ((succ b) (\ a : A . (a 2))))
(if (succ (pred true)) then (\ c : (B -> C) . (iszero b)) else (\ e : (((A -> Bool) -> (Nat -> Nat)) -> (Bool -> C)) . (succ true)))
(((\ a : (Nat -> A) . (iszero b)) (\ e : Bool . c)) (pred (a c)))
((iszero (iszero (if a then true else 0))) (if (succ (a 0)) then (succ a) else ((succ false) (pred 2))))
(pred (iszero (succ 1)))
(iszero (\ a : (B -> C) . (pred b)))
((if (pred 2) then (pred 0) else (pred (if a then false else true))) (iszero ((iszero a) (iszero a))))
(succ (\ e : (B -> B) . (succ 1)))
(iszero (pred (pred (iszero false))))
(iszero (\ d : (C -> A) . (iszero (if c then true else a))))
(if (pred ((succ false) (true b))) then (\ b : (A -> Bool) . (succ true)) else ((iszero 1) (\ a : A . 0)))
(succ (if (2 1) then (\ e : Nat . b) else (false c)))
(\ b : ((B -> Nat) -> (Nat -> (B -> C))) . ((succ (pred 1)) (if (\ a : Nat . a) then (iszero false) else (succ b))))
(pred (pred (pred b)))
((pred (succ (a 2))) (succ (iszero true)))
(iszero (pred (pred 2)))
(((iszero 0) (\ c : Bool . (pred 1))) (pred (succ (if 1 then 0 else a))))
(\ b : (((Nat -> Bool) -> (C -> B)) -> ((Bool -> Bool) -> (Nat -> Nat))) . ((if a then true else (2 2)) (iszero (iszero 0))))
(succ ((\ d : Bool . 2) (\ b : (C -> A) . c)))
(iszero (\ a : (A -> Bool) . (a true)))
(succ (\ d : ((Nat -> Nat) -> (B -> A)) . (0 c)))
(pred (((2 true) (2 true)) (succ (2 b))))
((\ b : (B -> B) . (if (\ e : A . (succ a)) then (\ c : Nat . (2 false)) else (iszero true))) (succ (succ a)))
(iszero (succ (b (iszero 0))))
(succ (if (if (if a then a else 0) then (pred 2) else (pred c)) then (succ a) else (pred (succ 0))))
(succ ((iszero (\ b : (B -> C) . a)) (succ (iszero (pred false)))))
((if (if (\ d : A . 1) then 0 else false) then (\ b : (Bool -> A) . (iszero 2)) else (succ (\ d : C . 0))) ((if c then (\ a : B . true) else false) (iszero (if c then c else 2))))
(if ((\ e : C . false) (iszero 2)) then (\ b : ((A -> Nat) -> (Nat -> A)) . (succ (iszero (\ d : A . c)))) else (pred ((if true then a else 2) (if 0 then c else a))))
(pred ((succ a) (pred 0)))
(pred (\ b : ((A -> C) -> (C -> Nat)) . (succ (iszero (if 2 then 2 else a)))))
(succ ((pred (iszero false)) (pred (pred (if 0 then 1 else a)))))
(\ c : ((B -> A) -> (Bool -> (Bool -> B))) . ((iszero (succ (a a))) (pred (if c then 0 else 1))))
(pred (\ c : (Nat -> Nat) . (\ e : C . (iszero false))))
(pred (succ (succ true)))
(if ((pred c) (succ (\ a : C . 1))) then (iszero (\ b : (B -> Bool) . (succ 0))) else ((iszero 2) (if c then b else b)))
(pred (if (iszero true) then (succ (true b)) else (succ 0)))
(if (succ (2 (if 2 then a else c))) then (pred (\ d : A . (\ e : C . 2))) else (pred (1 false)))
(iszero (pred (succ 0)))
((pred (\ e : Nat . a)) (succ (true (\ a : B . 0))))
(iszero (iszero ((iszero (2 a)) (iszero a))))
(pred (\ d : ((B -> (Nat -> Bool)) -> ((Nat -> Bool) -> Nat)) . (pred (a c))))
(pred (iszero (iszero 2)))
(pred (pred (\ b : Nat . 0)))
((if (if (\ a : A . false) then (iszero 1) else (pred b)) then (if (succ false) then (\ c : C . false) else (pred b)) else (pred true)) (iszero (iszero (pred b))))
(\ e : ((B -> C) -> ((Bool -> B) -> (Bool -> Nat))) . ((if (if a then true else true) then (pred 1) else (false 0)) (2 false)))
(succ (iszero (succ (if true then a else 0))))
((\ c : (C -> A) . (\ c : (Nat -> Nat) . c)) (iszero (succ (iszero 0))))
(iszero (if (b 1) then (if c then (\ e : B . b) else b) else (\ b : (B -> B) . (if 2 then true else false))))
(\ e : (((A -> C) -> (Bool -> C)) -> (((Bool -> Nat) -> (Nat -> Nat)) -> (B -> A))) . (pred (pred 1)))
(if (\ c : ((C -> A) -> (Bool -> (C -> C))) . ((\ e : A . true) (\ d : B . true))) then (iszero (if (succ 2) then (if b then c else 2) else (if true then 1 else 0))) else (pred (pred 1)))
((\ c : (((B -> Nat) -> Bool) -> (B -> (B -> Nat))) . (pred (if a then 0 else c))) (iszero (iszero false)))
(iszero ((if 2 then false else true) (iszero (2 c))))
(if (if ((\ d : Bool . false) (b 2)) then (pred a) else (iszero a)) then ((pred 0) (\ b : (Bool -> Nat) . (\ a : Nat . a))) else (succ ((\ c : Bool . 0) (iszero 1))))
(if ((pred 2) (iszero (pred 2))) then (if ((pred false) (if 2 then 2 else b)) then (if (1 2) then (if true then b else a) else (if 0 then b else false)) else (pred (succ (\ c : C . c)))) else (succ ((\ a : Bool . false) b)))
(succ (iszero (succ (succ (iszero b)))))
(if (iszero ((\ d : C . a) (if true then 1 else false))) then ((iszero a) (pred (if 0 then 2 else true))) else (pred ((if c then c else b) (\ e : A . 1))))
((succ (pred (\ a : Nat . false))) (\ d : (A -> C) . (true c)))
(pred (if (b (pred false)) then (succ (iszero 0)) else (\ c : ((B -> C) -> C) . (succ (succ 1)))))
(pred (if (if false then 1 else 0) then (iszero a) else (succ false)))
(\ e : ((((C -> Bool) -> (A -> Nat)) -> (B -> (Bool -> B))) -> ((B -> A) -> (B -> Bool))) . (if (pred (b c)) then ((pred a) (pred (iszero a))) else (pred b)))
(if (pred (succ 0)) then (succ (if (if 1 then a else true) then (c 2) else (succ true))) else (\ a : (Bool -> C) . (iszero (if a then false else a))))
(\ e : (((C -> B) -> (C -> C)) -> ((Nat -> Nat) -> (B -> Bool))) . ((\ a : C . 0) (pred (if (if 1 then c else a) then false else b))))
(if (pred (iszero true)) then (pred (pred (\ c : A . true))) else (iszero (iszero 0)))
((if ((c a) (succ b)) then (pred true) else (if (b true) then false else (1 true))) (if (pred (a true)) then (pred true) else (pred (pred 1))))
(succ (\ a : (Bool -> (A -> A)) . (1 0)))
(iszero (if (succ (succ 2)) then (\ e : B . 2) else (iszero 1)))
(succ (iszero (pred (succ 0))))
(succ ((\ e : C . c) (iszero 1)))
(succ (iszero (1 0)))
(if (\ d : ((Bool -> Nat) -> Nat) . (if (pred 1) then (if b then c else b) else (succ true))) then (succ (if (iszero 2) then (pred a) else (if c then b else a))) else (if (pred a) then (pred (if 0 then 2 else true)) else (if 1 then (iszero 1) else 1)))
(succ (iszero (iszero (\ a : Bool . c))))
(pred (pred (\ a : C . 2)))
(if ((pred (c false)) (\ e : (B -> Nat) . (iszero b))) then (succ (\ c : (Bool -> A) . 1)) else (iszero (if (a true) then (iszero true) else (\ d : A . (\ b : A . true)))))
(succ (pred (\ c : (Bool -> C) . (pred c))))
((\ d : (Bool -> C) . (pred a)) (succ (\ e : (A -> Bool) . (pred a))))
(succ (if (pred (pred a)) then (iszero c) else (iszero (a b))))
((iszero (pred c)) ((if (succ (\ e : C . b)) then (succ b) else (\ d : (B -> B) . a)) (\ b : A . (\ a : Bool . b))))
(if (succ ((iszero 2) (iszero a))) then (pred (true (if false then c else c))) else (iszero ((if 2 then true else 2) (iszero 1))))
(iszero (iszero (if (pred 2) then (succ true) else b)))
(iszero (succ (1 0)))
((iszero (if (succ 2) then (iszero 2) else c)) (succ (succ (succ (succ false)))))
(if (succ (iszero (\ a : Nat . b))) then (\ d : (Nat -> B) . (if (pred (pred 2)) then (succ false) else (succ b))) else (pred (\ b : ((Nat -> A) -> (B -> C)) . (2 b))))
(if ((\ c : B . a) (\ b : (Nat -> C) . (a a))) then (iszero (\ e : (A -> Bool) . true)) else (succ (if a then 2 else c)))
(iszero (iszero (iszero (1 b))))
(iszero (succ (succ (if true then 1 else 0))))
(if (\ a : ((Nat -> C) -> (Nat -> Bool)) . (iszero (\ e : A . 0))) then (succ (if (if false then 2 else 2) then (\ b : Bool . c) else (succ true))) else (iszero (iszero (succ true))))
(pred (if (iszero (if 0 then (iszero 2) else 2)) then (pred (succ true)) else (iszero 1)))
((if ((pred b) (if (iszero 0) then (iszero false) else false)) then (if 1 then b else (iszero false)) else (succ (iszero (\ c : Nat . a)))) (iszero (\ e : Bool . 1)))
(pred (if (if (if 2 then true else false) then (if (c b) then true else (false a)) else (succ c)) then (\ e : (Nat -> B) . (pred a)) else (if (succ (pred 2)) then (c (succ 1)) else (iszero b))))
(\ b : ((((C -> Nat) -> (A -> Nat)) -> (Nat -> B)) -> ((A -> A) -> ((Bool -> C) -> Bool))) . (if (succ (\ d : Nat . 0)) then (pred (pred a)) else (iszero (pred true))))
(iszero (succ (succ a)))
((\ a : (B -> C) . (\ a : ((Nat -> Nat) -> B) . (false true))) (succ (1 1)))
(pred ((false 1) (\ c : B . c)))
(iszero (if (iszero (if true then c else 0)) then ((if c then b else c) (succ c)) else (\ b : (C -> A) . false)))
(\ a : ((B -> (B -> A)) -> (Bool -> A)) . (\ a : (B -> Nat) . (if true then b else c)))
(iszero (\ c : (C -> A) . (pred ((if c then false else 0) (\ a : B . false)))))
(if (succ (if false then (0 false) else (succ false))) then (if (\ b : B . 2) then (pred (\ d : B . true)) else (\ a : B . b)) else (pred (succ (if 2 then 2 else 2))))
(succ ((iszero a) (\ e : (Nat -> Nat) . 0)))
(succ (iszero (if false then false else true)))
(if (succ (iszero (pred true))) then (succ (pred 0)) else (iszero (if (iszero 1) then (iszero c) else a)))
(\ c : ((A -> A) -> (Nat -> A)) . (succ (pred (iszero c))))
((iszero (\ a : C . c)) ((\ c : B . a) (pred (\ c : Nat . a))))
((iszero (iszero c)) (iszero (\ a : (B -> A) . (if c then (\ c : C . true) else true))))
(pred (\ b : ((C -> B) -> (C -> Nat)) . (succ (succ c))))
(succ ((2 2) (\ d : A . 0)))
((pred (pred true)) (if (pred a) then (succ (succ false)) else ((pred b) (\ b : A . a))))
((\ d : (B -> Nat) . ((\ c : Nat . 1) (c c))) (\ c : (B -> A) . (pred 0)))
(pred (iszero (if false then b else 0)))
(\ b : ((A -> C) -> (C -> A)) . (pred (iszero (succ b))))
(succ (succ (pred 2)))
(iszero ((\ c : A . (true 2)) (\ e : A . (succ true))))
(if (iszero (iszero c)) then (pred (pred b)) else (pred (iszero true)))
(if (\ a : (C -> Bool) . (\ a : ((B -> Bool) -> Nat) . (\ c : (Nat -> Nat) . (0 true)))) then (succ (\ a : (A -> A) . (succ b))) else (succ (iszero (\ e : (A -> Nat) . (true b)))))
(pred (\ b : ((A -> B) -> C) . (iszero (succ 2))))
(\ b : ((Bool -> Nat) -> ((A -> Bool) -> A)) . (succ (false true)))
((pred (iszero c)) (pred (succ (iszero c))))
(iszero (pred (iszero (\ b : B . a))))
(if (\ c : (A -> Bool) . (succ (2 c))) then (succ (if (if false then 2 else 0) then (\ c : A . 0) else true)) else (iszero (succ ((if true then a else a) (\ c : B . a)))))
(succ (if (succ (iszero c)) then (iszero (iszero b)) else (if (b 1) then 0 else true)))
(pred ((\ d : B . (\ d : A . 2)) (pred (succ (c 2)))))
(succ (pred (pred 1)))
(pred (iszero (succ 1)))
(if (((\ b : Nat . c) 0) (succ 2)) then (iszero (iszero 2)) else (pred (b false)))
((\ d : (Nat -> (A -> Nat)) . (succ (iszero (succ b)))) ((pred (if true then 2 else (if false then a else true))) (\ c : ((C -> A) -> (B -> Nat)) . (iszero true))))
((\ c : (B -> C) . (succ 2)) (\ b : ((B -> C) -> (B -> (Bool -> Nat))) . (iszero (pred b))))
(if (if (0 2) then (\ d : B . b) else (pred (\ a : Bool . 2))) then (pred (iszero (succ true))) else (iszero (0 c)))
(iszero (if (\ a : Bool . (\ b : Bool . c)) then (succ (c c)) else (succ (iszero a))))
(if (\ d : (Nat -> Bool) . (iszero (pred 2))) then (if ((succ 2) (pred c)) then (pred 0) else (if (iszero c) then (iszero b) else (\ d : Nat . a))) else ((succ a) (if (iszero false) then b else 0)))
(if (succ (if (pred true) then (succ true) else true)) then (if (if (pred b) then c else c) then (pred (pred (\ d : Bool . false))) else (pred (pred true))) else ((iszero (iszero true)) (\ b : (Bool -> B) . b)))
(\ d : (((Bool -> Nat) -> (Nat -> A)) -> ((B -> Nat) -> (Nat -> Bool))) . (pred (\ b : Nat . 1)))
(pred (succ ((\ a : C . (iszero 0)) ((pred true) 0))))
(succ (if (if (succ 1) then (iszero false) else (succ (false 2))) then (\ b : (C -> Bool) . (succ true)) else ((if true then 2 else 2) (\ d : B . a))))
(pred (pred (pred (\ b : Nat . b))))
(pred (succ (iszero false)))
(if ((iszero (iszero (iszero c))) ((iszero 0) 0)) then ((succ (2 a)) (succ a)) else (if (succ ((succ 2) (1 c))) then ((\ c : Bool . true) (if 2 then a else false)) else (if (\ e : C . c) then 0 else (if 1 then true else 0))))
(\ a : (((C -> A) -> A) -> (A -> B)) . (iszero (succ (pred c))))
((iszero ((\ e : Nat . false) (\ b : A . b))) (succ (iszero (if 1 then (\ e : Nat . b) else 2))))
(\ d : ((A -> C) -> ((C -> B) -> Bool)) . (\ b : ((Nat -> C) -> Nat) . (iszero (iszero false))))
(iszero (if (iszero (if true then b else 1)) then (succ c) else (if (1 a) then 2 else c)))
((iszero (succ b)) (if (\ a : B . true) then ((pred a) (2 true)) else (pred false)))
(iszero (pred (succ (succ false))))
(succ (((pred true) (0 0)) ((pred b) (if 0 then b else 2))))
(if (succ (iszero c)) then (if (iszero 1) then (\ d : B . (succ b)) else (iszero (succ 2))) else (succ (succ (succ b))))
(iszero (succ (2 true)))
(succ (succ (if 1 then true else b)))
(pred (pred (\ a : ((C -> C) -> B) . (\ d : A . 0))))
(pred (succ ((if c then a else 2) false)))
(pred (succ (\ a : B . b)))
(iszero (pred (pred (if a then 2 else c))))
(iszero (if (succ a) then (pred 1) else (succ a)))
(succ (\ b : ((C -> Bool) -> (Nat -> A)) . (iszero (\ c : A . true))))
((\ a : ((A -> Bool) -> (C -> Bool)) . (pred c)) (pred (if (\ c : Nat . false) then a else (\ c : Bool . true))))
((iszero (if 1 then 0 else a)) (\ c : (Nat -> Nat) . (succ a)))
(succ (\ c : (A -> Nat) . (c false)))
((pred (succ 2)) (iszero ((true c) (succ a))))
(succ (pred (pred a)))
(if (pred ((b 2) (\ c : Nat . false))) then (iszero (1 (if 0 then 0 else true))) else (\ e : (B -> Bool) . (pred ((pred 2) (\ a : B . c)))))
(succ (if (\ c : A . 0) then (\ d : (C -> Bool) . (succ false)) else (\ d : Nat . (iszero true))))
(succ (pred (\ e : (Nat -> Nat) . (2 2))))
(\ d : (((C -> B) -> (C -> B)) -> (C -> A)) . (pred (iszero 2)))
(if ((if (pred a) then (succ 0) else (\ e : Nat . c)) (pred 1)) then (succ (succ (succ 1))) else ((iszero a) (succ 2)))
(if (pred (succ false)) then (iszero (if 0 then c else true)) else (pred ((pred false) (if 1 then 0 else a))))
(\ c : (((Bool -> B) -> (A -> A)) -> ((Bool -> B) -> (Bool -> B))) . (pred ((\ a : B . b) 1)))
(((succ a) (\ c : Bool . 2)) (\ a : ((C -> A) -> (C -> Nat)) . (iszero (\ b : Nat . b))))
(if ((if (iszero c) then (1 b) else (\ b : Nat . false)) (if (if b then c else 1) then (\ b : C . 0) else (if 0 then (iszero a) else 1))) then (succ (iszero (\ c : A . true))) else ((\ a : A . c) (iszero c)))
(iszero (\ e : ((Nat -> B) -> ((A -> Nat) -> Bool)) . (\ c : (Nat -> B) . a)))
(\ a : ((Nat -> (A -> C)) -> ((A -> Bool) -> (B -> C))) . ((\ b : (Nat -> Bool) . a) (pred (succ b))))
(if ((\ c : (Bool -> A) . ((iszero c) (pred true))) (\ a : (B -> Bool) . (\ c : A . 1))) then (\ a : (Nat -> C) . ((if 1 then false else 2) (if 2 then b else b))) else (pred (succ c)))
(if (succ (pred 2)) then (if (succ c) then (succ false) else (iszero a)) else (succ (pred (iszero b))))
(iszero (succ (\ c : (Nat -> A) . (iszero 1))))
(succ ((\ a : (A -> Nat) . (pred (\ c : C . c))) (pred (iszero b))))
(if (succ (iszero a)) then (iszero (0 2)) else (pred (pred (pred (\ a : Bool . false)))))
(iszero (((\ e : A . true) (\ b : C . a)) ((if 0 then b else 1) (succ true))))
(succ (iszero (if 0 then false else (pred false))))
((iszero (b (pred 1))) (succ (pred c)))
(\ a : ((A -> (B -> Nat)) -> (B -> A)) . (pred (b c)))
(if (\ e : (C -> C) . (iszero c)) then (succ ((\ e : B . 1) (\ d : B . b))) else (succ (a 0)))
(succ (pred (true b)))
(\ b : (((Nat -> C) -> ((A -> A) -> (B -> B))) -> ((Bool -> Bool) -> (B -> A))) . (\ e : ((B -> B) -> (Nat -> C)) . (\ a : Bool . c)))
((pred ((if false then true else false) true)) (succ (iszero (succ 2))))
(\ b : (((B -> B) -> A) -> (((C -> Bool) -> (Nat -> Bool)) -> (Nat -> (Bool -> C)))) . (if ((a b) (pred (pred 0))) then (\ b : A . 1) else (succ (2 1))))
((succ (\ b : (A -> B) . (iszero 0))) (\ c : ((A -> A) -> (B -> A)) . (\ c : (Nat -> C) . (iszero (\ d : B . 2)))))
(iszero ((iszero (if b then a else false)) (if (pred c) then (iszero a) else (succ b))))
(iszero ((succ a) (pred a)))
(\ b : ((C -> A) -> (A -> (Nat -> C))) . (succ (\ d : C . b)))
(iszero (if (pred (a 0)) then (iszero (if true then 0 else a)) else (iszero (true 0))))
(\ a : (((Bool -> Bool) -> (Bool -> A)) -> (((Bool -> C) -> Bool) -> (C -> B))) . (iszero (iszero (iszero a))))
((succ ((pred a) (2 true))) (if (pred b) then (\ b : (B -> C) . (if b then (\ a : Bool . false) else 2)) else (succ (if true then (if true then b else a) else (\ d : A . 1)))))
((succ (iszero 1)) (\ e : ((Bool -> A) -> (A -> B)) . (succ (false false))))
(pred (if ((pred (iszero a)) (succ a)) then (if 2 then 1 else (if b then a else c)) else (if 1 then b else c)))
(\ c : ((A -> C) -> (A -> C)) . ((if 1 then (\ a : Nat . false) else 2) (if (succ a) then b else (pred 2))))
(pred (succ (succ (if true then 1 else true))))
(if (if (pred a) then (succ (\ b : (Nat -> Nat) . (if 2 then 2 else c))) else (succ (pred a))) then (pred (\ c : (B -> B) . (if (pred 0) then b else b))) else (\ b : (C -> (A -> C)) . (if c then (\ b : A . b) else b)))
(iszero ((false (succ true)) (if (pred false) then (if b then true else false) else a)))
((succ ((\ b : A . true) (false false))) (((pred 1) (pred true)) ((iszero true) (pred c))))
(\ a : (((Bool -> Nat) -> (B -> Bool)) -> (Nat -> A)) . (succ (\ b : (A -> A) . a)))
(pred (\ a : ((C -> Bool) -> (Nat -> C)) . (\ b : Bool . a)))
(if (\ c : (B -> A) . (pred 0)) then (if (succ 0) then (pred (iszero false)) else (pred c)) else (pred (\ a : Bool . a)))
(succ (succ (iszero a)))
(iszero (if (iszero true) then (pred (if 1 then c else a)) else (succ (\ d : Nat . a))))
((iszero (iszero (iszero 1))) (if (\ b : B . (pred b)) then (succ (if c then b else b)) else ((false 2) 2)))
(pred (iszero (succ (a 1))))
(if ((0 (if true then 0 else false)) (if true then true else false)) then (\ b : ((C -> C) -> (Bool -> B)) . ((pred 1) (succ (1 true)))) else ((iszero (succ 0)) (succ (c b))))
(succ (pred ((c b) (iszero 1))))
(pred ((pred 2) (pred (if a then (c 1) else 1))))
(if ((succ 0) (\ d : B . false)) then (iszero (succ 0)) else (iszero (iszero true)))
(if (\ a : (A -> B) . (c (if true then false else 0))) then ((pred true) (\ b : (Nat -> A) . (\ c : B . 1))) else (\ c : (((Bool -> A) -> A) -> (Bool -> Nat)) . (if (pred false) then (pred a) else (true 0))))
(pred (\ b : (Nat -> Nat) . (2 false)))
(pred (succ (pred (true (b false)))))
(pred (\ c : (C -> Bool) . (if c then 1 else 0)))
(succ (\ d : (B -> A) . (if b then (c b) else (true 0))))
((if (if (\ e : A . c) then false else (pred a)) then (if (iszero 0) then (pred 1) else (pred b)) else (pred (\ a : C . true))) (if (pred (succ (iszero c))) then ((b true) (pred true)) else (\ a : ((Nat -> Bool) -> C) . (b c))))
(succ (succ (c 2)))
(pred (succ (if (true true) then (if c then false else 0) else (1 b))))
(iszero (((pred 1) (\ b : C . 2)) ((if 1 then a else 1) false)))
(if (\ b : ((C -> Bool) -> ((C -> Nat) -> (B -> C))) . ((iszero b) (if 0 then 2 else (if 2 then 2 else 1)))) then (\ c : ((Nat -> C) -> (A -> Nat)) . ((\ a : A . false) (iszero 2))) else ((pred (if 0 then 2 else 2)) (succ (1 true))))
(\ c : ((A -> (Nat -> C)) -> ((A -> Nat) -> Nat)) . (succ (\ b : Nat . true)))
(succ (if ((pred 0) (iszero true)) then (if 1 then false else false) else (if (succ false) then (iszero b) else b)))
(pred (pred (a false)))
(\ d : ((Nat -> C) -> (Nat -> (A -> Nat))) . (\ a : ((B -> Nat) -> (B -> C)) . (\ c : Bool . 1)))
(\ c : (((A -> B) -> (Bool -> B)) -> ((A -> Bool) -> (Nat -> Bool))) . (iszero (iszero (iszero a))))
(succ (\ a : (B -> Nat) . (if b then 0 else false)))
(succ (succ (succ (pred 0))))
(iszero (\ c : ((Nat -> Nat) -> Bool) . (if c then false else (succ b))))
((\ e : ((B -> A) -> (C -> B)) . (\ d : C . (iszero false))) (iszero (iszero 2)))
(if (succ (pred 0)) then (succ (if true then 2 else 0)) else ((pred (succ 0)) ((true true) (\ a : Nat . true))))
(pred (if (pred (if c then 1 else 1)) then (pred (\ c : C . c)) else (iszero a)))
(pred (\ e : (Bool -> C) . (pred (succ 2))))
(pred (\ d : (C -> A) . (succ 0)))
(((\ c : B . (\ c : C . c)) (if (pred 2) then 1 else (succ 0))) (if (succ (pred 1)) then (pred 0) else (pred false)))
(iszero ((pred 0) (\ c : (A -> Bool) . a)))
(\ a : ((Nat -> A) -> ((B -> C) -> (B -> Nat))) . (iszero (if ((pred false) (\ a : B . 1)) then (if (0 2) then (\ d : Nat . 2) else (if false then a else false)) else (\ e : Nat . a))))
(pred (succ (\ e : B . c)))
(iszero ((\ d : (A -> C) . 1) (((true c) (iszero 2)) (if c then 0 else 0))))
(if (if (pred (\ a : Nat . a)) then (pred (if true then b else a)) else ((if 2 then a else false) ((\ b : B . a) 2))) then (if (succ (succ 1)) then (\ a : (Nat -> (C -> Nat)) . (iszero (succ 0))) else (if (pred (a b)) then (\ c : Bool . 1) else (iszero (iszero 1)))) else (iszero (if a then (succ 1) else 0)))
