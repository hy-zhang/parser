\x:Bot. x
\x:Bot. x x
\x:Top. x
(\x:Top. x) (\x:Top. x)
(\x:Top->Top. x) (\x:Top. x)
\x:Bool. x
(\x:Bool->Bool. if x false then true else false) (\x:Bool. if x then false else true)
if error then true else false
error true
(\x:Bool. x) error
error
(try (try (if (try false with error) then (if true then error else true) else (\ d : (Bool -> Top) . (\ a : Bool . a))) with (if (b b) then (\ b : C . error) else (\ a : A . (if a then true else b)))) with ((false (\ a : Bool . a)) (\ b : Bool . false)))
(\ a : ((B -> A) -> ((Bool -> A) -> Top)) . (try ((try b with error) (if true then false else a)) with (\ d : (Top -> Top) . (error a))))
(if (try (b b) with ((\ a : Bot . c) true)) then (if (b a) then (\ b : C . b) else (false a)) else (if (a (c a)) then (b (try c with error)) else (\ b : (Bool -> A) . (\ b : Bot . error))))
((\ d : ((A -> Bot) -> Top) . (if (try b with (true c)) then (\ b : B . error) else (try false with error))) (try ((try false with error) (if (b error) then b else (if b then c else false))) with (\ a : (B -> Bool) . (\ c : A . a))))
(try (if (\ b : (Bool -> Top) . (if false then c else error)) then (\ d : (Top -> Bool) . (\ b : (B -> C) . true)) else (if (if b then false else true) then (\ b : Bot . a) else (if c then false else a))) with (if ((\ a : Bot . error) true) then ((a a) true) else (try c with error)))
(try (try (try (\ b : Bool . b) with (c (c true))) with (\ d : ((Top -> B) -> A) . (if b then c else error))) with ((if error then (\ a : Bot . true) else true) (\ c : A . b)))
((((try true with error) (try true with b)) (\ e : Bot . false)) (\ b : ((B -> Bot) -> ((A -> Top) -> (Bot -> Bot))) . (if (\ a : Bot . error) then (b b) else (try true with true))))
((try (try c with true) with (if a then error else c)) (try (\ d : B . true) with (try true with false)))
((\ b : (Bool -> A) . (c (\ a : C . false))) (try (\ c : Top . a) with (try (\ d : A . c) with true)))
(((if c then (a b) else (\ d : Bool . false)) (\ b : (C -> B) . a)) (\ e : ((Bot -> Bool) -> (Bot -> Bool)) . ((try a with b) (if (error error) then true else c))))
((\ c : ((Bot -> Bot) -> (Top -> A)) . (if a then (try c with error) else (if error then error else a))) (if (try (if c then error else error) with (\ a : Bot . error)) then (if true then error else true) else (if true then a else true)))
(try (((\ e : C . error) (a true)) (try (if (if b then false else error) then (c c) else (if b then c else a)) with (try error with false))) with ((if (true error) then (\ a : Bot . c) else (\ a : (Bool -> Top) . c)) ((true (\ b : C . c)) (\ c : Top . error))))
((\ a : (A -> Bool) . (error false)) (if (try true with b) then (try b with false) else (b b)))
((try (try true with (try error with b)) with ((\ a : Bot . false) true)) (if (try (\ e : B . a) with (\ b : B . a)) then (\ c : Bot . (\ d : Top . a)) else (if (\ d : A . false) then (\ c : Top . error) else (\ a : A . false))))
(try ((if a then c else b) (error (if true then false else false))) with ((\ d : A . a) ((error a) (try false with b))))
(try ((if c then a else c) (c true)) with (\ e : ((C -> C) -> (Bot -> B)) . (try (try a with (if c then b else c)) with (try true with false))))
(\ d : ((C -> C) -> (Bool -> Top)) . (\ a : (((Bot -> Bot) -> Top) -> (C -> A)) . ((\ a : A . true) false)))
((if (\ d : Top . error) then (if true then (\ d : Bool . c) else (\ b : Top . error)) else (\ e : Bot . error)) (try (try c with a) with (true b)))
(try (if ((try c with true) (if c then a else false)) then (try (\ e : A . a) with (if b then b else error)) else (b c)) with (\ d : (((C -> Top) -> (Bool -> C)) -> ((A -> A) -> (Bot -> Bool))) . (if true then (\ e : C . error) else (if c then c else c))))
(try (\ e : ((Bot -> (Bot -> C)) -> ((B -> A) -> A)) . (try a with (a b))) with ((if a then (c b) else (true a)) (try (if (\ c : C . error) then (\ c : Top . c) else (error error)) with ((if a then b else a) (false error)))))
(if (try ((try c with a) (error c)) with (try error with c)) then (try (try (\ b : C . b) with a) with ((if error then error else b) (try (try error with a) with true))) else ((\ e : (B -> A) . (try c with true)) ((error error) error)))
((((if (\ b : Top . a) then (\ c : Bot . c) else error) (try a with false)) (if (\ e : Bool . b) then ((a error) (if b then true else a)) else (if (try true with error) then (if error then error else c) else c))) ((if (if b then false else c) then (if (false a) then (if true then false else b) else true) else (error (if error then false else true))) (if c then b else (true true))))
((\ c : ((B -> B) -> Top) . (try (if a then b else c) with true)) (if (try (\ d : A . false) with (false error)) then (if (a a) then a else (\ e : C . false)) else (\ c : A . (error a))))
(if (if (\ d : ((Bool -> B) -> C) . (try (try true with true) with true)) then ((c true) (try (if a then true else error) with (a error))) else (if (\ b : Bot . true) then (\ a : Top . true) else (c true))) then (try (\ a : Top . b) with (if (if b then b else error) then false else (\ d : B . error))) else (if (\ d : C . a) then (if error then b else error) else (try a with (try false with b))))
(try (if (false b) then (try b with false) else (if error then c else c)) with (\ a : (Bool -> B) . (try (try false with false) with c)))
((if (\ a : (Bot -> (Top -> Bot)) . (if true then b else b)) then (if (\ d : A . b) then false else b) else ((try false with a) (\ a : Bot . a))) (\ b : (Bot -> Bot) . (\ e : (B -> Top) . (true (if false then true else error)))))
((if (if a then (if a then error else b) else (try true with false)) then ((error error) (\ a : Bot . false)) else (if (try b with error) then ((b a) (if false then false else error)) else (true true))) (\ b : (A -> A) . (false false)))
(try (try (\ a : (A -> A) . (try error with true)) with (\ c : ((C -> Top) -> (B -> Bool)) . (try (if b then false else b) with a))) with (try (if c then error else true) with (\ b : (Top -> C) . b)))
(if (\ a : ((Bool -> Top) -> (Bool -> Top)) . (if error then b else false)) then ((if (try b with (true true)) then (\ a : A . c) else (\ d : Bot . (error b))) (\ d : (Bot -> Bot) . (if (try false with true) then (try false with error) else c))) else (\ d : (A -> (Bot -> Bot)) . (\ c : C . (if b then a else c))))
(try ((false b) ((try c with true) b)) with (try (\ d : (Bool -> Top) . (try error with false)) with ((if error then true else a) (false error))))
(\ a : ((C -> Bot) -> ((A -> A) -> (C -> Top))) . (\ e : ((A -> C) -> (B -> Top)) . ((\ e : Top . false) (\ d : A . false))))
(\ e : ((Bool -> (B -> Bot)) -> ((Bot -> C) -> ((B -> B) -> (Bool -> A)))) . ((\ e : (C -> Top) . false) (c (try false with false))))
(try (try (if (try true with error) then a else a) with (\ c : (B -> Bot) . (if c then true else error))) with (if (if c then c else true) then (try true with c) else (\ c : A . a)))
(\ e : ((Bool -> C) -> (Top -> C)) . (if (a b) then (true error) else (if error then b else c)))
(\ c : ((A -> C) -> (Bool -> A)) . (if (\ e : Top . (\ a : C . b)) then (if b then b else b) else (\ d : C . (error false))))
(\ e : ((C -> C) -> (A -> C)) . (\ d : (Bool -> (A -> Top)) . (try false with (\ b : B . a))))
(try (try (\ e : (Bool -> (A -> B)) . (try c with b)) with ((false false) (try a with a))) with ((if (try b with error) then (try error with false) else (try error with a)) (if (true error) then true else true)))
(try ((\ c : C . a) (try false with c)) with (try (\ e : C . b) with (c b)))
((try (if (\ a : (A -> Bot) . (try c with b)) then (c error) else (if a then true else b)) with (if (\ b : Bot . c) then a else (true b))) ((if true then false else error) (try c with b)))
(try (try (\ a : (A -> A) . false) with (try error with (\ c : Bool . error))) with ((if c then false else false) (try (true a) with (\ e : A . false))))
(\ a : ((B -> (C -> Bool)) -> ((Top -> Bot) -> Bool)) . (if (\ c : B . error) then (if (true true) then (\ c : B . c) else (error true)) else (error (b c))))
(try (\ e : (B -> C) . (\ e : (Bool -> Bool) . (false b))) with (if (if error then b else false) then (try false with a) else (\ e : Bot . c)))
((\ c : (Bool -> A) . (try false with b)) (if (try (\ c : Bot . true) with b) then (if (\ d : B . false) then (true a) else (false c)) else (try (try false with false) with a)))
(((if true then b else true) (if (error a) then (\ c : Bool . a) else (\ d : C . c))) ((\ e : Bot . (b c)) (c error)))
((try (\ c : A . true) with (c error)) (\ e : (Top -> (Bot -> Bool)) . (\ a : C . b)))
(\ b : ((Bool -> B) -> (A -> (Top -> Top))) . (try (try ((if true then a else c) c) with (try (\ b : Bool . c) with c)) with ((\ c : (A -> Bool) . (if a then a else c)) (if a then error else c))))
(((if (false b) then (\ d : Top . b) else (try a with true)) (\ a : (C -> C) . (if error then a else a))) ((\ c : Top . a) (try (try a with b) with a)))
((try (if false then b else false) with (a true)) ((c b) (b true)))
(\ d : (((A -> C) -> (Bool -> Top)) -> (Bool -> C)) . ((try b with (false false)) (\ a : A . true)))
(if (if (if (if b then false else error) then b else (\ d : Bool . true)) then (if error then false else a) else (try error with (try false with true))) then (try (\ e : B . true) with (try true with a)) else (if (try true with c) then ((a true) error) else (\ c : (C -> A) . error)))
(\ d : ((Bot -> (Bool -> A)) -> (B -> Top)) . (if (\ d : A . true) then (\ c : Bot . c) else (if (if error then b else a) then c else (true true))))
((if (\ c : Bool . false) then (if a then true else error) else (b (\ c : Top . error))) (if (try false with false) then ((if c then b else a) a) else ((error false) (\ c : Bot . false))))
(try (try (try false with b) with (\ a : C . (if b then c else b))) with (\ c : ((Bot -> Top) -> (Bool -> Top)) . (\ c : (Top -> (Bool -> B)) . (\ c : (A -> A) . (if false then c else error)))))
(try (\ d : ((B -> B) -> (Bool -> Bot)) . ((false error) (try b with (a a)))) with (\ a : (Top -> B) . (\ d : B . c)))
((try (try (if a then b else error) with (\ e : C . true)) with (try (if error then b else b) with false)) (try (true b) with (try error with (if error then b else error))))
((try (try b with error) with (\ c : Top . b)) (if (\ c : B . b) then (try b with (try a with false)) else (try true with (false error))))
((if (try false with (c false)) then ((if a then a else b) (\ e : Top . b)) else (\ d : Top . a)) (\ b : ((Bot -> Bot) -> (B -> A)) . ((try a with true) (try true with error))))
((try ((c error) (try b with false)) with (try c with c)) (if (\ d : ((B -> Bool) -> (A -> Bool)) . ((try true with c) (if c then false else true))) then (a b) else (\ a : (B -> Bot) . a)))
(try (if (if (if true then error else true) then b else (try error with error)) then (if (error false) then (if (if c then true else false) then (if false then b else b) else c) else (try b with true)) else (((try c with true) (if error then b else true)) (c (a b)))) with (\ b : ((Top -> A) -> ((Bool -> Top) -> Bool)) . (if b then false else (true true))))
(if (try ((\ b : C . false) (try c with error)) with (if c then false else a)) then (try (try c with false) with (a c)) else (if (if true then (if a then a else false) else false) then (if b then (false a) else error) else (try ((false a) true) with (if (try a with true) then true else (\ d : A . error)))))
((\ d : (Bool -> Bot) . (try (c error) with c)) (\ d : (C -> (B -> C)) . (if false then false else true)))
((if (true error) then (false b) else (if c then true else c)) ((try (b b) with (try a with false)) (b false)))
(if (if ((try error with true) ((error true) true)) then (\ c : B . (error b)) else ((\ c : A . false) (try b with b))) then ((\ c : Bool . error) (try (if true then a else c) with (\ d : A . true))) else ((try (if false then error else error) with false) (\ b : Bot . a)))
(if (\ c : ((C -> Bot) -> (Top -> B)) . (\ c : C . error)) then ((\ b : Bool . b) ((true (error c)) (\ a : B . error))) else ((\ b : (A -> Bool) . c) (\ d : ((A -> Bool) -> (B -> A)) . (\ c : Bot . (\ a : A . c)))))
(\ a : ((Top -> Bot) -> (Bool -> (C -> B))) . ((try true with error) (if c then false else false)))
(if (\ c : (B -> Bool) . (\ e : (A -> Top) . true)) then (\ a : ((C -> C) -> (Bool -> (A -> Top))) . (\ b : (B -> Bot) . (try a with error))) else (try (c c) with (if error then a else true)))
((try (false b) with (\ c : B . (if b then b else true))) (\ c : (Bot -> Top) . (\ b : (Top -> Bool) . (try b with error))))
(if (if (if ((try b with a) (try true with false)) then ((if b then a else b) true) else (if b then a else b)) then (a true) else (if b then a else (try error with b))) then (if (\ e : (A -> Bot) . (if false then b else a)) then (if (false false) then (if c then error else b) else (true false)) else (\ a : (C -> Bool) . a)) else (\ c : (C -> Bool) . (\ a : (B -> A) . (if false then true else c))))
(try (\ a : (Top -> (Bool -> Bool)) . ((c c) (try b with error))) with (\ e : (Bot -> A) . (c a)))
(\ b : ((Bot -> (C -> Bot)) -> ((C -> Bool) -> ((Bool -> B) -> Top))) . ((if (\ c : C . error) then error else (\ a : Bot . a)) (try error with error)))
(if (if (if false then (if c then error else false) else true) then ((try a with true) (if false then (\ d : B . error) else (\ a : B . b))) else (try (a a) with (a error))) then (try (\ b : Bot . b) with (a false)) else (if (if error then true else (if error then false else false)) then (if (\ c : (C -> C) . (a error)) then (if a then false else false) else (try false with a)) else ((error a) c)))
(\ e : ((Bot -> B) -> ((Bot -> C) -> (Bool -> Bool))) . (try (try (\ e : C . false) with ((try false with false) (try c with error))) with (\ a : A . (try c with error))))
(\ c : (((B -> A) -> (Bool -> Bool)) -> (B -> A)) . (\ a : (Bool -> Top) . (\ e : C . error)))
(((if (\ a : Bool . b) then a else c) (true (try c with false))) (\ c : (A -> C) . (b error)))
(\ b : ((Top -> Bool) -> (B -> Bool)) . (if ((\ c : Bool . c) false) then (try (try c with false) with false) else (\ e : C . error)))
((\ c : (((Bool -> B) -> (C -> Bot)) -> (C -> Top)) . ((try true with true) (try error with a))) ((((if b then a else a) c) (if true then a else c)) (\ b : (Bool -> Bool) . (b (if false then a else a)))))
(try (if (\ c : (B -> Bool) . (try a with false)) then (try (c (b false)) with (\ a : Top . c)) else (try (try error with true) with (\ d : A . c))) with (if (if (if (\ c : A . c) then (true true) else (try a with error)) then (\ c : (Top -> Top) . c) else (a a)) then (\ b : Bool . (if b then a else a)) else (\ c : A . (\ a : Bool . c))))
(if (try (try (\ a : Bot . a) with (true c)) with (error a)) then ((\ c : (Bot -> B) . false) ((error c) (\ b : C . (\ d : Bot . c)))) else (try (true (\ a : Bool . c)) with ((try b with (if b then true else a)) (if a then (a c) else (if error then false else true)))))
(if (\ b : (B -> C) . (\ c : Top . b)) then ((try (true a) with (\ a : A . true)) (true (a true))) else (try (\ e : Top . false) with (try (if a then false else true) with (try a with a))))
(if (try (if true then false else (c error)) with (try a with b)) then (\ b : (Bool -> Bool) . (if a then a else true)) else (try (error (true true)) with (if (try error with error) then c else b)))
(try (if (if true then (b false) else a) then (\ d : ((C -> Bot) -> (Bot -> A)) . (\ e : (Top -> C) . (false a))) else (try (\ b : Bool . true) with (if (try true with false) then (try false with false) else c))) with (try (try (if b then a else a) with (\ c : B . error)) with (\ b : Bool . true)))
((try (true a) with (false a)) (\ d : (Bool -> (Top -> B)) . (if (\ e : (B -> A) . (if a then error else error)) then (false b) else (\ a : Bool . false))))
(try (if ((error b) c) then (if (\ d : Bool . false) then b else (if false then c else error)) else (if (\ c : A . b) then (try b with b) else (true true))) with (try (try false with (try true with b)) with (if false then false else false)))
(try (try (\ a : (C -> B) . ((\ e : Bool . true) true)) with (((try c with a) c) (if error then a else c))) with (try (if b then (try a with a) else (try false with false)) with (try (error c) with (if true then b else (a error)))))
((try (if (if (try error with b) then c else b) then (\ c : A . true) else (a c)) with (try (try error with a) with (\ b : Bot . false))) (\ b : ((B -> C) -> (Top -> Top)) . (try true with error)))
(try (try (if error then error else false) with (if (c error) then c else b)) with (try (if (try (try c with a) with c) then (if b then false else b) else (if c then false else true)) with ((if false then error else b) (try a with c))))
(\ b : (((Bot -> C) -> (Bot -> Bot)) -> (((Bot -> Bool) -> Bot) -> (Bool -> C))) . ((try (if error then error else true) with (\ c : C . b)) (\ c : Bot . (\ b : B . c))))
(try (\ e : ((Bool -> Bot) -> (Bot -> Bot)) . (if (\ b : Bot . true) then (\ d : Top . true) else (try (if a then true else c) with (try a with b)))) with (try (try (if b then (if c then false else false) else true) with (b b)) with (if b then true else false)))
(\ e : ((((B -> Bot) -> (A -> C)) -> ((Bool -> Bot) -> (Bot -> Bool))) -> ((Bot -> Bool) -> (C -> B))) . (\ e : ((Bool -> Bool) -> (A -> Bot)) . ((try c with true) (try false with b))))
(if (try (if (if b then error else c) then (\ e : C . false) else false) with (try (true error) with (if false then true else b))) then (\ b : ((A -> Top) -> (Bot -> Bool)) . (if c then error else false)) else (try ((b a) (\ e : (C -> Top) . error)) with (if a then a else false)))
(\ e : (((B -> C) -> ((Bot -> B) -> (Bot -> B))) -> ((B -> Bot) -> (B -> B))) . (\ e : ((A -> Bot) -> Bool) . (false a)))
(((if (\ b : C . false) then (error a) else true) ((b (\ d : A . false)) (\ b : C . a))) (if (if (true b) then (if true then c else false) else false) then (\ e : ((Bool -> C) -> C) . (if true then c else c)) else (try (try c with true) with b)))
(try (try (if (try error with false) then (\ d : A . c) else (if error then b else true)) with (if (try a with false) then (\ a : (A -> Bool) . a) else (if a then a else true))) with (try (if (error true) then (if c then error else c) else (\ b : B . b)) with ((if c then error else error) (true b))))
(try ((try false with (a true)) (try b with (if a then c else b))) with (\ a : (C -> Bool) . (try (if error then b else true) with c)))
(try ((if a then (a b) else (if a then c else a)) (try true with true)) with (if (try (if false then b else true) with (\ d : C . error)) then (if false then (if a then true else a) else (try c with true)) else (try c with (try b with b))))
(try (if (try true with (error false)) then (error b) else (try a with b)) with (if (try (if b then false else a) with (if true then error else c)) then (\ d : A . c) else (\ c : (A -> C) . (if false then true else b))))
((\ a : (B -> Top) . (try a with false)) (\ a : (Bool -> Bool) . (if a then a else b)))
(try (if (\ d : (A -> Bool) . error) then (if (\ c : B . a) then false else (\ b : Bot . false)) else (\ e : ((A -> C) -> (B -> A)) . (try c with false))) with ((if error then (try true with a) else (try error with true)) ((try a with b) (if b then true else a))))
(try (try (if (try c with c) then (false true) else false) with ((try false with b) c)) with (try (try ((c true) (if a then false else c)) with ((\ d : C . c) b)) with (try (if (if error then c else c) then true else (false c)) with (if error then false else b))))
(((try false with a) (try (c c) with (\ a : Top . c))) (if (\ b : (A -> Bool) . false) then (error false) else (b c)))
((\ d : (B -> B) . (try (true a) with (\ e : Bot . false))) ((\ c : C . (\ c : Bool . a)) (\ d : Bool . c)))
(try ((try (\ d : B . true) with (try error with error)) (if b then b else b)) with (\ c : ((Top -> Top) -> (A -> B)) . ((error (false b)) (if error then true else false))))
(if (if (if (if (c b) then (c error) else (try c with b)) then (if c then false else a) else (try c with b)) then (\ e : (Bot -> C) . c) else (if (if a then false else a) then (\ b : (Bool -> Bool) . (c a)) else ((try false with c) true))) then (if (\ c : C . a) then ((a false) (\ e : C . false)) else (if c then (try error with error) else (try c with b))) else (((\ b : (Bool -> Bot) . c) (true true)) (try (\ c : C . true) with (\ a : (Bool -> C) . error))))
(\ e : (((B -> Top) -> ((C -> B) -> Bot)) -> (C -> (C -> Bot))) . (if (if (\ a : Bool . false) then (if error then c else b) else (try a with b)) then ((try error with b) (\ a : (C -> B) . c)) else (try (if c then true else false) with (if false then b else error))))
(if (\ d : (((Bool -> B) -> (Top -> B)) -> (Bot -> C)) . (try (try a with true) with (if (\ b : B . a) then c else (a false)))) then (try (\ a : (A -> B) . (try true with false)) with (try a with error)) else ((error c) (try c with b)))
(\ e : (((Bot -> Bool) -> (A -> (Top -> Top))) -> ((Bot -> Bot) -> (Bot -> A))) . (try (error error) with (\ a : A . (a c))))
(try (try (c a) with (\ b : (A -> C) . (true b))) with ((if c then (if b then true else true) else false) (c false)))
(try (try (\ c : (C -> Bot) . false) with (true a)) with (try (try false with false) with (if b then false else c)))
(((try false with (try false with true)) (try b with b)) (((try true with a) c) ((a error) (if b then a else c))))
(\ b : ((Bot -> A) -> (B -> (Bool -> A))) . ((try (\ b : (Bot -> C) . error) with (\ d : A . b)) (if c then false else true)))
(\ a : ((Bot -> Bool) -> (A -> (Bool -> Bot))) . (try (try ((\ e : C . false) c) with (false b)) with (\ b : A . (error error))))
(if ((\ e : C . error) (try c with b)) then (\ a : (C -> Top) . (\ b : Bool . b)) else (((try false with true) (if error then c else error)) (\ d : ((C -> A) -> (Bool -> A)) . (\ c : Bool . false))))
(if (if (\ e : B . c) then (try true with error) else (try (\ c : A . false) with error)) then (try (if a then c else false) with (c error)) else (if (try true with a) then (try c with b) else (a (try error with a))))
(\ b : ((C -> Bot) -> (A -> C)) . (try (b a) with (if a then true else (try a with b))))
(if (try (\ e : Bool . false) with (try true with false)) then (try ((if false then c else false) (\ d : A . a)) with (if (b true) then false else a)) else (try ((if c then true else c) (try (error b) with (error false))) with (if (if b then (try error with true) else (\ b : Bool . b)) then (try (if c then true else error) with (if a then a else a)) else (if b then (try error with a) else (if b then c else false)))))
(\ c : ((Bot -> (Top -> A)) -> ((A -> Bot) -> (A -> B))) . (\ d : ((Top -> (Top -> Bool)) -> (B -> Bot)) . (c (if error then error else a))))
(if (\ e : (((A -> A) -> (C -> Top)) -> (C -> B)) . (try (\ b : Bool . (if a then a else true)) with (c error))) then (\ b : (((Bool -> B) -> Bool) -> (Bool -> (B -> Bot))) . (try (if b then b else true) with (b false))) else (try (try c with (a a)) with (\ c : Bool . a)))
(\ d : (((Bool -> Top) -> A) -> (Top -> Bot)) . (try (try a with a) with (\ b : (A -> C) . (\ e : A . error))))
(\ b : ((C -> A) -> (Top -> Bot)) . (try (true (c c)) with (if (if error then error else false) then (try a with false) else c)))
(try (\ e : ((B -> Top) -> (Bool -> B)) . (try (try true with false) with (b true))) with (try (\ b : C . a) with (try c with true)))
(try ((if c then (false a) else (\ c : Bot . b)) (if (error a) then false else a)) with (try (((false true) (false a)) (false (if c then c else c))) with (\ e : (B -> Bot) . c)))
(try (try (\ b : (A -> Top) . ((\ e : Bot . false) (\ a : A . b))) with ((\ b : Bot . (if a then false else error)) (if true then a else false))) with (try (\ e : Bool . b) with (if c then (\ d : C . error) else b)))
((\ e : ((C -> B) -> (B -> B)) . (if a then b else true)) (try (try (\ b : A . error) with a) with (\ a : Bool . true)))
(\ a : (((Bool -> C) -> (Top -> C)) -> ((B -> A) -> (B -> B))) . (try (\ e : Bool . false) with (try error with true)))
(\ a : ((Top -> Bool) -> (Bool -> Top)) . (\ a : ((C -> C) -> A) . (try true with c)))
(if (\ b : (Top -> Bot) . (\ b : Bot . a)) then (try (\ b : (Bot -> Bot) . (if error then b else true)) with (\ c : (Bot -> B) . (\ e : (Top -> Top) . (try false with b)))) else ((if error then b else (false b)) (\ c : C . c)))
(if (try (if a then b else b) with (try a with b)) then (try (if (if c then true else b) then (\ e : C . true) else (try (\ c : B . error) with c)) with (\ c : (A -> C) . (try a with false))) else (if (if (c c) then false else b) then (if ((if c then false else false) true) then (try b with b) else (\ d : C . error)) else (((if error then true else error) (try true with c)) (\ a : Bot . false))))
(try (if (\ d : Bool . error) then (a error) else (\ e : (C -> C) . false)) with (try (try c with (try a with a)) with (if true then (error c) else (try error with b))))
((\ e : (C -> Top) . (try c with error)) (try (try (\ b : Bool . false) with true) with (if (try true with error) then (if false then c else a) else (a false))))
(\ e : ((Bool -> (Bool -> Top)) -> ((B -> Top) -> (Top -> (Bool -> Bool)))) . (try (if b then error else a) with (if error then b else false)))
(\ d : ((C -> C) -> ((Bool -> Bot) -> B)) . (\ c : (B -> B) . (if c then a else b)))
(if ((if error then a else false) (\ a : (Top -> B) . (true error))) then (if (if false then error else true) then (if false then error else c) else (\ a : Bot . true)) else ((\ c : (Top -> C) . (\ a : B . b)) ((try a with false) b)))
(try (\ a : (C -> A) . (\ c : (Top -> C) . false)) with (if (if false then a else a) then (try c with (b false)) else (true error)))
(if (\ a : ((B -> A) -> (C -> (Top -> B))) . (\ e : (Bool -> B) . (if true then c else c))) then (try (\ d : (B -> Top) . (error a)) with (if (if c then false else a) then (try c with true) else true)) else (try (if true then (false false) else (if b then true else b)) with (false a)))
((((\ e : C . (if false then c else b)) (b false)) (if error then (if error then c else error) else (error b))) ((\ b : (Top -> Bool) . error) (\ b : B . true)))
(\ e : (((C -> B) -> ((C -> A) -> (Top -> Top))) -> (C -> B)) . (try (\ c : Top . a) with (\ a : C . error)))
(if (try (c (c error)) with (try false with c)) then (try (c a) with (try a with a)) else (if (if c then (c c) else (\ b : Bot . error)) then (if (b b) then (try false with error) else (if error then a else error)) else (if (if b then error else true) then (try (\ b : Bot . c) with error) else (try false with (if error then b else true)))))
(if (if (\ c : (B -> B) . (\ a : B . (try false with false))) then ((true a) a) else (\ d : C . b)) then (\ a : (C -> (Bool -> Top)) . (\ c : (Top -> Top) . (try (try false with true) with a))) else (if (true (if c then b else true)) then (\ e : ((A -> C) -> (C -> Bot)) . (\ c : C . (if false then false else false))) else (\ a : (B -> B) . (\ c : C . c))))
(try (try ((if c then error else b) b) with (if c then false else false)) with (try ((\ d : Bot . false) error) with (if a then a else false)))
(if (if (\ d : (Bool -> C) . (if b then c else error)) then (if (try b with error) then ((try b with false) c) else (try c with true)) else (\ a : (Top -> (Bot -> Bot)) . (false false))) then (if (if error then b else a) then (try error with c) else (try false with false)) else (\ c : (Bot -> C) . (if b then true else error)))
(if ((if true then (error true) else (try error with true)) (if c then (error true) else (if error then a else error))) then ((try true with b) (\ e : ((Top -> Bot) -> (Bot -> C)) . (\ a : (B -> Bool) . (\ a : Bot . b)))) else (if ((\ a : (B -> A) . (try error with true)) (if c then false else false)) then ((try false with error) (\ d : Bool . error)) else (false a)))
(if (try (try (\ c : Bot . b) with error) with (try false with error)) then ((if c then false else error) (false true)) else (try (try false with false) with (error error)))
(try (try ((false error) (if false then false else true)) with (if error then a else a)) with (\ a : (Top -> Top) . ((if c then false else error) (\ b : B . true))))
((if (\ d : (A -> Bot) . (try true with true)) then (\ c : Bool . false) else (\ e : (C -> Top) . (if (a false) then (\ b : Top . true) else a))) (if (\ a : Top . b) then (\ b : A . error) else (true error)))
((try (\ e : (Bool -> A) . false) with (\ a : (Bot -> Bool) . (if b then c else true))) (\ a : (C -> Bool) . (b false)))
(try (if (if (\ b : A . c) then (\ b : B . false) else (try (a c) with (false false))) then (\ d : C . c) else (try (try a with true) with (try error with true))) with (\ a : (Bot -> A) . (error true)))
(try (if ((try b with false) a) then (c a) else (try c with false)) with (if ((c false) error) then (\ e : (Bool -> Bool) . b) else (if (b (if b then a else c)) then (try true with (if a then c else b)) else (if (a true) then b else error))))
(\ b : (((A -> A) -> (C -> (Bool -> Top))) -> (Bot -> (B -> C))) . (if (\ c : (Bool -> B) . (a (try b with true))) then (true false) else (false true)))
(try (if ((if true then false else error) a) then (\ c : Bot . error) else ((true a) (try a with c))) with (\ a : ((Bool -> C) -> (Bool -> A)) . (\ a : (Top -> Bool) . (\ a : B . a))))
((try (if (try c with c) then (if false then error else a) else (if c then error else false)) with (if b then (try false with c) else b)) (\ c : (B -> B) . (if b then (try b with a) else c)))
(if (if (try (if error then (\ a : A . false) else (try false with false)) with (\ b : (C -> Bool) . (if false then c else b))) then (if (if (error b) then b else true) then (if true then b else false) else (b a)) else (if (if true then a else c) then (\ d : (A -> C) . true) else (if b then (a c) else c))) then ((\ c : (Bool -> Top) . true) (try false with true)) else (\ b : ((C -> A) -> (B -> B)) . (true false)))
(\ c : (((Top -> A) -> (Top -> C)) -> ((Top -> A) -> ((Top -> Bot) -> (B -> Bool)))) . (if (try ((\ a : C . error) (try error with c)) with (\ a : Bot . true)) then (\ e : (B -> (Bool -> Bot)) . (if c then c else c)) else (if (if false then error else (try error with c)) then (\ d : Top . b) else (if (c a) then c else (if a then b else b)))))
((\ e : ((A -> Bot) -> (A -> Top)) . (if ((if c then b else a) (false true)) then (\ e : C . c) else (if false then true else c))) (try ((\ e : Top . b) (try true with b)) with (try b with (if a then a else c))))
(if (try (\ b : ((B -> Bool) -> A) . ((try c with a) (\ c : C . c))) with (try true with (if error then c else a))) then (try (\ d : A . b) with (if c then a else a)) else (if (try ((false error) error) with (a error)) then ((\ b : B . b) true) else (\ a : C . a)))
(try ((if false then true else c) (try true with b)) with (\ c : (A -> Bot) . ((\ a : Bool . c) (\ e : Bot . b))))
(((\ b : (B -> A) . c) (if c then true else c)) (if (if (try error with true) then error else c) then (if a then true else true) else (false true)))
(try (if (\ e : (Top -> Bool) . (b error)) then (try a with error) else (\ d : C . a)) with (try (try (\ b : (Top -> Bool) . false) with (try false with b)) with (if (\ e : B . c) then (true a) else (if false then false else true))))
((if (\ a : (A -> A) . b) then (if true then true else b) else (\ e : A . a)) (try ((b true) (try a with false)) with (false false)))
(if (\ e : (C -> A) . (\ e : (B -> C) . a)) then (try ((\ a : C . a) (try (b a) with (try false with false))) with (if (error false) then error else (try c with b))) else ((if c then false else c) (if (error error) then (c c) else b)))
(if (\ c : (Bool -> Top) . (if (\ b : B . false) then (\ c : Bot . b) else (b a))) then (\ e : ((B -> Top) -> (Top -> Bool)) . (\ a : Top . (if a then a else c))) else (if (try (try false with c) with a) then (true false) else (try (if c then b else a) with (\ d : Bool . error))))
((if (\ b : Top . a) then (try c with false) else (\ e : Top . true)) (if (try a with true) then (\ d : ((Bool -> A) -> Top) . ((\ b : C . b) error)) else (if (\ e : (B -> Bot) . true) then (\ c : B . a) else (if true then true else a))))
(if ((if true then true else true) (c (try true with error))) then (if (b b) then (error true) else (\ d : (Top -> Top) . (\ b : Bool . error))) else ((\ d : C . true) (if error then true else false)))
((try (if (try a with c) then (\ c : B . (if c then c else c)) else ((error error) (a true))) with (if b then (\ c : Top . c) else (error a))) ((try (true a) with c) (try true with (try b with b))))
((try (b (\ b : Top . b)) with (\ d : ((A -> Bool) -> (A -> A)) . (\ e : Bool . true))) (if (try c with true) then (\ a : Top . true) else (if b then b else b)))
(try ((\ a : C . (if false then b else error)) (\ e : ((A -> B) -> Bool) . (try c with error))) with (\ d : ((Bot -> (A -> Top)) -> ((C -> A) -> (C -> A))) . (if (c a) then (try true with a) else (try (\ d : Top . error) with (false b)))))
((try ((try c with false) false) with ((if error then true else b) (error b))) (if ((try error with error) c) then (\ b : (A -> C) . a) else (if false then (\ b : Bool . a) else a)))
((if (c a) then (\ d : Bool . false) else (a c)) (try (\ d : (C -> B) . a) with (c false)))
(\ b : ((Top -> (A -> A)) -> (B -> C)) . (\ e : (Top -> C) . (\ a : B . a)))
((if (if (if b then true else error) then (b b) else a) then (if b then b else b) else (try error with a)) (if ((a (b c)) (try true with b)) then ((try c with error) (if (try true with true) then (\ d : Bot . b) else false)) else ((try (if true then b else true) with a) (\ a : A . c))))
((\ a : (A -> B) . (\ a : (Bool -> A) . c)) ((if b then b else (false false)) (if (if true then a else true) then (\ a : Top . a) else (try b with c))))
(\ d : ((Bool -> Bool) -> (Bool -> Bot)) . (try (try (\ e : Bool . c) with (if (try false with a) then (try error with false) else (try true with a))) with (if true then error else false)))
(((a error) (\ c : Top . true)) (try (if error then b else (try b with a)) with (true true)))
((if (if false then false else a) then (try (\ e : Bot . a) with error) else (if b then (\ e : C . false) else c)) (try (\ b : B . c) with (error a)))
(\ d : ((Top -> Bool) -> (Bool -> Bot)) . ((try (\ b : B . error) with a) (try (try true with error) with false)))
(try (try (\ c : (Bot -> Top) . (true a)) with (if (a true) then ((if true then error else c) (try c with b)) else (try (false true) with (if false then c else c)))) with ((\ e : ((C -> A) -> A) . (try (\ a : A . c) with c)) (if b then c else (b false))))
(if (try (if (false (if error then error else a)) then (try c with true) else (try false with true)) with (\ a : (C -> Bool) . b)) then (\ e : ((Bot -> Bot) -> (A -> Bool)) . (b (if a then error else true))) else (\ b : ((B -> Top) -> (B -> Top)) . (\ e : (B -> A) . (if error then (true error) else false))))
((\ c : ((B -> C) -> (Top -> Top)) . ((true false) (a c))) (try (if (if c then c else error) then (if a then a else false) else (\ c : B . error)) with (a false)))
(\ d : ((((B -> A) -> Bool) -> ((Bool -> Top) -> Bool)) -> (B -> (Top -> C))) . (if (try error with true) then (\ b : Top . true) else (\ d : (Bot -> C) . a)))
(((try (if error then (if error then b else error) else true) with (false a)) (try (true c) with (if b then b else (if error then true else b)))) (if (\ a : C . (try true with false)) then (if false then (try error with true) else false) else ((try b with (if a then c else false)) (try true with a))))
((\ e : (Bot -> (Bot -> B)) . (try (try a with a) with (true error))) (\ d : ((A -> (Bot -> C)) -> (A -> Bool)) . (\ a : (Bool -> A) . (try b with false))))
((try ((false true) (\ e : (C -> B) . (if a then b else a))) with (try (try c with a) with true)) (try (\ e : A . (\ d : B . a)) with (\ e : ((B -> Bot) -> (Bot -> Bool)) . (try a with a))))
(if (try (\ b : A . b) with ((false false) true)) then (if (try true with error) then ((if c then b else error) (if b then a else error)) else (\ a : ((Top -> A) -> (Bot -> C)) . (error (error c)))) else (\ a : ((B -> (Bot -> Top)) -> (B -> (Bool -> Bot))) . (try (try (if true then b else error) with (try false with error)) with (\ c : C . false))))
((if (\ a : (A -> Top) . (try error with false)) then (try (try a with true) with (try false with false)) else (try (try b with error) with (false false))) (try (if true then (\ d : Top . c) else c) with (if (\ e : Top . error) then (if (if error then false else true) then (\ c : Top . error) else (false false)) else (\ e : B . b))))
(\ c : (((Top -> B) -> (Top -> B)) -> ((Top -> (Bool -> Bool)) -> (A -> (Top -> Bot)))) . (if ((try b with error) (a true)) then (try error with false) else (\ d : B . true)))
(try (try ((\ d : A . c) (try true with true)) with (try (\ c : B . error) with (try (if false then error else b) with (try a with true)))) with (if (try (a c) with (try a with b)) then (if c then (true false) else (try false with b)) else (\ a : (C -> B) . (\ c : C . true))))
(\ b : (((B -> Bool) -> A) -> (Top -> C)) . (if (try (\ b : Bot . true) with (if c then a else b)) then (\ d : A . false) else (if (a b) then (false c) else c)))
(if (try (\ d : Bot . c) with (if (\ a : C . c) then (\ a : Bot . false) else (try b with false))) then (\ b : ((C -> A) -> (C -> Bot)) . (try c with false)) else (\ e : ((B -> Bot) -> (C -> B)) . (\ b : A . (try a with error))))
(\ d : (((Top -> (Top -> A)) -> (Bool -> A)) -> ((A -> B) -> (Bool -> Bot))) . (if (\ d : (Bool -> A) . b) then (try (try true with true) with (b c)) else (if (try b with error) then (\ a : (B -> Top) . a) else (a true))))
(if (if (\ d : Top . false) then (try (if false then false else true) with false) else (if false then c else a)) then (try (try (if (try false with false) then (if a then error else b) else (if b then error else a)) with (false (if true then false else false))) with (try a with (if b then true else false))) else ((true a) (a error)))
(if (try (a b) with (\ e : B . error)) then (if (c (\ c : Bot . true)) then (try true with true) else (error b)) else (\ b : (Bot -> A) . (if c then c else b)))
(try ((if true then (c c) else (if b then c else true)) ((a true) (try a with error))) with (try (error a) with (if false then a else c)))
(\ c : ((((C -> C) -> Bot) -> (Bot -> Top)) -> ((Bool -> Bool) -> (A -> Bot))) . ((try (if error then a else a) with a) ((\ d : B . a) (try true with a))))
(if ((\ d : (A -> (Top -> B)) . (try true with false)) (\ e : (B -> Bot) . true)) then (if (if (c a) then (\ d : Bool . a) else (try b with b)) then ((c error) (try b with error)) else (\ e : (A -> A) . (\ b : C . b))) else (if ((if c then true else a) (if c then c else true)) then (if (\ e : A . false) then false else error) else (\ b : ((Bool -> A) -> (Bool -> C)) . (try (if error then c else a) with (try true with error)))))
((try (\ a : (Bool -> Bool) . a) with ((try a with a) (if false then error else true))) ((if true then (if true then false else c) else (try false with error)) (try (try error with c) with (try false with false))))
((try ((b false) (\ c : C . error)) with (a error)) (\ d : ((Bool -> C) -> ((Bool -> C) -> (A -> B))) . (false a)))
(if (\ e : ((B -> C) -> C) . (a true)) then (try (if c then (if c then false else a) else (try c with false)) with (\ e : B . true)) else (try (try (b false) with (try true with (if error then b else error))) with (try c with b)))
(try ((try b with a) (error c)) with (if (\ c : (C -> Bool) . (try c with c)) then (try (false error) with (c error)) else (\ d : Bool . b)))
(try (try (if (try a with c) then (\ a : Bool . true) else a) with (if ((if error then false else a) a) then (a error) else (try false with error))) with ((if (\ a : (Top -> Bool) . (try false with error)) then (try c with false) else ((a error) (\ c : Bool . b))) (a (try c with false))))
(\ a : ((((C -> Bool) -> (Top -> Bool)) -> (C -> (B -> B))) -> (Bool -> Bot)) . (\ d : ((C -> A) -> A) . (if true then true else (try b with false))))
(if (\ e : (A -> (Top -> C)) . (try error with (if error then a else true))) then (try (if true then false else a) with (b true)) else (if (false error) then (try false with error) else (try error with true)))
((try ((try true with b) (\ c : Bool . (\ b : Bot . c))) with (if ((if true then a else error) (\ c : C . a)) then (try a with error) else (try (c error) with true))) ((\ d : (C -> B) . error) (b true)))
(if (if (try error with (\ a : Bool . false)) then (try (try error with true) with c) else (if (\ d : B . c) then (if false then (\ b : C . a) else a) else (if true then false else a))) then ((try (try error with false) with true) (if (if true then false else c) then (if b then false else true) else b)) else (if (c (if true then true else c)) then (try (try error with true) with (\ c : (Top -> Bool) . b)) else (try (c false) with (false false))))
(\ e : ((Bot -> A) -> (Top -> (Bool -> Bool))) . (try ((if false then a else b) (\ c : A . false)) with (try (true true) with false)))
((if (\ c : A . b) then (a error) else (if (try false with true) then (if error then b else false) else c)) (\ e : (C -> Bool) . (try error with true)))
(try ((try b with error) (if b then (true a) else error)) with (try ((\ e : Top . error) (\ b : Top . a)) with (try b with false)))
(\ d : (((A -> (A -> Top)) -> ((C -> Bot) -> Top)) -> ((A -> Top) -> (Bot -> B))) . (if (try b with true) then (if a then error else true) else (if error then true else a)))
(try (if (if (try a with true) then ((\ c : C . b) error) else (if error then error else true)) then ((\ b : Top . error) c) else (try (true true) with error)) with (try (if (\ a : C . true) then (\ d : Top . c) else (if c then error else (c error))) with (\ e : (Bool -> Top) . false)))
(if (\ a : (((A -> A) -> B) -> (A -> Top)) . (if (try c with true) then c else (try true with error))) then ((if a then b else c) (try (false b) with true)) else ((try b with c) (\ a : (Bool -> Bool) . error)))
((if (\ a : C . (error a)) then (c b) else (if (if false then b else b) then (\ c : Top . error) else true)) (\ c : ((C -> Bot) -> ((Bot -> Bot) -> (C -> Top))) . (if (try false with c) then error else true)))
(try (try (try true with a) with (\ d : A . false)) with (try (b a) with (try (if error then b else error) with (\ b : B . c))))
(if (try ((\ b : A . c) (try true with false)) with (\ a : (B -> C) . (\ a : C . c))) then (if ((if b then b else true) b) then ((try false with false) (try a with b)) else (\ b : Bot . (try error with false))) else (\ e : ((Bot -> A) -> (A -> A)) . (\ e : ((A -> Bool) -> C) . ((a b) (b b)))))
((try (if error then (if b then false else true) else (\ d : Bool . true)) with (if (try c with b) then (if false then c else b) else (\ e : A . true))) (if (try error with a) then (\ c : Bot . (try error with error)) else ((try a with (try false with false)) (if (true false) then b else (try c with true)))))
(\ b : ((Bool -> C) -> ((C -> B) -> (A -> C))) . (try (\ a : B . a) with (if (if false then a else error) then c else (try error with true))))
(((\ b : C . c) (if (try (\ c : Bool . a) with true) then (\ e : A . false) else (if a then error else b))) (\ d : (C -> Bool) . ((\ c : Bot . c) c)))
(try ((if (\ a : B . error) then (if true then error else false) else true) (if error then c else true)) with (if (\ e : (Bot -> Top) . (try b with b)) then (if (try (try false with a) with error) then (\ e : B . true) else (if (a b) then (if true then b else false) else (\ c : B . c))) else (\ d : (B -> A) . true)))
(try ((if (c false) then (\ c : B . error) else (try false with false)) ((if b then true else error) (if true then b else a))) with ((\ b : A . (try false with false)) (try c with (true error))))
((if (try false with a) then (\ b : (Top -> Top) . b) else ((if b then true else a) true)) ((if (\ c : Bool . error) then (try error with a) else (if false then b else false)) (if (try true with false) then (if (a c) then false else (if b then a else error)) else (c error))))
(((\ c : Top . c) (if false then true else false)) (try (if b then b else c) with ((try c with c) a)))
(try (\ e : (A -> Top) . (error true)) with ((if (\ d : B . false) then (if (\ e : C . c) then a else false) else (\ c : C . (if error then true else b))) (\ c : (C -> B) . (if a then a else true))))
(\ a : ((((B -> Bot) -> (B -> A)) -> (Bot -> B)) -> ((Bot -> Top) -> B)) . (try (c false) with (if error then b else true)))
((try (try (try true with (if error then a else true)) with (try false with c)) with (a (try error with false))) (try (if (true c) then (\ b : Bool . (try error with error)) else (a a)) with (if (true true) then (false a) else b)))
(try ((try (try true with false) with (if c then error else b)) (c false)) with (if (try (try (\ a : Bot . false) with c) with (error true)) then (if (try b with error) then (if (\ a : Bot . false) then false else (\ a : Bot . c)) else (error c)) else (try (try a with true) with (\ a : (C -> C) . (\ d : Bool . b)))))
((try (try c with (if true then true else c)) with (if b then error else a)) (\ c : ((Bool -> A) -> (Top -> B)) . (if error then (\ c : C . error) else (\ d : B . c))))
((try (\ c : Bot . b) with (\ b : Bool . (error a))) (try (\ a : (C -> C) . (false (if error then a else b))) with (\ b : Bool . (if a then false else a))))
(try (if (c (a a)) then (try true with (\ a : Top . b)) else (\ a : (C -> Top) . (try (if false then true else b) with (\ e : C . a)))) with ((if c then c else error) ((if a then true else false) (if false then b else false))))
(try (if (b (try c with error)) then (if (\ e : C . c) then (\ a : Bool . true) else (try b with b)) else (try c with a)) with (if (if c then error else b) then (try true with c) else (true false)))
((try ((\ a : Top . c) (if error then false else true)) with ((try true with error) error)) ((try true with false) (\ d : Bool . (if b then error else c))))
(if (try (if false then (try error with b) else b) with (try error with b)) then (\ c : (Top -> A) . (if c then c else true)) else (if (if (if (\ c : B . b) then (c a) else (b b)) then (if a then true else b) else (\ c : C . (\ a : Bot . false))) then (if (try (if false then c else b) with (a true)) then (try (\ d : Bool . false) with (\ c : Bot . error)) else (if error then (\ d : Bool . c) else false)) else (\ b : Bot . c)))
((try (false a) with ((if a then b else true) (error false))) (\ c : (C -> A) . (\ e : (A -> B) . (if a then a else error))))
(try (if (try (try true with b) with (try a with b)) then ((if (if b then true else error) then (false a) else c) (try c with a)) else (try (\ a : Bool . b) with (try a with a))) with (if (try (try a with true) with true) then (if (\ a : Bool . a) then (try error with true) else (\ e : C . c)) else (if (try c with a) then false else false)))
((\ d : ((B -> C) -> (Top -> B)) . (try (\ a : B . true) with (a false))) (try (\ e : Bool . true) with (\ b : (Bot -> Top) . c)))
(try (\ c : ((A -> Top) -> C) . ((try (if a then error else a) with b) (try a with b))) with (if (\ a : (A -> Bool) . (try a with (a true))) then (if (\ e : Bool . (\ d : A . false)) then (if a then false else a) else (true b)) else (\ d : (Bool -> Bot) . (try c with true))))
(if (try (try c with false) with (\ c : (Top -> Bot) . a)) then ((try (if error then true else c) with (error c)) (\ e : (B -> Bot) . true)) else ((try (\ b : Top . b) with (error a)) (try (try c with a) with (try a with a))))
(if ((try (\ c : Bot . true) with (try a with c)) (c (try b with c))) then ((try (if a then (if false then error else c) else false) with (try (if false then b else true) with error)) (if (\ c : (Top -> Top) . true) then (try false with a) else (b false))) else (\ b : (C -> (B -> C)) . (\ e : (Bot -> Bool) . (try true with b))))
(try (try (c true) with (\ b : Bot . a)) with (if (try (try true with true) with true) then (try b with true) else (if (try a with error) then (\ e : C . c) else error)))
((\ d : ((Bool -> (Top -> B)) -> (Top -> Bot)) . (error (a true))) ((if (if c then (try a with true) else (try false with a)) then (try (if error then b else c) with false) else (\ a : A . (\ d : Top . c))) (try (if error then true else false) with (\ b : Top . b))))
(\ b : ((Top -> (Bool -> C)) -> ((Bool -> Top) -> (Bool -> Bool))) . (\ b : ((C -> Bot) -> A) . (try (\ e : C . a) with (error false))))
(try (\ d : (Bot -> Top) . (if (false a) then (\ a : C . (a b)) else (if b then error else true))) with (\ a : ((Bot -> A) -> (C -> Bool)) . (error (try c with c))))
(((try (false c) with (if b then true else true)) ((\ e : B . (true error)) (\ e : A . a))) (\ a : ((Top -> (C -> Bot)) -> (Bot -> Top)) . (if (try true with b) then (if b then b else c) else (try true with false))))
(if (if (\ d : (Bool -> Bot) . b) then (\ e : (Bot -> A) . false) else (\ d : (Top -> Top) . b)) then (if (\ c : B . (b error)) then (try error with (if c then error else a)) else (\ a : (B -> Bot) . (\ b : C . (\ d : A . true)))) else (((\ d : B . error) (if c then a else true)) (if b then c else c)))
(\ e : (((Top -> Bot) -> ((A -> B) -> A)) -> ((Bot -> Bot) -> (Bool -> A))) . (if (if true then a else c) then (\ c : (B -> Bool) . (try false with c)) else (try (if true then false else c) with (\ b : B . a))))
((\ e : ((C -> Bot) -> A) . (try a with (if error then a else true))) (\ e : (A -> C) . (c b)))
((if (try error with (try false with error)) then (if (try c with true) then c else (\ c : Top . b)) else (\ e : (Bot -> Top) . (if a then a else false))) (if ((if (if b then error else error) then true else (\ a : Top . error)) (a (\ a : Bool . false))) then ((b error) (false a)) else (if (a false) then (\ d : C . false) else b)))
((if (if (\ c : A . c) then (if c then false else error) else (false (try c with false))) then ((if true then false else a) (\ c : B . c)) else (\ b : (B -> Bot) . (if (if error then a else b) then error else (if a then c else error)))) (((\ d : C . a) true) (\ c : (Bool -> A) . a)))
(if (if (\ e : A . (if c then c else c)) then (try error with true) else (\ c : C . (false b))) then (if (try (\ d : B . b) with (\ b : Top . c)) then (if (error true) then error else c) else (try (a false) with (c true))) else ((true b) (try (false false) with (try true with true))))
(\ e : ((((A -> Bool) -> Bool) -> (Bot -> B)) -> ((C -> (C -> A)) -> (Bot -> Top))) . (try (\ c : (B -> Bool) . (\ c : Bot . a)) with (\ a : (A -> A) . (try (try true with b) with a))))
(if (if (try true with a) then (try (if error then b else c) with (\ e : B . b)) else (if (a true) then false else true)) then (if (b a) then (b error) else (\ b : B . a)) else (if (if (try true with false) then (if true then b else true) else (if true then false else (if true then b else b))) then (\ b : (Bool -> Bool) . (if c then (try false with a) else (if b then c else error))) else (\ e : (B -> Top) . ((error error) a))))
(\ c : (((Top -> Top) -> (Bool -> Bot)) -> ((A -> (B -> Bot)) -> (B -> Bot))) . (if (if a then true else (error b)) then (try false with true) else (try a with true)))
((if (try (if false then b else error) with true) then (b (c c)) else (if false then true else c)) (if (try false with c) then (if (true (try a with false)) then (try error with true) else (\ d : Top . false)) else ((\ d : (Top -> B) . (try b with a)) (try error with a))))
(if ((\ c : (Bot -> Bot) . error) (if (\ b : B . true) then (try false with b) else a)) then (if (try (error a) with (if a then false else true)) then (try (if b then error else (try b with error)) with (if (if false then c else b) then false else error)) else (try (try a with false) with true)) else ((\ c : A . a) (\ d : A . (if b then a else false))))
((if (\ d : (Top -> Top) . (if b then a else b)) then (\ c : (Bot -> Bot) . (if error then true else c)) else (\ e : C . (a b))) (\ e : (((Bot -> A) -> (A -> Bot)) -> (C -> (Bot -> A))) . (try (try b with false) with (\ c : Bool . b))))
(try (try (error false) with (if false then false else c)) with (if (if true then a else error) then (try false with true) else (try a with true)))
(\ a : (((C -> Bot) -> ((A -> Bot) -> (C -> Bot))) -> ((C -> Top) -> ((Bot -> C) -> (B -> Top)))) . (if ((\ e : Top . c) (false a)) then (\ d : C . b) else (if c then b else true)))
(\ e : (((B -> Bool) -> (Bool -> Bot)) -> (Bot -> A)) . (try (if c then (try c with false) else c) with (try b with b)))
(\ e : (((Top -> Bot) -> (Top -> Bot)) -> (C -> Bool)) . (try (\ c : (A -> A) . (if b then c else c)) with (if (false false) then c else c)))
(\ d : (((Bool -> Bot) -> Bot) -> ((Bool -> (Bot -> C)) -> (B -> Bool))) . (try (try c with a) with (try a with a)))
(\ c : ((((Top -> A) -> (Top -> Bot)) -> (Top -> C)) -> ((A -> B) -> ((B -> Bot) -> Top))) . ((try b with true) (\ a : Bool . true)))
((if (try a with false) then (try a with (true error)) else (c a)) ((if (try (if true then c else true) with c) then (c b) else (try error with c)) (try a with false)))
(\ d : (((Bot -> A) -> (Bool -> Top)) -> (((B -> C) -> (C -> Bot)) -> ((B -> Bot) -> Top))) . (\ d : (Bool -> (Top -> A)) . (\ d : (Bool -> C) . error)))
((if (try (try error with error) with (\ e : Top . c)) then (\ e : (C -> C) . (try (\ c : C . true) with b)) else ((\ e : B . true) (if c then c else a))) ((\ e : (Bool -> A) . (if false then c else error)) (try true with error)))
(if (\ d : (B -> Bot) . (\ b : Top . c)) then (if (try error with true) then (try false with true) else (c a)) else ((if (try a with a) then (\ a : Top . error) else b) (\ e : Bool . b)))
(((try (try a with b) with (try (error a) with true)) ((c b) (try (\ e : Bool . a) with a))) (\ c : (((Top -> A) -> C) -> ((Bot -> B) -> (Bool -> C))) . (if (\ d : A . error) then (\ a : Bool . false) else ((if b then c else error) true))))
(\ c : ((B -> A) -> ((Top -> Top) -> ((B -> C) -> Bool))) . ((try (if true then a else a) with (try error with false)) (if true then true else true)))
(\ c : ((Top -> Top) -> (Top -> Top)) . ((try (try a with true) with b) (if (try c with c) then (if (try c with c) then b else (try c with a)) else ((a false) false))))
(if (\ e : (Top -> (B -> Top)) . ((try a with b) a)) then (\ b : (Top -> B) . ((if false then error else false) false)) else (\ a : ((Bool -> Bot) -> C) . (\ e : C . (\ c : Bot . c))))
((try (try (try true with c) with (if a then error else c)) with (\ b : A . a)) (try (c c) with (try (\ a : C . c) with (try c with true))))
(if (try (try error with b) with (\ b : Top . c)) then (if (if false then (false false) else c) then (\ c : (B -> B) . (\ b : (B -> B) . (if false then a else a))) else (try (try a with (try error with error)) with (c (\ c : C . c)))) else (if (if false then true else error) then (\ d : Bot . false) else (\ e : Bot . error)))
(if (try ((\ a : (Bot -> C) . (\ d : A . b)) (try error with true)) with ((\ d : A . true) b)) then (\ e : (A -> (C -> A)) . (\ e : ((C -> Top) -> B) . (if c then (try false with a) else (b error)))) else (\ a : (((A -> C) -> (B -> A)) -> (Top -> Bot)) . (try true with (\ c : Bool . b))))
(if (if (\ e : (Top -> Bot) . false) then ((\ c : Bot . true) (c false)) else (b c)) then ((try (c true) with c) (\ b : Bot . (if c then c else b))) else (if ((b (if b then a else b)) (try c with error)) then ((if c then true else c) b) else (\ a : (A -> Bot) . (try a with a))))
(try ((error a) (true error)) with (try (\ b : ((A -> A) -> (Bot -> B)) . (try (false b) with (try error with true))) with (\ c : Bool . (a false))))
(if ((if (try (try c with error) with (if false then a else true)) then (error (\ c : B . a)) else (try (\ a : Bool . c) with (try c with error))) ((c a) b)) then (if (if (false a) then (try (if b then false else error) with false) else (try (try false with b) with (\ c : B . false))) then (\ b : (Bool -> Top) . ((try a with c) (try false with error))) else (\ d : (C -> C) . c)) else ((if a then b else (false b)) (try c with true)))
(try (try (if (false (try a with false)) then (\ c : A . true) else (try b with (if a then a else error))) with (\ d : (C -> Top) . (try c with a))) with (if (\ e : Top . b) then (if c then false else error) else (\ a : Top . error)))
(\ e : ((Top -> (Bot -> Top)) -> ((Top -> B) -> Top)) . (try ((\ e : A . true) (if a then c else true)) with ((try b with error) (try (if true then a else false) with c))))
(try (if (if error then error else c) then (if a then c else a) else (try c with c)) with (if (if (if (\ c : Bot . error) then (try false with b) else b) then (try true with true) else (\ e : (Bool -> Top) . (if a then c else b))) then (try (\ c : Bool . b) with c) else (try error with (try c with b))))
(\ a : ((((Bool -> C) -> (B -> Bot)) -> (Bool -> C)) -> ((B -> Bool) -> (Top -> Bool))) . (try (try (try false with error) with (a false)) with ((try (if false then c else a) with true) (try false with (\ e : B . c)))))
(if (((if true then error else c) (if a then error else b)) (\ c : Bot . b)) then (if (error (b a)) then (\ a : C . b) else (\ d : C . error)) else (\ a : (Bot -> A) . (try (a error) with (if true then b else b))))
(if (try (try (false b) with (if (try error with false) then b else (true c))) with (\ a : (Bool -> Top) . ((if c then false else a) a))) then (if (try (\ b : Bot . (\ e : Bot . true)) with (try c with (\ c : Top . error))) then (\ c : (B -> B) . (if c then (try false with c) else b)) else (\ b : (Bool -> C) . (if false then false else error))) else (if (c (\ a : Bot . a)) then (try true with b) else (c a)))
(try (\ c : (A -> C) . (if c then b else false)) with (if (b false) then (c (b error)) else (\ a : (Bool -> Bool) . false)))
(try ((try (if b then true else c) with b) (\ d : (A -> B) . b)) with (if (if true then true else (\ d : Top . true)) then (\ c : (A -> Bot) . (error error)) else (\ b : (Top -> B) . (try b with b))))
((try (\ c : A . c) with (error (\ d : A . b))) (\ d : ((B -> B) -> (C -> C)) . (if (error b) then false else (c c))))
(\ e : (((Bot -> Bot) -> Bool) -> ((C -> Top) -> Top)) . (if (try error with c) then (if a then (try c with a) else (\ a : Bool . a)) else (try (if c then a else true) with c)))
(try (\ a : (Bool -> B) . (if error then (b c) else (\ c : Top . false))) with (if (\ c : (Top -> C) . (\ c : B . (try c with true))) then (try (if b then b else true) with (try c with (try b with false))) else (try a with (true b))))
(if (if (try (c false) with a) then (try (if a then true else b) with true) else (\ b : (C -> Top) . ((if false then b else c) error))) then (\ d : ((B -> B) -> A) . ((\ e : (A -> C) . b) (\ a : C . error))) else (try (try (try false with b) with (a (\ d : C . b))) with (try b with (\ d : C . a))))
(try (if (true c) then ((a a) true) else (c a)) with (if (\ c : (C -> Top) . (try (if c then true else b) with a)) then (if (false c) then b else (error false)) else (\ e : Top . b)))
(try ((if false then error else (error b)) (if (error true) then b else (\ e : Bot . false))) with (try (\ c : Top . true) with (c true)))
(((try (c true) with (try error with true)) (\ b : (B -> Bot) . b)) (\ b : (B -> (Top -> C)) . (\ b : (Top -> B) . error)))
(if (if (if error then c else error) then (\ c : A . true) else (\ d : C . error)) then (if (try error with a) then (\ e : A . (a c)) else (if true then false else error)) else (if (if error then (false b) else (true b)) then ((try error with error) b) else (if (c c) then (c error) else error)))
((\ e : (C -> (Bot -> C)) . (try c with a)) (try (\ a : Top . b) with (try error with error)))
(\ c : ((Bool -> B) -> (C -> Bot)) . (\ d : ((A -> B) -> (Bool -> Top)) . (if (try error with error) then (if (try false with b) then (if error then a else error) else c) else (try c with a))))
(try (((try error with b) false) ((if a then (try b with a) else (a b)) (\ a : Bool . false))) with (\ a : (Top -> B) . ((try c with b) (try a with false))))
(\ d : (((C -> B) -> A) -> (Bool -> C)) . (\ b : (Top -> C) . (try error with (if error then true else error))))
(if ((if a then a else error) (\ a : Bot . a)) then (\ e : (A -> Bool) . (if false then true else b)) else (if (\ a : B . c) then (\ c : Top . a) else (b true)))
(try (\ a : ((C -> B) -> C) . (a true)) with (\ e : ((Top -> Bot) -> ((Top -> B) -> (A -> Bot))) . (try (c error) with (if b then c else (try false with b)))))
(\ b : (((A -> B) -> Bot) -> (((Bot -> Bool) -> (Top -> Bool)) -> (A -> A))) . (try (if (try b with error) then (if error then a else false) else (try c with a)) with (if (b a) then (try error with a) else (if b then (\ d : Top . false) else (if a then false else false)))))
(if (try (if true then a else c) with (try (if error then a else c) with (try c with c))) then (try ((true false) (\ d : Top . a)) with (\ e : (B -> Bot) . (a error))) else (if (\ b : Bot . (if c then a else c)) then ((if true then false else b) (c b)) else (try (if b then a else error) with (if error then b else false))))
(if (try ((if (\ e : B . b) then (c error) else b) (try (if c then c else true) with c)) with (true b)) then (\ a : (Bool -> B) . ((\ c : Bool . c) (\ c : C . b))) else (if (try (if c then b else true) with (c a)) then (try false with (if c then true else false)) else (\ d : (Top -> Bot) . (b false))))
(if (if (if false then c else (\ c : Bot . error)) then (try (a error) with (error b)) else (\ c : Top . (b a))) then ((\ d : A . c) (try (if false then false else c) with b)) else (try (try (\ b : Bot . true) with false) with ((\ c : B . a) error)))
(if (if (\ c : (B -> Bot) . (\ a : B . a)) then (try false with c) else (try a with c)) then (\ d : ((A -> (C -> A)) -> (Top -> Bool)) . (if (if error then true else a) then (if false then error else true) else (\ b : (Bool -> B) . b))) else (try (\ c : (A -> B) . b) with (a true)))
(try (\ b : (A -> B) . (if ((\ b : Bool . error) (if false then error else b)) then (try false with c) else (try (try a with b) with (c a)))) with (if (\ e : (A -> C) . (\ d : Bool . a)) then (false b) else (try error with true)))
(if (if (if a then true else b) then (try error with a) else (false true)) then ((try c with (\ a : Bot . true)) (try (try true with b) with (if b then a else false))) else ((try (\ a : Bot . error) with (try c with (\ d : Bool . b))) (try b with (try true with b))))
((try (try b with false) with (\ e : C . (\ b : C . error))) (try (true c) with (try (error a) with c)))
(\ c : (((C -> A) -> B) -> ((A -> A) -> (A -> Top))) . (try (error a) with (try (try true with b) with true)))
(try (if (\ d : ((Top -> Top) -> (C -> Top)) . (try b with c)) then ((if b then b else b) ((try true with false) (\ e : Top . true))) else (true a)) with (try (\ c : (Bot -> A) . (if (\ c : C . true) then (b error) else (error true))) with ((error false) (if true then false else error))))
((\ c : ((Bool -> A) -> (A -> Bool)) . ((try a with false) (a false))) (try (error (try b with a)) with (try c with (false true))))
(try (try (\ b : (Top -> Top) . (try a with b)) with (false b)) with ((\ c : (A -> Bool) . (if false then (try true with false) else b)) ((try true with c) (try false with b))))
(if (try (try c with false) with (if false then c else error)) then ((if false then (c error) else a) ((\ b : Top . a) (\ c : (C -> C) . (try a with c)))) else (if (\ e : Top . (if false then false else false)) then (try (\ c : (Top -> Bool) . (if a then error else b)) with (try error with false)) else (\ d : (B -> Bot) . (try error with b))))
(try ((if false then (try b with b) else error) (if a then true else b)) with ((try (if b then a else true) with a) (\ e : (Bool -> Bool) . (c true))))
(if (\ a : (((A -> B) -> (A -> B)) -> (C -> Bool)) . (if (try c with b) then (\ e : Bot . false) else false)) then ((if (if (try false with b) then (if true then b else c) else true) then (\ d : (Bool -> Bot) . true) else (\ e : (Bool -> B) . true)) (try (false false) with (error false))) else ((if (if error then true else false) then (\ d : A . a) else true) (false b)))
(\ d : (((Bool -> C) -> Top) -> (B -> Bot)) . ((if c then (\ a : Top . a) else b) (if c then (try a with c) else (\ c : Bot . a))))
(try (\ c : (((Top -> Top) -> Top) -> ((Bot -> B) -> A)) . (try (try false with a) with (try a with b))) with (\ d : (Bot -> Top) . (try b with error)))
(try (((try b with error) a) (false (try b with false))) with (if (try (\ e : Bool . b) with (true true)) then (\ a : A . false) else ((\ b : (B -> B) . (if a then error else c)) (if (false c) then error else b))))
(((\ e : ((A -> Bool) -> (Bool -> Bool)) . (a (if false then c else true))) (if c then (if c then false else b) else (\ b : Bool . false))) ((try (try a with true) with (if error then false else true)) (c (if a then true else b))))
(try (\ a : ((C -> A) -> Bot) . (\ d : (Bool -> B) . (\ a : (B -> A) . (try c with c)))) with (\ e : ((C -> Bot) -> B) . (\ a : Bool . true)))
(\ a : ((Top -> Bool) -> (((C -> Top) -> (Bool -> A)) -> (Top -> Top))) . (try (if error then a else false) with (try c with (\ d : Top . error))))
(\ c : ((B -> Bool) -> ((Top -> Top) -> (A -> C))) . (if (\ c : C . (try error with error)) then (if false then a else (error true)) else (\ d : Bot . error)))
(\ b : ((Bool -> C) -> ((Bool -> C) -> (Top -> C))) . (\ a : (((Bot -> C) -> (C -> Bot)) -> (C -> C)) . (((\ a : C . error) (\ d : C . c)) (b c))))
(try (try (\ e : (C -> B) . (true c)) with (a c)) with (\ b : (Top -> Bool) . (a (\ b : B . a))))
(try (if (try (try c with error) with false) then (try (if b then b else error) with (\ d : Top . b)) else ((\ b : A . true) (a a))) with (try (try true with false) with (try c with b)))
(try (\ e : (B -> Bool) . (if c then true else a)) with ((false a) (if error then c else error)))
((try (try (error b) with (true true)) with ((\ b : C . error) true)) (\ a : (Top -> A) . (\ e : A . (if false then c else c))))
(if (try ((try false with false) true) with (try (false a) with (if a then true else error))) then (if (\ c : Bool . (try error with c)) then (\ a : (A -> Bot) . error) else (try (\ e : Top . c) with (if (try b with error) then (a a) else false))) else (try (\ d : (C -> C) . (if a then (a error) else error)) with (\ d : (B -> Bool) . (if c then c else a))))
(if ((try a with true) (\ c : (C -> Top) . false)) then (try (try (try c with error) with (if c then error else b)) with (\ b : (Top -> (A -> Bot)) . (error c))) else (try (if (\ e : B . b) then c else b) with ((try c with true) (if (if b then false else error) then false else (try error with true)))))
(\ c : ((Bool -> Bot) -> (A -> B)) . (if (\ e : Bot . error) then (\ b : A . error) else (b false)))
(if (\ c : ((Bot -> (C -> B)) -> ((Top -> A) -> B)) . (if (\ b : (C -> C) . a) then (try (c true) with c) else (\ e : Top . b))) then ((if (c true) then (error a) else (if c then false else false)) (if (\ e : Bool . true) then error else true)) else (if (\ c : (B -> A) . (try false with c)) then (try error with (\ a : Top . false)) else (if (try a with c) then (if b then c else false) else error)))
(if ((a (\ c : Bot . false)) (a (\ e : Bool . error))) then (if (try (b false) with (try (\ a : Bool . b) with c)) then (\ a : (A -> Bot) . true) else (try (if (c error) then (if a then c else a) else (true false)) with (true (if false then true else c)))) else (if (try (if a then b else error) with (try a with false)) then (try (false (try false with true)) with (if c then c else (try a with a))) else (try (\ e : Top . true) with (false (\ e : C . false)))))
((try (try error with error) with (if true then a else a)) ((try b with true) (if (if a then true else false) then (try a with c) else (if false then c else c))))
((if ((try b with a) (\ e : (Top -> Top) . (if false then a else false))) then (if (c true) then (try (try true with c) with (a error)) else (try b with false)) else (try (\ e : Top . false) with (c (false true)))) (\ d : (Bool -> B) . (b b)))
((\ a : ((C -> (B -> B)) -> ((Bool -> Top) -> Bool)) . (if (error a) then b else (if true then c else b))) (try ((if true then false else (c a)) (try (try true with b) with b)) with (\ d : (B -> C) . (if (if error then error else true) then (if c then false else a) else false))))
(\ c : ((B -> C) -> ((Bool -> B) -> (B -> C))) . ((if (if c then c else c) then true else (if true then b else error)) (true b)))
(try (if (try error with c) then ((if b then error else error) false) else (\ d : A . c)) with (((try true with a) c) (try (\ b : Bool . true) with (if c then error else b))))
(try (try (if (\ d : C . false) then (if a then false else c) else (\ a : (A -> Bot) . b)) with (if (try a with true) then (try false with c) else (if (false error) then true else (\ e : Bool . c)))) with (try (b false) with (try a with b)))
(\ a : ((Bool -> Bool) -> (((C -> A) -> (Bot -> A)) -> ((Bot -> B) -> A))) . ((try true with (if false then true else error)) (if (\ b : Top . b) then (if (if false then a else c) then (try b with c) else c) else (if (if b then c else a) then error else (try error with b)))))
(((c true) (true b)) (\ a : (Bot -> Bool) . (try b with (if false then error else false))))
((if (if (\ a : Top . true) then (c false) else (if c then b else false)) then (if (try true with b) then c else error) else (if (try b with (\ a : C . a)) then ((\ d : B . error) (try false with b)) else (try (try c with c) with c))) (if (try (a b) with (if c then true else a)) then (if (if error then error else c) then ((try b with b) error) else (\ e : Bool . false)) else (if (true (if c then a else c)) then (try c with b) else (if false then error else a))))
(\ a : ((Bot -> Bool) -> (B -> Bool)) . (try (if b then b else (a b)) with (a c)))
(if (if (if false then c else (try error with false)) then (if (c c) then (\ e : C . a) else false) else (try false with error)) then (try (if b then error else c) with (if error then c else c)) else (if (if (if c then false else c) then (try c with false) else (b true)) then (if a then (b false) else (try c with true)) else (\ d : (B -> A) . (\ a : Top . b))))
(if (\ b : (Top -> Top) . (if error then false else error)) then (try (try (if (\ e : C . b) then (error true) else (\ a : Bool . b)) with (if error then b else true)) with (if (if b then a else false) then (try b with false) else (try false with true))) else (\ a : ((Bool -> Top) -> Top) . ((try c with true) (try c with a))))
(\ c : (((Bot -> Bot) -> (A -> Bool)) -> ((Top -> Bot) -> C)) . (((true false) (\ e : B . a)) (\ b : (C -> Top) . (\ a : A . false))))
(if ((\ a : (B -> A) . (try error with error)) (if (\ b : Bot . true) then (\ c : A . false) else (if (\ c : Top . b) then a else a))) then ((\ d : A . b) (if true then a else a)) else ((try (\ b : Bot . a) with (\ a : B . a)) (\ c : (A -> Top) . (false error))))
(if ((false c) (if c then b else false)) then ((\ d : C . c) (\ d : C . c)) else (if (try (\ b : Bool . b) with (\ e : A . error)) then (\ a : A . error) else (\ c : (Bool -> C) . (\ c : Bot . b))))
((\ e : ((A -> A) -> (B -> Bool)) . (\ e : ((Top -> Bool) -> C) . (a a))) (\ a : ((B -> Bool) -> (Top -> C)) . (\ d : (Bool -> A) . (b true))))
(((try (\ e : B . b) with false) (if c then a else error)) (\ a : (((Bool -> Bot) -> B) -> (C -> (Top -> Top))) . (\ d : (Bot -> Top) . c)))
(if (try ((if c then a else a) (if c then error else b)) with (try (false a) with a)) then ((\ c : Bot . (\ e : Bot . false)) (if (\ b : A . b) then (if true then false else (try b with a)) else (b c))) else (if (try a with a) then (true error) else (if a then b else false)))
(((\ a : A . a) (try c with false)) (if (false b) then (if false then (false true) else c) else (if (try error with c) then b else a)))
(((\ d : (B -> Bool) . c) (if a then false else false)) (if (a (try false with a)) then (try true with error) else (if b then error else error)))
((if (if c then (\ d : Top . a) else b) then (true b) else (a (b false))) ((try (if b then error else false) with (if (false c) then (\ a : Bot . false) else a)) (\ d : (Bool -> Top) . true)))
(try (\ d : (B -> (Top -> B)) . ((if false then false else b) (b true))) with (if ((try c with true) (\ e : A . a)) then ((\ e : A . error) (try false with false)) else (try (b a) with c)))
(\ a : (((Top -> B) -> ((B -> Top) -> Top)) -> ((B -> (A -> Bool)) -> (A -> (Bot -> A)))) . (\ a : (B -> Bot) . ((\ b : Bot . error) true)))
((try (\ d : B . a) with (\ e : B . c)) (if (\ d : Bot . false) then (try true with b) else (if (c error) then false else a)))
((if (b true) then (b true) else (\ d : B . (if error then error else true))) (\ d : (Bot -> Bool) . (\ e : Bool . b)))
(\ c : (((C -> Bool) -> B) -> (Bot -> Top)) . (try (\ c : (Bool -> C) . (\ e : Bool . false)) with (if (\ d : A . a) then (try error with b) else (try a with b))))
(if (\ e : (Top -> Bool) . (\ c : (B -> Bot) . (try false with false))) then (if (\ c : C . (\ a : A . b)) then ((try b with b) false) else ((error error) a)) else (if (try (\ c : (C -> Top) . (true a)) with (try (\ c : B . true) with a)) then (if c then (if error then b else false) else (if false then a else c)) else (try (if error then b else (\ a : Top . true)) with (if true then (\ e : B . error) else (try error with error)))))
(try (\ d : (A -> B) . (if true then false else (\ d : B . error))) with (\ b : (Bot -> (Bool -> B)) . (try (if b then error else false) with (c false))))
((\ c : ((Bot -> Bot) -> ((B -> B) -> Top)) . (true error)) (if (\ c : C . (\ a : A . true)) then (try error with true) else (\ b : (B -> Bool) . c)))
(try (\ e : ((Bool -> Bool) -> (C -> Top)) . (try (error false) with (try error with a))) with (if (try c with false) then (try (a true) with error) else (if false then b else false)))
(if (\ d : ((Bot -> Bot) -> Top) . (\ e : (Top -> Bot) . (try (true true) with c))) then (if (if error then false else b) then (if a then b else c) else (try b with error)) else ((if a then error else error) (if (try a with b) then true else true)))
(\ a : ((B -> A) -> (A -> A)) . ((try (try b with c) with (\ e : Bot . true)) (try (try a with (if false then b else b)) with (b true))))
(if (if (\ e : (B -> Bot) . (if c then true else b)) then (b a) else (if error then b else false)) then (\ e : (A -> A) . (\ a : Bot . false)) else (if ((try b with c) (try c with true)) then (\ d : Bool . a) else (\ c : A . b)))
(if ((\ e : ((A -> B) -> (Top -> Bool)) . (if false then b else a)) (if b then b else (if b then false else a))) then (try ((true b) false) with (c error)) else (if (b (try error with true)) then (\ e : (A -> C) . (\ a : B . false)) else (if error then error else true)))
(try (try (\ e : C . (true error)) with (\ b : B . true)) with (try (try (if b then b else c) with (if error then error else a)) with (try (if (try true with error) then false else (\ d : A . b)) with (a error))))
(\ c : ((Bool -> Bot) -> ((A -> Top) -> Bool)) . ((\ a : C . (if error then b else a)) (\ c : (Bool -> Bot) . error)))
(((a b) (if a then (if error then error else a) else false)) (if (try (error false) with (b error)) then ((try true with b) (b a)) else (if (b c) then (if (try true with error) then (\ a : Top . a) else true) else (if c then (\ c : Top . c) else (false true)))))
(try (try (if (try b with b) then (a (try false with a)) else (if false then c else error)) with (try (c true) with (try c with (if a then true else true)))) with (try (\ a : B . c) with (\ b : C . error)))
((if (try false with (try c with a)) then (\ d : (C -> C) . (if (if false then b else error) then (try b with false) else false)) else (if error then (a true) else (try c with a))) (\ a : ((C -> (A -> Top)) -> ((B -> A) -> (Bot -> C))) . (if (if a then true else true) then (\ c : A . (if false then c else b)) else (\ e : Top . a))))
(((try c with (try true with b)) (try b with false)) ((if (if false then a else true) then (if false then error else false) else (\ d : (Top -> C) . (c error))) (if (false a) then false else b)))
(\ e : (((A -> Top) -> (Bool -> Bot)) -> (((Top -> C) -> (B -> A)) -> (Bot -> C))) . (\ b : (Bot -> A) . (\ d : Bool . (error error))))
(\ d : (((Top -> Top) -> (Bot -> Bool)) -> ((Top -> Top) -> ((Top -> A) -> (A -> Bool)))) . (\ e : (A -> (B -> B)) . (\ d : A . a)))
(((try false with b) (\ c : (Bot -> Bool) . (\ b : B . c))) ((try (if c then false else error) with (try b with b)) (if (if false then false else false) then (try false with c) else (if true then error else false))))
(\ d : ((C -> Bot) -> ((Top -> Bool) -> (Bool -> Bot))) . ((try (try false with c) with false) (\ b : C . true)))
(try ((\ a : (Bool -> Bot) . error) (try false with (try false with c))) with (if ((try false with c) (if true then error else b)) then ((if c then c else b) (if a then true else error)) else (if (try false with b) then (\ d : C . b) else (try a with error))))
(((a c) (try b with error)) (\ c : ((B -> Bool) -> (Bot -> Bot)) . (\ d : C . a)))
(try (try ((if (try a with true) then (a b) else true) ((error c) error)) with ((try a with c) (try c with a))) with ((try error with b) (try a with c)))
(try ((false a) ((\ b : Bool . a) (if error then true else a))) with (if (if c then false else true) then (\ b : Bool . (false false)) else (try (if b then b else false) with (if true then true else a))))
(\ d : (((Bot -> Bool) -> (Bool -> A)) -> (C -> (Bot -> A))) . (if (try (\ d : A . c) with a) then (true false) else (\ a : Bool . (if error then true else error))))
((((\ e : C . error) (\ b : (B -> Bool) . (c b))) (try (if false then b else a) with error)) (try (try true with a) with (if (\ e : B . error) then (if (b false) then (if a then c else error) else b) else (false false))))
((try (\ c : Bot . true) with (try false with b)) (try (try (try true with error) with (false error)) with (a b)))
(try (try ((try error with false) (if false then error else true)) with (\ a : (Bool -> (Bool -> A)) . (try (\ e : A . true) with (if true then true else a)))) with ((try (if c then c else error) with (c c)) (if (\ c : Top . c) then (if true then true else (\ d : A . error)) else (try false with (\ e : B . false)))))
(if (try ((true (if a then c else a)) (\ e : A . b)) with (try (try (try a with error) with (true a)) with (if false then c else (try b with false)))) then (try (\ e : ((Bool -> Top) -> A) . (a c)) with (if true then (try b with c) else (\ d : A . error))) else (if (try a with false) then (\ a : Top . error) else (try b with c)))
(\ c : ((Top -> C) -> (C -> Bot)) . (\ e : ((Bot -> C) -> (Bool -> Bool)) . (if b then (a c) else false)))
(try (\ e : ((Top -> Top) -> (Top -> Bot)) . (if error then (try true with a) else (try error with b))) with (try (if (true c) then (true false) else (try a with b)) with (error (b false))))
(if (if (a error) then ((error b) false) else (if (try b with false) then (c false) else (try a with a))) then (try (error b) with (try b with c)) else ((\ d : (Bool -> C) . a) (if (\ e : Top . error) then (if c then b else b) else (\ e : B . error))))
(\ b : ((Bot -> Bot) -> (A -> (A -> C))) . ((try (\ c : A . (try false with c)) with (if a then error else c)) (if (if b then error else true) then (\ b : B . error) else c)))
(try (try (try a with c) with (if c then false else (try c with error))) with (\ e : ((B -> A) -> (Top -> (Bool -> Bool))) . (try (if false then b else error) with (if a then error else true))))
(if (try (try (try c with false) with (true b)) with (try (if c then false else true) with (if c then b else c))) then ((try error with (if true then b else error)) (if (false a) then (if error then (error a) else (try c with b)) else (error a))) else (((error a) c) (if true then false else (if c then a else a))))
((try ((b true) (b true)) with (if (true b) then true else c)) (try (if (if c then c else b) then ((true c) a) else (false error)) with (if (b c) then ((try b with false) c) else (true (b error)))))
(if (\ a : ((C -> Bool) -> C) . (\ e : C . error)) then (if ((try (if c then c else b) with (try true with a)) (true error)) then (\ d : C . false) else (try (\ d : C . a) with (if (false false) then (true true) else (try error with error)))) else ((\ e : Bool . a) (error c)))
(\ b : ((((Bool -> Top) -> (Bot -> B)) -> (Bool -> A)) -> ((Bool -> C) -> (A -> C))) . ((if b then b else true) (try a with c)))
(if (if (try b with error) then (false c) else (a b)) then (\ b : (((Top -> Bool) -> Bot) -> (B -> Top)) . ((try (if error then false else c) with c) (error (try false with b)))) else (if (\ e : Top . error) then (\ c : C . (try a with b)) else (\ d : Bot . b)))
(try (try (if error then (if false then c else true) else (try c with b)) with ((if true then error else b) error)) with ((if c then true else true) ((if true then b else false) (if b then error else true))))
(\ a : ((C -> Bot) -> (Top -> A)) . (if ((if b then error else b) (if a then c else true)) then (try (b a) with (\ a : C . error)) else (try (\ d : C . true) with (\ d : (A -> Top) . true))))
((if (false c) then (if (error c) then (c c) else (\ b : Top . false)) else (error b)) (if (try (true b) with b) then (if c then b else false) else (if c then c else c)))
(try (\ b : (Top -> Top) . (if false then b else b)) with (if (a c) then (if c then true else b) else (if error then b else true)))
(\ e : ((Top -> Top) -> ((A -> C) -> ((Bot -> Bool) -> C))) . ((\ a : (B -> C) . (b c)) (\ d : Bool . error)))
(\ c : ((B -> (Top -> C)) -> (Bot -> B)) . (\ c : (A -> Top) . (try (if false then error else true) with false)))
(try (if (\ b : (Bool -> B) . (try a with error)) then ((\ d : Top . true) true) else (b c)) with (if (c (\ d : Top . false)) then (\ c : Top . error) else (false (try false with true))))
(\ b : ((A -> A) -> ((A -> C) -> ((Bool -> Top) -> Bool))) . (if (if (if false then false else a) then (try a with c) else (true false)) then (try (if false then c else true) with (if a then error else c)) else (if (\ e : Top . true) then c else (\ b : Bot . false))))
(if (try (try (\ e : Bool . false) with (if b then b else b)) with (c a)) then (if ((true true) (try error with a)) then (\ a : (A -> C) . (try a with c)) else (\ e : (B -> Top) . ((\ c : Top . false) (if true then false else a)))) else ((try (c false) with (try b with c)) (if c then false else (if true then error else error))))
(try ((\ c : Top . c) (\ a : ((B -> Bool) -> Bool) . (if a then c else a))) with ((try (\ b : Bot . c) with true) (try (if c then true else c) with (\ d : Bot . error))))
((try (\ c : Top . a) with (error error)) ((b c) (if false then c else true)))
((if (if true then true else true) then (if error then true else error) else (try error with (if c then error else true))) (if ((\ e : A . error) (try error with c)) then (try (if true then c else c) with (true a)) else (\ b : (Bool -> Bot) . (if a then b else false))))
(\ e : (((C -> B) -> Top) -> ((Bot -> A) -> Bot)) . ((try b with (if false then true else c)) (if c then true else true)))
(try (if (a (if error then true else a)) then (true true) else (error (\ d : Top . a))) with (\ a : ((Top -> A) -> ((Bool -> A) -> Top)) . (if (a c) then (try error with a) else (if (true c) then c else (try error with true)))))
(if ((a c) (\ b : Bool . false)) then (((true false) true) (\ a : (Bool -> B) . (try c with c))) else (\ a : (Top -> Top) . (try error with a)))
((\ b : ((A -> Top) -> (Bool -> B)) . (try error with true)) (\ a : (((Bool -> B) -> (A -> A)) -> ((Bot -> Bot) -> C)) . (if b then (\ a : Bot . false) else true)))
(try ((try (try (if true then false else false) with (false error)) with (try b with true)) (\ b : (Top -> Top) . b)) with ((if (try true with (\ d : Bool . error)) then (\ c : C . false) else (if false then (try error with c) else (\ b : A . a))) ((\ c : Bot . (error a)) (if false then (if a then a else error) else (if error then true else true)))))
(((true (if error then true else c)) (c c)) (\ b : (Bot -> B) . (if error then b else a)))
((\ e : ((B -> Top) -> C) . ((if b then false else c) error)) (try (try (if a then true else error) with (try error with b)) with (try false with c)))
(if (\ c : ((Top -> A) -> (Top -> Bool)) . (try (if false then c else false) with (false error))) then ((\ d : A . a) (if false then a else b)) else (if (try ((\ a : Bool . c) (b c)) with (if true then false else (error false))) then ((b error) (c (try false with true))) else (\ d : ((A -> B) -> (Bot -> A)) . (b b))))
(((\ e : Top . a) (if (if a then error else false) then (try b with b) else (false error))) (if ((try b with c) ((try c with false) b)) then (\ e : (C -> A) . (\ e : C . error)) else (if (\ c : A . a) then (if error then b else c) else (if b then true else a))))
(\ d : ((Top -> A) -> (C -> (C -> Top))) . (try (try error with b) with (if (try b with c) then (if false then false else b) else (try c with false))))
(\ d : ((Top -> Top) -> ((Bool -> A) -> (Bot -> Bot))) . ((\ b : (C -> Bot) . error) (error a)))
(try (((false (c b)) (if b then a else a)) (\ c : (C -> Bool) . (if a then c else false))) with (try ((\ b : Top . b) (try true with c)) with (false (if true then true else error))))
(if ((c (a error)) ((try true with error) (\ e : (Bool -> B) . false))) then (\ c : (C -> C) . (try (\ a : Top . a) with (true b))) else (try (try (try false with true) with (\ a : Bool . (try b with error))) with ((true true) c)))
(\ e : ((A -> C) -> ((B -> B) -> C)) . (if (\ e : B . (try c with false)) then (if true then error else false) else ((if b then c else true) (if c then true else true))))
(if ((\ a : (B -> Bot) . false) (if c then true else (c a))) then ((try (if false then true else error) with (if false then true else error)) (try (\ c : (C -> A) . (\ d : Bool . c)) with (\ d : (C -> C) . b))) else ((c error) (false error)))
(\ e : ((Top -> Bool) -> (Bot -> (C -> C))) . (try (b true) with (if false then a else true)))
(try (try (if (\ c : Top . c) then (\ e : B . true) else (try false with error)) with (if (\ d : C . error) then false else (\ b : A . a))) with (((false b) false) (try a with b)))
(if (\ c : ((Bot -> A) -> (Bool -> (Bot -> A))) . (\ a : (Bot -> (Bot -> C)) . (\ d : Bool . c))) then (if (\ c : A . false) then (if error then (error true) else (if a then true else a)) else (if a then error else b)) else (\ b : ((A -> Top) -> (Top -> A)) . (\ d : C . (\ b : Bot . a))))
(\ a : ((C -> B) -> (C -> (A -> Bot))) . (try (if (true false) then (b (if error then a else error)) else (\ c : C . false)) with ((if true then true else false) (if (if a then b else error) then false else c))))
(\ c : (((A -> Bool) -> B) -> (Bot -> Bot)) . ((try true with false) (\ b : (Bool -> Bool) . c)))
(\ e : (((Bot -> Bool) -> (B -> C)) -> ((B -> B) -> (A -> C))) . (try (\ d : (A -> Top) . (false b)) with (\ c : Top . (c b))))
(try ((try (\ c : A . error) with c) (try (try b with error) with (try a with true))) with (\ a : (B -> B) . (a b)))
(if (if ((if c then c else true) (\ b : Bool . c)) then ((false error) (try (b error) with c)) else (try ((c true) true) with (c a))) then (try (c false) with ((if c then b else b) error)) else (\ e : (A -> Bool) . (error false)))
(\ b : (((Bot -> Bot) -> C) -> ((Bot -> B) -> B)) . (\ e : (A -> A) . (try b with (false false))))
(try (try ((if c then true else c) (false c)) with (\ b : ((Bool -> B) -> A) . (try a with c))) with (try (try a with c) with (try b with false)))
((if (error true) then ((if true then b else false) true) else (\ d : Top . c)) (if (a (if error then a else b)) then (false (if b then false else a)) else (if true then a else true)))
(try (try (if (try (if true then error else b) with error) then (try a with error) else (\ d : (Bool -> C) . (b c))) with ((b c) (\ e : A . (if c then b else a)))) with (\ b : (Bot -> (B -> A)) . (\ e : Bool . true)))
(try (try (\ b : A . (try c with false)) with (if error then (if false then true else error) else (try c with true))) with (if (try error with (try false with a)) then (if (if b then true else error) then (if a then b else error) else (if (if c then a else error) then (c b) else true)) else (\ b : (Bot -> B) . a)))
(\ e : ((Top -> Bool) -> ((A -> Bot) -> (A -> C))) . (try (if false then false else a) with (try a with error)))
(\ a : ((C -> Bool) -> (Bot -> (Top -> C))) . ((try a with error) (if a then false else true)))
(if (\ c : (C -> A) . (\ a : C . false)) then ((true (false a)) (\ c : (A -> B) . (if b then false else b))) else (try (\ e : A . (try b with b)) with (\ e : B . (try true with true))))
(\ c : (((Bot -> Bool) -> (B -> (Bool -> Bool))) -> ((Bool -> Top) -> (C -> A))) . (if (try (\ a : B . false) with a) then (\ e : (A -> C) . a) else (if false then false else (\ d : Bot . b))))
(if (try (try (false b) with b) with (\ d : Bot . (if a then error else b))) then (if (try a with (a true)) then (error true) else (true a)) else (try (try (\ b : Bool . b) with error) with ((if a then (try false with true) else true) (\ c : (Bool -> B) . error))))
(\ c : ((((C -> C) -> (C -> A)) -> (B -> (A -> Bot))) -> ((A -> Bool) -> (Top -> B))) . (\ d : ((C -> B) -> (Bool -> (Bot -> Bot))) . (\ b : ((C -> Bot) -> Bot) . (try (if false then c else c) with false))))
(\ d : ((Bot -> (Bot -> Bool)) -> ((Bot -> Top) -> (C -> C))) . (if (if a then error else b) then (if a then b else (true false)) else (\ c : Bot . error)))
(if (try (\ b : Bot . c) with ((if error then a else error) a)) then (\ d : (Top -> (Bot -> Bot)) . (\ e : (Top -> B) . (try (if error then c else b) with false))) else ((false (a true)) (if (try b with b) then (error a) else (\ a : (Top -> C) . b))))
(if (try (if (if (\ e : Top . false) then (\ c : C . true) else (false c)) then (true c) else (\ c : C . b)) with (if c then a else (b false))) then ((\ c : (Bool -> C) . (\ d : B . (\ d : Bool . false))) (try error with false)) else ((if false then c else error) (try a with error)))
(if (\ a : (C -> C) . (try (try b with false) with c)) then (if (if true then a else a) then (\ c : (A -> Top) . (\ a : Bool . false)) else (\ e : C . b)) else (\ d : (C -> A) . (\ d : B . (true a))))
((try (if (c error) then (if error then false else true) else ((if a then error else b) (try c with c))) with (if b then (if c then error else b) else (if c then c else c))) (\ e : ((Bot -> Bool) -> (B -> A)) . (\ e : (C -> Top) . (if error then true else a))))
(if (\ b : (Bool -> Top) . (a error)) then (\ c : (C -> Bool) . (\ a : Bot . false)) else (if (\ d : Bool . true) then (if false then a else c) else (\ e : C . false)))
((\ d : (B -> Bool) . ((if false then b else b) (try b with b))) (\ a : ((Top -> (B -> Top)) -> (C -> C)) . ((\ b : (C -> C) . true) (b c))))
(try ((try c with c) (\ d : C . error)) with ((try (\ d : C . error) with (false c)) (try (try error with b) with (try b with b))))
(\ e : (((Bot -> Bool) -> ((B -> A) -> B)) -> ((Bot -> Bool) -> (Top -> Top))) . (try ((try c with b) false) with (if c then (a a) else (try b with b))))
(try (try (\ e : (C -> Bot) . (if a then false else false)) with (if false then (if a then error else false) else c)) with (try (false (if a then error else true)) with (true error)))
(try ((\ a : (C -> A) . b) ((try b with false) (try a with (c true)))) with (\ c : (Top -> A) . (\ c : (C -> Top) . true)))
(try (try ((try c with (try b with b)) (false true)) with (try (try true with error) with (try (if error then a else c) with b))) with (\ b : ((Top -> Bot) -> Top) . (error error)))
(if (\ a : ((B -> Top) -> Bot) . (try (\ b : (A -> Bot) . c) with (try true with true))) then (\ d : ((Bot -> Bot) -> Bool) . (a false)) else (\ a : (A -> B) . (try c with c)))
((if (try (try c with error) with (if false then false else c)) then (try (try (if true then c else b) with false) with (if c then c else c)) else (try (\ a : Bot . false) with c)) (if (try (if c then error else b) with error) then (\ c : (A -> B) . c) else ((try a with c) (false false))))
((try ((try a with true) (try (true c) with a)) with (\ d : ((Top -> Bot) -> (Bool -> C)) . (try error with false))) (if (if (if error then b else b) then (if false then a else false) else b) then (if (if b then error else error) then (\ b : (Bool -> B) . c) else (\ b : Top . error)) else (if (try a with a) then (try (if b then true else true) with (\ e : B . b)) else (\ b : Top . (if c then a else c)))))
(\ e : ((Bool -> C) -> ((Bool -> Top) -> (Top -> B))) . (if (true c) then (try true with (error c)) else (try a with a)))
(if (try (if (false a) then c else b) with (false (if a then false else true))) then (((\ a : Bool . true) (if a then b else error)) ((\ c : (A -> Bot) . a) (if a then c else false))) else ((try (\ d : Top . c) with error) (c false)))
(\ c : ((A -> C) -> (Bool -> C)) . (if (\ a : (C -> C) . (if false then error else true)) then (c a) else (b (if error then c else false))))
(try (try (try b with error) with (if false then c else (try a with c))) with (if (\ d : (Bool -> Bool) . (try c with b)) then (\ d : (Bool -> B) . (\ e : (Bot -> Bool) . (\ b : Top . b))) else ((try false with a) c)))
(try (if (if (if a then c else c) then (\ d : Bot . c) else (\ b : B . true)) then (try (true false) with ((true c) c)) else (\ e : (Bot -> C) . (\ d : (Top -> Bool) . b))) with (try ((a true) (error b)) with ((\ b : Top . c) true)))
((try (try error with a) with (\ e : Bot . c)) (try (try (try (true a) with b) with (error a)) with (\ b : (A -> (B -> Bot)) . (true b))))
(try (if ((\ c : Bot . c) (error (\ b : Bool . a))) then (try (try a with false) with a) else (\ a : C . (if false then true else a))) with (try (false c) with (if error then (\ b : Bool . b) else true)))
(if (if (false (try a with a)) then (if (\ e : C . a) then false else (try true with c)) else (if a then (\ d : C . c) else true)) then (try (if (if b then false else error) then (true c) else (if c then true else a)) with (\ a : A . (true error))) else (try (\ c : C . a) with (\ e : (Bool -> C) . a)))
(try (if (if (if true then error else b) then error else (try a with true)) then (\ d : B . false) else (try (false c) with (try a with error))) with (try (\ e : Bool . (false a)) with (try true with error)))
((\ d : ((A -> B) -> (Bot -> (Bot -> Bot))) . (if b then false else (if a then a else c))) (try (\ e : Top . (a c)) with (try false with false)))
((if (true a) then (\ c : (Bool -> B) . b) else (if (if c then c else true) then error else (\ a : C . b))) (\ d : (((Top -> Top) -> Bool) -> ((Bool -> Bot) -> Bot)) . (\ d : ((Top -> B) -> (C -> A)) . (if (try b with error) then (\ e : B . c) else (try false with false)))))
((\ e : ((Bot -> (A -> Bool)) -> (A -> A)) . (try (try c with error) with (if false then c else error))) ((if (try b with false) then false else (try a with error)) ((if (\ a : A . false) then b else (\ b : A . c)) (try a with c))))
(try (try (try (try a with error) with (try error with false)) with (b c)) with (if (if (\ d : (C -> A) . c) then (\ a : B . (false false)) else (try a with c)) then (try (\ c : Top . a) with (try a with a)) else (if (\ a : C . b) then (false (try c with c)) else (\ e : Bot . false))))
(((\ b : Bot . false) ((\ e : (A -> Bool) . (a b)) (\ e : C . error))) (try (try c with b) with (true c)))
(try (if (try error with false) then (\ b : (A -> C) . c) else (if (if (try b with false) then (try c with error) else (\ e : C . b)) then ((try a with a) (\ c : Bool . c)) else (try c with a))) with (if ((true error) a) then (try true with false) else (try (if false then true else a) with (\ d : Top . a))))
(if (try ((b a) a) with (try (\ a : Bool . false) with (\ b : Top . error))) then (\ a : ((C -> Bool) -> (Bool -> Bool)) . (b (true error))) else (try (if false then a else a) with (\ e : Bool . b)))
(if (\ c : (((A -> Bool) -> (A -> Top)) -> (Bool -> (B -> Bool))) . (\ a : ((B -> Top) -> Bot) . ((\ e : C . error) c))) then (\ e : (((Top -> B) -> A) -> (B -> Bool)) . (try (if true then c else c) with (try false with true))) else (\ e : (Bool -> (Top -> Top)) . (c (\ c : Bot . error))))
(\ e : (((Bool -> A) -> A) -> (Bot -> A)) . (\ d : (Bot -> Bool) . (\ e : Bool . (try false with true))))
(try ((if (c c) then (c error) else false) (\ e : Bot . (\ b : C . b))) with ((\ c : Bool . true) (if (\ b : Top . false) then (\ b : A . true) else true)))
((\ d : (B -> Bot) . ((try (true a) with true) (try error with false))) (if (try (a a) with (try false with error)) then (a (try a with b)) else (if (try c with b) then error else true)))
(\ e : (((C -> Top) -> (B -> A)) -> ((B -> Bool) -> Bot)) . (try (if false then a else true) with (a a)))
(\ d : (((Bot -> Bot) -> B) -> (Bot -> Bool)) . (if (try (if b then c else error) with (\ b : A . false)) then (\ e : (A -> B) . (try error with false)) else (try b with (true a))))
((\ d : (Top -> Top) . (error true)) (try (if a then (try true with c) else (try false with true)) with (\ b : C . (try error with error))))
(\ b : ((Bool -> Bool) -> (Top -> (Bot -> A))) . (try (if (b c) then (if true then false else b) else (false false)) with (try error with (try c with error))))
(\ b : ((C -> Bool) -> (Bot -> (Top -> Bool))) . (if (if c then (try b with b) else (try c with b)) then (try (a error) with error) else (b (c b))))
(if (try (\ e : Bot . false) with (try error with false)) then (try (if (try c with b) then false else (if false then c else c)) with (try error with a)) else (\ c : (((B -> B) -> Bool) -> (B -> C)) . (if (if true then c else error) then (if b then b else error) else ((if false then false else a) (b error)))))
(if (\ b : ((C -> Top) -> B) . (if (if c then b else (if a then a else true)) then (try c with (true false)) else ((if b then b else c) b))) then (\ d : ((C -> C) -> (Bool -> A)) . (try b with b)) else (try ((\ c : Bot . c) (error a)) with (\ d : (Bool -> (B -> A)) . (error (if false then a else a)))))
((try (\ d : C . (\ d : Bot . false)) with (error false)) (\ a : (Bot -> (A -> Bool)) . (\ c : Top . true)))
(\ d : (((A -> Bot) -> (Bool -> Top)) -> ((C -> Top) -> Top)) . (if ((if b then true else a) (\ a : B . error)) then (\ a : (C -> B) . (\ a : Bot . error)) else (try false with error)))
((\ e : ((Bool -> Bot) -> ((Bot -> Top) -> (B -> A))) . ((error error) (if true then false else false))) (try (\ c : (B -> Bool) . (b false)) with (if true then error else (if b then b else c))))
(\ a : (((Bool -> Bool) -> ((A -> Bot) -> C)) -> (Bool -> Bool)) . (\ c : (((A -> B) -> (Bot -> Bot)) -> ((B -> C) -> Bot)) . (if (if false then false else (a false)) then (b error) else (if (if a then false else error) then (try a with false) else (try true with error)))))
((if (try error with b) then ((try error with error) b) else (if (try a with error) then a else (if error then c else a))) (try (\ d : Bool . true) with (error (\ c : A . true))))
((try ((true a) (if b then false else a)) with (if false then c else (try c with a))) (try (try error with true) with (try (\ e : Top . true) with a)))
(\ a : ((B -> (Top -> C)) -> (C -> (Bot -> A))) . (if (a true) then (false false) else (\ b : C . c)))
(\ a : ((((Top -> A) -> C) -> (C -> Bot)) -> (((A -> C) -> B) -> ((Bot -> A) -> (A -> C)))) . (\ b : (((Bot -> C) -> (C -> A)) -> (C -> A)) . (try true with error)))
(if (try (\ a : A . (error b)) with (try (true c) with (try error with error))) then (if ((error error) (error error)) then (if (c a) then false else error) else (if (try c with a) then (\ a : C . true) else b)) else (\ d : (C -> C) . (\ b : Bot . error)))
((\ b : ((B -> Bot) -> Bool) . (if (a (try false with c)) then ((try true with false) (false true)) else (\ e : (C -> Bot) . c))) (\ e : (B -> Bool) . (((if true then a else a) b) (if b then c else b))))
(((b (false b)) (\ d : (B -> Bool) . (try true with error))) ((if b then false else (try c with false)) (try a with a)))
(\ d : ((B -> A) -> ((B -> Bot) -> C)) . (if (if false then (if error then true else a) else error) then (try (if (if false then error else true) then error else (\ d : Top . c)) with (if error then true else true)) else (\ b : ((A -> A) -> Bot) . (if true then b else a))))
(try (\ a : ((Bool -> B) -> (Bool -> Top)) . (try (error a) with (if a then c else c))) with ((try b with false) (if a then (\ c : Bool . error) else (if c then b else error))))
