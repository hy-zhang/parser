true
if false then true else false
x
true
if x then false else x
\x. x
(\x. x) (\x. x x)
{x=\x.x, y=(\x.x)(\x.x)}
{x=\x.x, y=(\x.x)(\x.x)}.x
"hello"
0
succ (pred 0)
iszero (pred (succ (succ 0)))
let x=true in x
((if (if (\ a . 1) then (pred (\ e . 2)) else (let d = (succ 0) in (b false))) then (\ b . (0 b)) else (let d = (pred "boy") in (\ a . "boy"))) . c)
({ d = (pred (2 . b)) , a = (if ({ d = (pred false) , a = ({ e = b , b = a }) }) then ("apple" . c) else ({ e = true , c = "boy" })) })
(if (\ e . (succ 0)) then (let c = (\ a . (iszero 0)) in (\ c . ({ d = a , e = (a . b) }))) else ((pred 2) . e))
(iszero (succ (\ c . (true . c))))
((iszero ((if 2 then "apple" else "apple") . c)) (succ ({ d = a , a = c })))
(if (succ (if a then 2 else "boy")) then ({ a = ({ a = (\ e . a) , d = false }) , a = (let d = (c . c) in (a 2)) }) else (succ (let a = (if 0 then c else b) in 1)))
((\ c . (0 . b)) (if (\ d . (let e = 0 in (true c))) then ((succ "boy") . b) else (iszero (iszero a))))
({ b = (iszero (if (\ d . a) then ({ a = a , a = (let c = a in "apple") }) else (pred b))) , d = ((let e = 0 in a) (iszero 1)) })
(succ (iszero (iszero false)))
(iszero (pred (pred (\ c . (succ 1)))))
(if (pred (let b = ({ d = c , b = a }) in (iszero "boy"))) then (let c = (pred "boy") in (\ d . "boy")) else (iszero (succ (iszero a))))
(iszero (let d = ({ e = (let c = true in (pred c)) , e = ("apple" . e) }) in (succ ("boy" 1))))
(pred (("apple" ({ d = 2 , a = 2 })) . d))
(pred (iszero (false . d)))
(if ((\ e . (iszero 0)) (iszero ({ d = "boy" , e = a }))) then ((if (let b = 1 in "boy") then (2 . e) else (c "boy")) . c) else (if ({ a = (if (\ a . 2) then 0 else (if "apple" then 2 else 2)) , c = (b . c) }) then (iszero (let e = b in 1)) else (if (2 . a) then (false true) else ({ a = (b . c) , a = (succ a) }))))
(if ((succ b) . a) then (iszero ({ c = ({ a = c , b = "apple" }) , b = (pred (pred 1)) })) else (let d = (\ e . "boy") in (succ (let c = a in 0))))
(succ (succ (pred a)))
(\ c . (iszero (pred ({ c = 1 , c = b }))))
(if (iszero (\ c . (pred (a . a)))) then (let c = (pred (iszero false)) in (succ false)) else (succ (pred (if b then b else c))))
((iszero (iszero (true . b))) (pred ({ b = (a "boy") , d = 2 })))
((({ e = "apple" , c = 2 }) (iszero b)) (let b = ({ a = 1 , e = b }) in (succ c)))
(if ((({ d = (a "boy") , d = "boy" }) . a) . d) then (pred (1 . e)) else (if (\ b . 2) then (succ c) else (pred (let b = "boy" in a))))
((({ a = ((b . a) (2 false)) , a = (if true then false else a) }) . e) . e)
(succ (pred (iszero ((succ b) . d))))
(succ (\ a . ((pred "apple") . b)))
(iszero ((let e = (pred 1) in (pred 2)) . a))
(succ ((let e = (iszero "boy") in (pred (c . c))) . b))
(\ e . (pred (b . c)))
(let c = (let a = (pred (iszero true)) in (succ (1 . a))) in ({ a = ((succ 0) (pred 1)) , e = ("boy" . e) }))
(let d = (let b = (let a = (\ a . false) in false) in (iszero (if false then false else b))) in (if (iszero c) then (if ({ a = "boy" , c = c }) then (2 . c) else true) else (if (let d = c in 0) then ("apple" b) else "apple")))
(\ a . (("apple" . b) (succ (iszero false))))
((let a = (let d = false in b) in (if 1 then b else c)) . d)
((pred (if "boy" then (pred "apple") else ({ a = true , b = b }))) . d)
(let e = (iszero (if b then c else (2 . d))) in (\ c . (iszero false)))
(if (let c = (1 "apple") in (succ (iszero c))) then ({ d = ({ a = 1 , c = (0 . d) }) , e = (2 false) }) else (pred (let a = ({ b = 2 , b = a }) in (2 (let c = 0 in "apple")))))
(pred (succ (succ (if b then "boy" else 1))))
((iszero (let e = (iszero a) in (\ a . 1))) . e)
(let e = (({ e = (if 2 then 1 else 1) , d = 1 }) . a) in (succ (succ (\ b . 0))))
(succ ((pred false) . a))
(\ a . ((iszero 1) . a))
(iszero (let d = (\ b . c) in (if "boy" then false else c)))
(iszero (iszero (if true then (b . c) else c)))
(((iszero b) (succ (pred 0))) (succ (\ b . a)))
(\ a . (iszero ({ e = (\ a . 1) , d = (false . b) })))
(succ ({ c = (\ d . ({ b = false , a = "apple" })) , a = (pred ({ a = false , c = a })) }))
(\ e . (let d = (if (c false) then (iszero ({ d = a , d = a })) else (let a = true in (\ a . c))) in (let b = (succ ({ e = c , d = a })) in (\ e . (pred 2)))))
({ b = (({ c = (0 . d) , a = (a . c) }) (("apple" . c) . c)) , a = (let a = (2 . e) in ((let e = 2 in 0) 0)) })
(iszero ({ c = (let d = 2 in 2) , d = (if a then (c . c) else ("boy" . a)) }))
(succ (iszero (if 2 then "boy" else 0)))
(let c = (((pred (\ e . "apple")) ({ c = true , a = 1 })) . a) in ((let a = 2 in "boy") . d))
(iszero ((a 2) (false . d)))
(let c = (if (succ ({ a = a , e = 0 })) then (let a = (pred 2) in (true . a)) else (\ c . (\ d . (pred b)))) in (iszero ((b a) (true (if c then "boy" else true)))))
(((let d = 1 in (\ a . true)) (0 "boy")) ((if (2 1) then "boy" else (c true)) . a))
(let e = ((({ b = false , e = true }) . d) (((c "apple") . a) . e)) in (\ c . (succ false)))
(iszero (iszero ((b 0) (b a))))
(iszero (\ e . (false false)))
(iszero (let a = (pred (succ (b . b))) in (let a = "boy" in b)))
(\ a . (let c = (\ d . a) in (if b then false else "boy")))
(if (if ({ e = false , a = 0 }) then ((if (\ d . a) then 1 else 0) ({ c = "boy" , e = a })) else (({ e = c , a = a }) . c)) then (pred (if c then (pred "apple") else "boy")) else (succ (pred (pred c))))
(\ b . (pred (\ b . "apple")))
((if (succ 1) then ({ c = true , b = (succ "boy") }) else ({ b = (\ a . c) , a = ({ d = (pred c) , c = "apple" }) })) (pred ({ e = (succ 2) , e = ("boy" b) })))
(iszero (let e = ({ a = (if 1 then "apple" else a) , a = (\ d . "apple") }) in (b . b)))
(if (if (iszero a) then (iszero (pred 2)) else (iszero (succ 1))) then (let a = (let e = ("boy" 0) in "boy") in (let c = (if 1 then true else true) in (pred c))) else ({ a = ({ a = 1 , b = 0 }) , d = (succ (iszero 1)) }))
(if (let b = (\ c . 0) in (\ c . ((false false) (let e = b in "boy")))) then (\ e . ({ e = (if a then false else a) , d = (\ c . "apple") })) else (succ (c false)))
(\ a . (pred (b . e)))
({ b = (pred ({ e = "boy" , b = 2 })) , c = (succ (pred "apple")) })
(let a = (pred (iszero a)) in (succ (let d = a in b)))
(let e = (iszero (pred (succ c))) in (succ (iszero 2)))
(iszero (if (iszero a) then (iszero "apple") else (succ 1)))
(\ b . ((if (if "boy" then c else "apple") then (iszero "apple") else ({ b = 1 , e = 0 })) ((if true then 1 else 2) (0 true))))
(succ ((iszero 0) . e))
(let d = (let a = (if "boy" then (\ e . 2) else true) in (let c = 2 in 1)) in ({ e = (\ a . (let d = 2 in 2)) , c = ({ a = 1 , b = 2 }) }))
(let a = (if ({ d = 0 , e = 2 }) then (\ e . a) else (({ e = "apple" , d = a }) a)) in (let b = (("apple" . e) (pred a)) in (iszero 0)))
({ c = (iszero (\ e . ("boy" . c))) , e = (let a = (false . b) in (succ 1)) })
(\ c . (succ (\ b . true)))
((if (succ a) then (let d = (false . d) in (if false then 1 else true)) else (succ (let d = 1 in c))) (pred (iszero (iszero "apple"))))
({ a = ((a b) (2 . e)) , b = (let c = (succ false) in (succ 0)) })
(\ d . (iszero (pred b)))
(iszero ({ a = ((c . d) 1) , a = (1 "apple") }))
({ a = (iszero ((let b = c in c) (iszero 1))) , a = ((false (\ e . a)) (iszero (\ d . 0))) })
(((\ d . "boy") (succ (pred 2))) (\ b . (if a then (iszero "boy") else ({ a = false , b = 1 }))))
(((\ e . 1) . a) . b)
(succ ({ c = (false b) , c = ("apple" . a) }))
(let c = (((let b = b in "boy") (\ b . b)) . b) in (let c = (\ a . 1) in ((false true) 1)))
((if ({ c = (iszero false) , d = (iszero c) }) then (iszero (b 0)) else (iszero (if 0 then false else c))) (succ (1 1)))
(if ((((let a = 2 in a) . b) ({ e = a , e = "apple" })) . c) then (let a = (pred (0 . e)) in (iszero 1)) else (pred (if a then 2 else (1 . e))))
((if (if c then a else a) then (succ ({ a = b , b = false })) else (false "apple")) (let c = (false . e) in (pred false)))
(iszero (pred (succ (succ "apple"))))
((if (c "apple") then (let c = "apple" in b) else (succ 0)) (succ (iszero (iszero (if a then 1 else b)))))
(pred ((\ e . "apple") . d))
(let a = (if (iszero (let e = true in 1)) then (\ a . "apple") else (let a = (iszero 1) in (let c = (succ b) in ("boy" false)))) in (((let b = a in 1) ({ c = a , b = true })) . d))
(pred (if (true (pred 1)) then (iszero (pred b)) else ((if a then 2 else "boy") (iszero a))))
(let e = ({ b = ({ c = "boy" , e = b }) , d = (if (let b = false in c) then ({ a = 0 , d = 2 }) else (pred 0)) }) in (\ e . (iszero "boy")))
((\ c . (iszero "apple")) . d)
({ e = (succ ({ d = (1 1) , b = (if true then 1 else false) })) , d = (if ((pred a) (\ e . true)) then (if (true . a) then (if "boy" then (\ a . "apple") else (b "boy")) else (\ a . a)) else (let c = (let a = 0 in "boy") in (let b = (if "apple" then true else 2) in (succ c)))) })
(let d = (succ ((pred 1) . a)) in (if ({ a = b , c = "apple" }) then (false "boy") else (\ d . "boy")))
(let a = ({ d = (pred "boy") , c = ("apple" a) }) in (succ (pred "boy")))
(iszero (pred (iszero ({ c = 1 , a = 2 }))))
(pred ((if (succ (2 a)) then (\ a . (pred 2)) else (let d = b in c)) . a))
(let d = (pred (\ e . 1)) in ((iszero (iszero c)) . a))
(let e = ((pred (iszero c)) . d) in ((pred (let e = "boy" in "apple")) (pred 1)))
(let a = (\ a . (let e = (iszero b) in (iszero "apple"))) in (if (\ c . 1) then (succ false) else ({ a = c , c = (iszero "boy") })))
({ c = (succ (\ c . (pred 0))) , b = (succ (if 1 then 2 else 2)) })
(({ a = ((pred "apple") . a) , a = (succ (iszero b)) }) (\ d . (let c = (c . e) in (iszero 0))))
(succ (pred ((if 0 then true else false) . b)))
(succ (let c = (succ (iszero a)) in (if b then 1 else 2)))
((iszero (({ b = true , a = c }) . d)) . a)
(iszero (if ((pred (pred 2)) ("boy" c)) then ((if ({ b = 2 , c = "apple" }) then (b 2) else (let b = 0 in "apple")) (succ 0)) else (if (pred b) then (succ "apple") else (1 . a))))
(pred ({ d = (if (b c) then (pred c) else ({ d = 2 , d = 1 })) , a = (if (\ e . b) then false else c) }))
({ d = ({ d = (if c then c else "apple") , d = ({ d = (0 2) , a = false }) }) , e = (succ (0 . e)) })
(pred (if (let d = (1 . a) in 2) then (succ (let c = 2 in b)) else (\ e . "apple")))
(succ (iszero ({ c = (0 . d) , c = true })))
(\ e . (if (let a = (iszero 2) in ({ e = true , d = "apple" })) then (let b = (\ a . c) in (let e = 2 in 0)) else (if (succ "apple") then (let e = 2 in c) else (pred c))))
(\ a . (succ ({ d = 1 , e = "boy" })))
(\ b . (\ e . ({ a = true , a = 0 })))
(if (pred (pred true)) then (if (iszero a) then (iszero (iszero (2 . b))) else (pred (let d = 1 in false))) else (iszero (succ (iszero a))))
(let d = (\ b . (let b = b in a)) in (iszero (let c = (iszero 2) in (if a then b else c))))
(pred (if (let c = "boy" in ("apple" . c)) then ({ b = (\ e . 1) , a = (\ a . 1) }) else (let c = true in (\ e . "apple"))))
(succ ({ b = ((succ c) . c) , c = (iszero "apple") }))
((((succ (a 0)) . e) (\ e . ("apple" . a))) . c)
(let d = ({ a = (pred true) , e = (let b = c in (pred false)) }) in (if (b . b) then (if "apple" then 2 else false) else (iszero b)))
({ d = (succ (pred c)) , d = (let b = (iszero true) in (if (let d = true in "boy") then (succ c) else (succ 1))) })
(pred (\ b . (pred (a . a))))
((\ e . (iszero 0)) . c)
(if (\ a . (succ (let c = true in 2))) then (((0 true) (iszero "boy")) ((let a = "boy" in b) . e)) else (((succ 1) (\ e . (pred true))) . a))
(({ d = (if (let d = "apple" in c) then true else (iszero 1)) , a = (let a = (\ b . (\ c . c)) in ({ c = (let a = true in true) , a = (0 a) })) }) . c)
(succ (pred (pred (iszero (\ b . b)))))
(if (iszero (pred "apple")) then (succ (let d = (iszero false) in (pred (iszero 0)))) else ({ c = ({ d = (\ b . c) , c = (2 . c) }) , d = (pred (pred true)) }))
(if (iszero (if (1 . c) then (a true) else (\ b . "apple"))) then ({ d = (iszero 1) , b = (\ a . (b (pred c))) }) else (succ (iszero (pred 0))))
(iszero (pred (iszero ("boy" 0))))
(((\ e . b) . d) . e)
(\ a . (({ e = true , b = ({ a = c , a = false }) }) . e))
((let a = ((\ a . 2) . b) in ({ d = (false false) , c = true })) (let b = (iszero false) in (if "boy" then "boy" else (0 false))))
({ e = ((let e = b in (false . d)) (2 c)) , a = (if (iszero (a . e)) then ("boy" true) else (\ c . a)) })
(if (if ((if false then 0 else true) c) then (succ (if b then "boy" else "boy")) else (iszero true)) then (iszero (if (c c) then (iszero "apple") else (succ false))) else (iszero ({ d = (a true) , c = ({ a = "boy" , b = (iszero 1) }) })))
(if (let e = (succ (2 . b)) in ({ e = (iszero (iszero 1)) , c = (let c = false in "apple") })) then (if ((b "apple") . d) then (succ (if c then false else b)) else ((a . a) b)) else ((succ ({ c = c , c = a })) . b))
(succ (let c = (let d = true in b) in (succ a)))
(iszero (let b = (iszero b) in (pred false)))
(if ({ e = (if (succ (pred false)) then ({ b = ({ a = 2 , a = 1 }) , e = (a 2) }) else (iszero "apple")) , e = (\ a . (if 2 then a else false)) }) then (if (c . d) then ((\ a . c) ("apple" . e)) else (succ (pred true))) else (iszero ({ b = b , c = false })))
((pred ({ d = (c . a) , e = (let b = ({ d = true , d = 0 }) in true) })) (iszero (pred 1)))
(pred (iszero (iszero (iszero "apple"))))
(let d = (succ ("apple" . c)) in (iszero (\ e . c)))
((pred (if (let e = true in b) then (\ c . 1) else ({ b = b , e = 2 }))) ((if 2 then (pred b) else 0) . a))
(if ({ a = (let c = b in ("apple" true)) , b = (let b = ({ d = "apple" , c = b }) in (\ c . (let e = "apple" in "boy"))) }) then ((succ ("apple" . a)) ({ c = (succ ({ b = "apple" , c = "apple" })) , c = (succ 2) })) else ({ c = (iszero (succ true)) , d = (if c then false else false) }))
(\ d . (iszero ((pred false) (pred true))))
(let b = ((if b then 2 else "boy") . a) in ((if (let b = 2 in "boy") then ({ c = (iszero 1) , b = "boy" }) else (\ c . "boy")) . e))
(\ e . ((if 0 then true else 2) (\ c . (succ "apple"))))
(succ (pred ({ e = a , d = false })))
(iszero (let c = (a . d) in (succ b)))
(({ c = (if "apple" then true else "boy") , d = (pred false) }) . d)
(\ c . ((let c = (if false then (pred "boy") else "boy") in (\ b . ("boy" . a))) (if (iszero "boy") then (0 . e) else (iszero ({ e = "apple" , e = 1 })))))
(succ (if ((iszero true) . c) then (\ b . ({ e = 1 , d = 2 })) else ("apple" . d)))
(pred (succ (iszero (2 c))))
(if (iszero (b 0)) then ((iszero "boy") ((false a) (b c))) else (((pred (pred a)) . e) (pred ({ c = "boy" , a = a }))))
(let c = ((iszero ({ b = 2 , e = false })) . c) in (pred (succ true)))
(let c = ((let a = 0 in a) . d) in (succ (succ 1)))
(\ d . (iszero (\ d . (let d = a in "boy"))))
(pred (let d = (pred (true 2)) in (let b = true in "boy")))
((let d = (succ false) in (pred true)) (iszero (let e = ("apple" . c) in (if 1 then "apple" else 0))))
({ e = (if (iszero (1 . c)) then (let c = (\ c . 0) in 2) else (let b = ({ a = 2 , a = "boy" }) in (succ (let a = false in c)))) , a = (iszero ({ d = "apple" , a = ("boy" . c) })) })
(succ (pred (let d = (let b = true in "apple") in ({ d = 1 , b = 0 }))))
(if (\ c . (1 . c)) then ({ a = ((succ c) . b) , a = (succ (succ 2)) }) else ((iszero 2) . d))
(\ c . (iszero (iszero (succ "boy"))))
(if ((if (true "apple") then "boy" else c) . b) then (\ e . ((\ e . true) . a)) else (let d = (if 1 then 0 else 0) in (if false then (pred c) else (iszero "boy"))))
(if ({ c = (\ d . (if "apple" then 0 else 1)) , e = ((\ c . 2) . b) }) then (iszero ((succ ("boy" a)) . e)) else (\ b . (let e = 2 in a)))
(succ (let e = (pred false) in (succ (if c then true else "apple"))))
(\ a . ((let c = (iszero 0) in ({ b = "apple" , a = 2 })) (if true then c else a)))
({ a = ((a . c) . b) , c = (succ (pred (pred "boy"))) })
(if ((iszero 1) . d) then (if ({ b = "apple" , d = "apple" }) then ("apple" (c . a)) else ({ e = 1 , e = "apple" })) else ({ c = (pred c) , e = (if false then c else ("boy" . a)) }))
(if ({ d = (if ((true . c) "boy") then (({ d = false , e = 2 }) . a) else (succ b)) , d = ("boy" (succ true)) }) then ({ c = (1 c) , b = (succ a) }) else (pred ((pred b) ((succ 1) a))))
((succ ((b . c) . c)) (let a = (if 0 then "apple" else 1) in (\ a . c)))
({ d = (succ (iszero ({ d = "apple" , e = 2 }))) , b = (succ (1 . c)) })
(iszero ({ a = (succ (succ 1)) , d = (\ b . a) }))
(({ c = (pred a) , c = ("boy" b) }) . e)
((succ (iszero 2)) (succ (if 1 then (pred false) else 0)))
(iszero (pred (let c = (pred (succ c)) in (if c then b else a))))
((if (succ true) then (pred 0) else (succ "apple")) ({ a = (let b = 2 in false) , d = (iszero (let d = b in false)) }))
((let a = (let a = true in (if "apple" then 0 else true)) in (let d = (true . c) in c)) (((let e = a in a) . e) . a))
((succ ({ b = (succ b) , a = (iszero (c . a)) })) (iszero (succ true)))
(pred (iszero (\ a . (let d = "boy" in a))))
(if (\ d . (if (if (pred b) then 0 else (let d = false in c)) then (pred true) else ({ b = 0 , d = c }))) then (let b = (if "apple" then (c 0) else true) in (false . b)) else (if (iszero ({ c = b , e = 1 })) then ({ e = (\ e . (true . e)) , e = (iszero c) }) else (if (if "boy" then "apple" else 1) then ((pred b) . d) else (\ a . (succ 2)))))
(\ d . ((succ 2) . a))
(iszero (\ c . (if ({ c = a , d = false }) then ("boy" . d) else ({ e = 1 , d = 1 }))))
((pred (let a = (\ a . (\ d . c)) in (\ b . (let a = c in "boy")))) . e)
((let d = (0 . e) in (if b then 2 else c)) (pred (\ d . b)))
(\ b . (let a = ((false . b) ({ b = (pred a) , d = 1 })) in ({ e = "apple" , d = true })))
((if (if a then "boy" else "boy") then (if (succ 2) then (iszero "apple") else false) else (pred "apple")) . b)
(pred ((if true then a else b) (\ c . (pred c))))
((iszero ((iszero (let a = a in a)) . b)) (\ e . (if ({ c = "boy" , d = (\ b . "boy") }) then (({ e = 0 , c = 0 }) . b) else (iszero true))))
((succ ((\ a . b) . a)) ((iszero ((\ a . "boy") . a)) . d))
(succ ((b (iszero true)) . e))
(if (let c = (pred 0) in (iszero 2)) then ((if (succ c) then ({ b = b , a = "apple" }) else (let c = 2 in true)) . d) else ((if (\ d . a) then (0 b) else (false . d)) . d))
(succ (\ a . ((let e = "apple" in 1) b)))
(succ ((\ d . (iszero a)) . a))
(((let b = (true false) in false) (let e = false in (if "apple" then 0 else "boy"))) . b)
((iszero ((2 . a) . b)) . e)
(if (if (let c = (if false then true else "boy") in b) then (0 ("boy" false)) else (if "apple" then "apple" else c)) then (iszero (let d = ({ a = b , c = "apple" }) in ({ c = (\ a . a) , a = (if "apple" then c else true) }))) else ((succ (pred 1)) . a))
((pred ((0 . d) . d)) . a)
(succ ((pred 1) . b))
(pred (if (iszero (pred 1)) then ((succ c) (\ b . 2)) else (if ({ e = 0 , c = true }) then (let c = (let c = 1 in 0) in ({ b = true , e = true })) else ({ b = ({ d = b , b = false }) , b = "boy" }))))
(let a = (pred (iszero true)) in ({ b = (succ (pred 2)) , d = (if (if false then true else 1) then false else (let d = a in c)) }))
(\ a . ({ b = (let d = ({ e = 1 , e = "boy" }) in (\ c . 2)) , c = (iszero (\ c . 1)) }))
(if (if (iszero (iszero 2)) then ((false . a) (succ true)) else (iszero "apple")) then (\ a . (succ b)) else (if ("apple" (iszero true)) then (\ e . "apple") else (pred true)))
(pred ({ b = ({ c = false , a = a }) , d = ({ e = ({ b = 1 , a = a }) , e = ({ b = false , c = 2 }) }) }))
(\ c . (let e = (iszero (pred false)) in ((({ e = c , c = b }) . c) (\ c . 0))))
(iszero (({ b = false , a = "apple" }) . e))
(if (let d = (succ (succ true)) in (\ d . (true . c))) then (let a = (let d = false in 1) in (pred c)) else (pred (iszero (let b = "boy" in b))))
(({ a = (\ c . true) , c = (0 false) }) . b)
((pred ((if "boy" then c else true) . b)) . a)
(let b = (if (pred a) then (c (let b = true in false)) else ((iszero "boy") . b)) in ((succ ("apple" b)) . e))
((((false a) "boy") . c) (\ a . (succ ({ c = 0 , d = "apple" }))))
(({ a = (let d = (let b = c in ({ d = a , d = 2 })) in (succ 0)) , a = ((if 0 then false else c) ({ d = true , c = b })) }) ((true . c) ({ a = (pred false) , b = (c "apple") })))
(let a = (\ a . (\ d . (iszero c))) in (pred (iszero 2)))
(if (\ c . (let c = (2 b) in 2)) then (let d = (if c then b else b) in (let c = (iszero 1) in (\ d . b))) else (\ d . ({ e = (c true) , e = true })))
((iszero (pred c)) . c)
(pred (iszero (iszero 1)))
({ d = (let a = (if 2 then (true false) else (false . e)) in (iszero "boy")) , d = ({ e = (true . e) , c = (let c = ("apple" false) in (if true then a else 0)) }) })
({ e = (pred (let b = (succ (let a = true in false)) in (pred (let b = a in 0)))) , a = (iszero ({ e = ({ c = 0 , e = false }) , c = (succ (false false)) })) })
({ b = ({ a = (iszero b) , c = (a . e) }) , b = (iszero (1 . a)) })
(if (pred ((if (pred true) then (\ c . 0) else (pred true)) (succ "boy"))) then (let c = (0 false) in (iszero false)) else (pred ({ e = 2 , a = false })))
(pred (\ a . ({ d = 0 , a = 0 })))
(\ a . (if (let a = "boy" in false) then (\ e . ({ b = b , a = 2 })) else (\ d . "apple")))
(pred (pred (iszero "boy")))
(\ d . (\ a . (succ 1)))
(({ e = ({ b = 1 , c = "apple" }) , a = (if 2 then b else 0) }) (let a = (\ c . (pred "apple")) in (pred (succ false))))
(\ e . (\ b . (if false then (iszero 0) else (iszero a))))
(iszero (if (let a = a in true) then ({ a = (succ 1) , c = (\ b . false) }) else (succ (let a = 2 in 1))))
(pred ((iszero (\ c . "apple")) . a))
(iszero (iszero (iszero (let c = a in (iszero a)))))
(iszero ({ c = ((succ a) (succ 0)) , d = (\ d . 1) }))
(if (if (let e = (1 2) in false) then (\ e . (iszero c)) else (\ e . 0)) then ({ e = (\ d . (c 2)) , b = (a . c) }) else (({ e = "apple" , a = "boy" }) (true . e)))
(succ (\ b . (succ 1)))
(((\ b . (if 0 then a else false)) . c) . a)
(let e = ((\ c . false) (succ ({ a = a , a = "apple" }))) in (((succ "apple") "apple") . c))
(iszero ({ c = (\ e . "apple") , e = (let c = false in "boy") }))
(succ ({ c = (iszero c) , a = (a . d) }))
(\ b . (pred (\ a . (succ c))))
(pred (pred (pred (pred b))))
(pred ({ d = (let d = (2 c) in (pred a)) , e = (succ 2) }))
(((succ "apple") . c) . d)
(succ ({ d = (let b = (\ c . true) in b) , c = (pred false) }))
(\ e . ({ c = (pred b) , b = (succ 0) }))
(succ ((\ d . "boy") (b false)))
(\ c . (pred (succ c)))
(\ b . (iszero (pred c)))
(let d = (if ("apple" . b) then (({ a = b , d = 0 }) 0) else (if (iszero b) then (succ 2) else c)) in ((iszero ({ b = (\ c . a) , c = (let b = "boy" in "boy") })) . a))
((succ (\ d . 0)) (pred ({ b = a , b = b })))
(succ (pred (iszero (let b = a in (succ c)))))
({ d = ({ c = (if ({ e = "apple" , b = a }) then ({ b = b , b = a }) else b) , e = ((iszero 2) . a) }) , d = (pred ("boy" . e)) })
(let c = (succ (succ (let d = 1 in false))) in (iszero ("boy" . e)))
(pred ({ d = (succ (let c = false in b)) , e = ((\ e . a) (\ d . "boy")) }))
({ b = (succ ((let e = 0 in false) . a)) , b = (if (true a) then (let a = (let b = "apple" in true) in 0) else ({ e = ("apple" 0) , c = (\ b . false) })) })
((let d = (iszero 0) in (({ e = "boy" , a = 2 }) true)) (\ a . (a . b)))
((iszero (pred "boy")) . a)
(({ a = (let a = (let c = false in true) in false) , e = (succ (if "apple" then 2 else c)) }) (({ d = (if 2 then c else c) , c = (iszero "boy") }) (\ a . ({ e = a , e = 2 }))))
(if (({ b = 1 , a = (true true) }) ({ d = (succ a) , d = ("apple" . b) })) then (let b = (succ a) in (\ a . c)) else (let b = (pred (succ "apple")) in (if (({ a = true , c = "apple" }) . d) then (\ a . "apple") else (pred b))))
(\ d . ({ a = (if "boy" then (if false then "apple" else 1) else true) , e = (iszero (iszero true)) }))
(\ e . (let e = (if ({ d = "apple" , d = true }) then (iszero 1) else (\ b . "boy")) in ({ b = (if true then c else 0) , c = (\ c . false) })))
(iszero (if ({ a = 1 , d = true }) then (({ b = a , d = 1 }) . b) else (iszero (iszero "apple"))))
(let b = (iszero (let c = 0 in a)) in (let b = (\ a . (let c = 2 in false)) in (if (true b) then (let c = false in c) else (\ b . (iszero "apple")))))
(let b = (iszero (succ ({ d = 0 , d = a }))) in (iszero (pred (pred true))))
(pred ((iszero "boy") . a))
(iszero (let e = ((if c then a else (0 "apple")) (succ true)) in ({ c = (iszero (if "boy" then "boy" else "apple")) , b = (pred false) })))
((\ a . ({ b = (\ b . true) , c = (if 1 then "apple" else b) })) ((if (pred a) then (iszero 2) else (pred c)) . a))
(iszero (succ ("apple" . a)))
(pred (((succ "boy") . e) . b))
(\ c . ((let a = a in true) . b))
({ c = ((iszero b) . d) , d = ({ b = (let a = (iszero 2) in 0) , a = (pred false) }) })
(iszero (({ a = "boy" , a = true }) ((pred 2) . a)))
(let a = (((\ a . 0) (c b)) (let c = 2 in 0)) in (if (\ c . b) then (if (b 2) then true else "boy") else (pred b)))
({ c = (pred ({ b = b , e = 0 })) , a = (let a = (let a = (if 2 then 2 else true) in (iszero 0)) in (iszero (iszero 2))) })
(if (succ (pred b)) then (succ (\ c . (if true then false else 1))) else (pred (let e = ({ a = 2 , c = c }) in (\ e . "boy"))))
(iszero (\ a . (b . d)))
(\ c . (((iszero "boy") a) (iszero c)))
(pred (let a = (true (succ true)) in ((iszero a) . d)))
(\ d . ({ a = (if true then a else c) , a = (\ e . (\ d . c)) }))
(succ (let d = ((iszero c) (if 2 then "boy" else a)) in (succ ((\ e . 2) . c))))
(pred (if ({ d = ("apple" . e) , b = (if b then (pred c) else (succ false)) }) then (iszero ({ d = ({ d = "boy" , c = 1 }) , b = (succ 0) })) else (let e = ({ e = false , c = ({ e = true , a = c }) }) in ((if "apple" then a else 2) . b))))
(if (({ b = b , b = 0 }) . e) then (if (iszero 2) then (let c = false in "boy") else (let a = a in 2)) else (let e = (succ 0) in (let e = (\ d . "boy") in (let b = "boy" in c))))
({ a = (if (let a = (let c = (if b then true else b) in (pred true)) in ({ d = (a false) , b = (let e = 0 in 0) })) then (\ a . (let c = "boy" in 2)) else (succ true)) , e = (iszero (\ a . (let c = (pred false) in "boy"))) })
(iszero (let b = (succ 0) in ({ c = "boy" , c = 2 })))
(pred (let a = (let c = (0 . b) in ({ e = 2 , c = c })) in (a . d)))
((if (succ true) then ({ b = 0 , b = "boy" }) else (if (1 true) then (let a = 1 in true) else 1)) ((pred (pred 1)) (succ (if 2 then "apple" else (let e = "boy" in "apple")))))
(pred ((let c = b in "apple") (2 true)))
(iszero (if (succ (succ b)) then (if ((pred 2) . c) then (false . a) else (pred false)) else ((true a) (let a = 0 in "boy"))))
((let a = ("boy" . b) in (iszero "apple")) ({ d = (\ d . (iszero false)) , a = (pred (iszero b)) }))
(iszero (if (iszero ({ d = 0 , b = 1 })) then (pred (succ "apple")) else (if ("boy" . b) then (let a = false in (pred b)) else (\ d . c))))
((iszero ((succ "boy") . a)) (\ d . (let b = (iszero (\ d . "apple")) in (1 2))))
((let b = ((iszero "boy") (iszero true)) in ((\ a . "apple") (\ c . c))) (\ a . (if false then 0 else true)))
(\ e . (succ (pred "boy")))
(let b = (if (pred 0) then (let d = (pred b) in ("boy" "boy")) else (pred (0 a))) in (if (iszero ({ a = b , c = 0 })) then (pred true) else ({ a = (if 0 then "apple" else false) , d = c })))
(\ e . ({ d = (if (pred a) then (if c then "boy" else 2) else (if c then b else 0)) , b = (if (\ d . 0) then (pred c) else (succ 0)) }))
(let b = (pred (let b = (\ a . 0) in (if 0 then true else a))) in ({ d = (pred false) , c = ({ b = false , c = 2 }) }))
({ d = (iszero (b . d)) , d = (succ (if ("boy" c) then (iszero c) else (false a))) })
(pred (succ ((\ a . c) (iszero true))))
(let d = (if ((0 b) 0) then (iszero (0 c)) else (if "boy" then c else 1)) in ((pred ({ c = (false . c) , b = 1 })) (\ d . (iszero "apple"))))
(((let b = (0 . a) in ("boy" 2)) (if true then 2 else (\ c . 1))) (let e = (let d = 0 in (iszero c)) in (c 2)))
(if ((iszero true) . e) then (succ (pred c)) else (iszero (iszero 2)))
({ b = (if (succ b) then (let c = (let e = b in "boy") in b) else (let c = (iszero "apple") in (if 1 then true else true))) , c = ({ e = ((if "boy" then false else "apple") c) , b = (iszero "apple") }) })
(iszero ((let e = (\ c . true) in (if (succ false) then ({ c = 0 , d = "boy" }) else false)) ((if c then ({ e = "apple" , c = 1 }) else (succ true)) (if 2 then 1 else 2))))
(let d = (let a = (true . b) in (b 2)) in ((let b = a in 2) (iszero (if "apple" then "apple" else b))))
(\ c . (if (let b = b in false) then (iszero a) else (succ (let b = 1 in 2))))
(succ (iszero (let d = (iszero a) in "boy")))
((let a = (iszero (succ "apple")) in (let c = (pred 0) in (succ c))) . c)
({ e = (((succ b) 0) . a) , e = (({ e = false , c = false }) (iszero true)) })
(iszero (if ("boy" 2) then (let b = true in true) else (a "apple")))
(let c = ({ a = ((succ "apple") . d) , d = (pred ((\ a . a) (iszero b))) }) in (let d = (let b = 2 in a) in (\ c . (succ 1))))
(let d = (succ (pred false)) in ((iszero (if (\ b . 1) then (iszero b) else (0 . b))) . d))
(\ c . (iszero (iszero b)))
(succ (\ d . (if ({ b = false , a = "boy" }) then (iszero false) else (2 "apple"))))
((let d = (let c = false in false) in (let b = true in a)) . b)
(succ (succ (succ true)))
(let e = (\ c . (\ c . (succ c))) in (succ (succ (succ c))))
(iszero (let d = ({ d = (\ b . b) , a = ({ b = a , c = "apple" }) }) in ({ e = (let d = "boy" in a) , e = (pred "boy") })))
(let d = (pred (false . c)) in ((succ (\ d . "apple")) . e))
(pred (iszero ({ d = "boy" , b = false })))
(let c = (iszero (pred (if (\ e . "boy") then "boy" else a))) in ((\ c . false) (2 ("apple" . a))))
(pred ((\ d . 0) (iszero "boy")))
(succ (if (true true) then (2 . b) else (succ 0)))
((pred (let b = (pred true) in b)) . c)
({ c = (let b = ((0 0) b) in (iszero (pred 1))) , b = ((if ({ c = c , d = 1 }) then (succ a) else ("boy" . d)) ((iszero (c 0)) (succ false))) })
((\ d . (succ "boy")) . c)
(if (succ ((c . b) . c)) then (pred ({ a = ((iszero "apple") true) , b = (pred ({ d = 1 , d = "boy" })) })) else ((if a then 2 else a) . c))
(if (({ b = 2 , a = true }) (let b = (pred 0) in (succ b))) then (if ((\ e . (\ c . 0)) . e) then (iszero ((let d = 1 in b) (a "apple"))) else (iszero (pred 2))) else (pred (iszero true)))
(iszero (if ({ d = (\ d . "apple") , c = "apple" }) then ((c 0) . c) else (if (true . b) then 0 else c)))
(\ d . ((let c = (pred c) in (1 . a)) (let e = (if (a . e) then 1 else c) in (pred c))))
((succ (let e = "boy" in (succ "apple"))) . a)
(\ b . ((iszero (let c = "boy" in 1)) . c))
({ a = (succ (({ a = true , d = "apple" }) . c)) , d = (let b = (iszero (if c then "apple" else false)) in (iszero (pred 2))) })
(\ b . (let d = (succ "apple") in (let b = ({ c = false , c = "apple" }) in (pred (if b then 1 else b)))))
(\ d . (if (succ (if c then 0 else 0)) then (\ d . (false c)) else (pred 1)))
((let e = (pred "apple") in (iszero (c . c))) ((\ e . c) . c))
(({ c = (\ a . (b 2)) , b = (let b = (pred (\ e . "apple")) in (iszero "apple")) }) . c)
({ a = (if (pred "apple") then (if (iszero 1) then ({ c = 1 , b = b }) else (if b then (let a = false in a) else "apple")) else (\ b . (true false))) , c = ((iszero c) . e) })
({ a = (succ ({ c = (b 2) , a = (let a = ({ b = b , c = true }) in (1 c)) })) , b = ((\ d . (iszero (let b = 2 in 2))) . d) })
((\ c . (if true then true else true)) (if ({ b = true , b = 2 }) then (pred "apple") else (pred (if "boy" then a else "boy"))))
(succ (({ b = true , d = b }) (0 c)))
(if ((if true then false else (c . a)) . d) then (if (iszero ({ a = 0 , d = "boy" })) then (iszero (if true then (pred "boy") else 2)) else (\ b . 2)) else (pred ({ b = (if 0 then false else false) , b = ("boy" true) })))
(((succ (succ 2)) (\ c . (false (succ 0)))) ((pred 0) ({ c = (\ c . ("apple" a)) , d = (c . b) })))
(succ ({ b = (succ (if c then 1 else b)) , e = (true . c) }))
(if (\ c . (if a then (0 0) else true)) then (succ (iszero 1)) else (if (let d = (iszero "apple") in (pred "apple")) then (let b = (a . a) in ({ e = (let a = 2 in 0) , d = a })) else (pred (c 1))))
((\ c . (("boy" 0) (if b then c else c))) (succ ((pred false) ((\ d . 1) c))))
(pred (succ (succ b)))
(let e = (succ (iszero 0)) in (let a = (succ (c b)) in ((succ c) . b)))
({ d = (pred (if (let a = "boy" in b) then (true . a) else ({ e = "apple" , a = b }))) , e = ((a . c) (succ ((let a = 2 in c) (pred a)))) })
((if (succ (0 . c)) then (let b = (iszero a) in a) else (\ d . (pred b))) ({ d = (if a then "apple" else false) , c = (let e = "apple" in "apple") }))
(iszero ((if "apple" then b else a) (succ (a . e))))
(pred (let b = (\ c . (if b then 1 else 0)) in (\ c . (let c = (let e = "apple" in false) in ({ b = b , d = false })))))
((if (iszero "apple") then ("apple" a) else ("apple" false)) . c)
((("boy" . c) (pred 1)) . b)
(pred ((if (if true then "apple" else a) then ("apple" 2) else 0) (\ e . false)))
(({ e = ({ c = (if 1 then (b c) else false) , a = (\ b . true) }) , e = (succ (\ c . 0)) }) (pred (iszero (b . c))))
(succ ((pred true) (let c = (true "apple") in false)))
(\ b . ({ c = ({ b = ("apple" 0) , a = (1 . d) }) , e = (succ ({ e = c , d = c })) }))
(if (succ ((iszero false) true)) then (iszero ("apple" . c)) else ((succ 2) . b))
(succ (\ d . (true "apple")))
(if (((b . b) ({ e = (false a) , a = c })) . c) then (\ c . (succ (if 0 then "boy" else true))) else (succ (succ 0)))
(iszero (iszero (succ (0 (if "apple" then c else 0)))))
(((succ (if c then c else 2)) (iszero (if false then "apple" else c))) (\ a . (pred 1)))
(if (if ((let d = true in 2) . a) then (let b = "boy" in a) else (pred "apple")) then (if (if "apple" then b else "apple") then (let a = 0 in ("apple" false)) else (pred (if b then 1 else true))) else (pred ((pred "apple") b)))
({ d = (let c = ({ a = 2 , c = "apple" }) in (iszero ({ d = b , b = a }))) , b = ({ a = (\ d . (\ e . 1)) , d = (succ (pred ({ c = 0 , b = 1 }))) }) })
(succ (let d = (succ 2) in (if 2 then b else true)))
(if (iszero (succ (pred true))) then ((\ a . (pred (a . a))) . d) else (pred (let e = (pred c) in (pred "boy"))))
(((\ a . c) (iszero false)) . d)
(succ (let d = (succ (succ c)) in (\ c . ("boy" . b))))
(let a = ({ d = (let e = (iszero a) in (iszero false)) , a = ({ e = "apple" , c = "boy" }) }) in (iszero (if ({ a = "boy" , c = c }) then true else "apple")))
(let c = (let d = ({ d = (succ (\ a . c)) , d = (2 . a) }) in ("boy" . d)) in ((2 . b) . b))
(pred ((let c = a in b) (let c = (\ e . b) in a)))
(iszero (\ a . (if (succ "apple") then 1 else (succ 0))))
(succ ((succ ({ b = 0 , e = 1 })) (if 1 then (succ b) else 2)))
(let c = ((iszero "boy") . d) in (let a = (if ({ d = false , b = 2 }) then "boy" else 0) in ("apple" . a)))
(let b = (if ({ e = ("apple" . a) , d = "boy" }) then (false . a) else (let c = ({ d = 1 , e = b }) in b)) in (if ("boy" c) then ({ c = false , e = 0 }) else (let e = true in a)))
(\ d . ({ b = (\ a . "boy") , c = (pred false) }))
(succ (pred ((succ a) . e)))
(if ((\ b . 2) (if b then (pred "apple") else false)) then (iszero (\ e . ({ d = 0 , c = "apple" }))) else (iszero (if c then 0 else 1)))
(let b = (iszero (iszero "apple")) in (let e = (if a then "boy" else "boy") in (let d = ({ c = 1 , a = c }) in (iszero 0))))
((if (succ (if a then "boy" else b)) then (if ({ b = a , e = 0 }) then (2 1) else (iszero ({ e = true , e = b }))) else ((succ c) (pred 0))) . d)
(iszero ((succ ({ a = 2 , e = 0 })) (let d = (\ e . false) in 2)))
((pred (if (if "apple" then c else "apple") then ({ c = 0 , d = false }) else (let d = true in c))) . e)
(let e = ((({ b = (let e = b in "boy") , a = "boy" }) ((if b then 0 else "apple") ("apple" . c))) (({ c = (iszero c) , c = (1 . e) }) (pred true))) in (let b = (\ e . (let d = 1 in "apple")) in (iszero (\ a . c))))
(\ d . (if (pred 2) then (0 a) else (1 . e)))
((\ e . ({ d = (succ 1) , c = (if 0 then c else true) })) ((pred (\ b . "boy")) (pred (\ c . a))))
(succ ((\ d . (let d = 0 in 0)) (iszero (succ 2))))
({ c = (if (if 2 then 0 else (succ 0)) then ({ d = (let c = b in ({ e = 1 , a = 1 })) , d = (pred c) }) else (\ d . (succ a))) , a = ({ e = (a c) , e = (pred a) }) })
((succ (succ (if 0 then true else true))) . e)
({ a = (if (succ "boy") then (let c = ({ b = "apple" , a = "boy" }) in (a . d)) else (iszero (pred false))) , c = ((succ "apple") (\ c . a)) })
(let e = (pred (\ c . (if c then true else "apple"))) in (succ (succ true)))
(iszero ({ c = (0 . d) , a = ({ d = (let c = 1 in true) , d = (iszero "apple") }) }))
(succ (succ ({ a = b , e = 2 })))
(if (succ (let b = 1 in (a true))) then ((succ 0) . a) else (({ d = ({ b = true , c = c }) , c = ("apple" . d) }) ({ b = ({ d = true , b = 0 }) , b = ({ d = "apple" , b = ({ e = 2 , c = b }) }) })))
(let a = (if ((iszero "apple") . b) then (pred a) else (pred c)) in (if (\ b . (pred b)) then (("boy" . e) . a) else ((if true then 1 else c) . c)))
(pred (iszero (let d = (let b = b in (let b = b in 0)) in (2 1))))
(pred ((if 2 then "apple" else "boy") . b))
({ c = ({ d = (pred c) , e = (2 "apple") }) , a = ((iszero (pred c)) (\ d . (pred "apple"))) })
(((pred ("boy" a)) . b) (pred (succ "boy")))
((if ({ d = (2 . d) , d = (\ a . false) }) then ((let b = true in true) . c) else (succ c)) (let d = (pred (\ a . false)) in (pred (0 1))))
(pred (\ e . (pred ((b b) (\ c . "boy")))))
(\ e . (iszero (\ e . "boy")))
(\ b . (pred ("apple" . c)))
(if (if (a . a) then ({ c = 2 , e = true }) else (succ "apple")) then (iszero (0 . e)) else (iszero ({ c = (\ d . (succ true)) , e = (\ d . 2) })))
(pred ((iszero false) (\ a . false)))
(iszero (succ (succ false)))
(((pred 2) . a) . c)
(pred (iszero (iszero true)))
(iszero (iszero (succ (iszero "apple"))))
(iszero (\ c . ("boy" . a)))
(pred (((if ({ c = false , c = 0 }) then true else (iszero 2)) (iszero b)) (pred (\ c . b))))
(succ ((c c) . a))
(iszero (succ (iszero (succ a))))
({ d = (succ (2 . c)) , e = (iszero (if b then "apple" else a)) })
(\ e . ((iszero ({ b = c , b = 0 })) . d))
(((c . d) (2 . e)) . a)
(\ a . ({ a = (if 1 then "apple" else "boy") , b = (let a = "boy" in b) }))
({ a = (if (\ a . a) then (let c = false in a) else ({ d = (0 . c) , b = c })) , e = (succ ({ d = b , b = a })) })
(if (let c = (if (1 . a) then "boy" else b) in (let a = a in (let d = 2 in 0))) then ((((if 1 then "apple" else a) (pred 0)) (2 . b)) . e) else (if ((succ 1) . c) then (false true) else (pred 0)))
({ b = (\ e . (succ (pred b))) , c = (\ a . (iszero (succ "boy"))) })
(((iszero true) . d) (let d = (pred (let e = 0 in false)) in (iszero c)))
(if (if (pred (1 . d)) then (((true . d) . c) (iszero true)) else (iszero (succ 0))) then (let b = (let d = 2 in 1) in (iszero a)) else ({ c = ("boy" . c) , b = (0 . d) }))
((let e = (pred false) in (\ a . 0)) ((if "apple" then (iszero 1) else (\ e . "boy")) . c))
(iszero ({ d = (succ c) , c = (iszero 2) }))
((succ ((\ d . b) (succ "apple"))) (if (\ e . (\ a . c)) then (pred c) else (true . b)))
(pred (\ c . (\ e . (iszero c))))
(succ (\ d . (iszero (iszero 2))))
(pred ((let e = ({ b = b , b = "apple" }) in (({ b = b , e = "boy" }) (\ c . a))) . b))
(let c = (pred (if 0 then "apple" else 2)) in ({ b = (\ b . ({ d = 0 , d = 0 })) , b = (\ b . 0) }))
({ c = (if (2 . e) then (let b = (a 0) in (\ c . false)) else (iszero false)) , e = ({ c = (b . e) , e = (pred 2) }) })
(succ ({ b = (if false then (succ "apple") else (b b)) , c = (\ b . (0 c)) }))
((let d = (if (let e = true in a) then (iszero c) else (let d = 0 in (1 . a))) in ((\ a . (succ 2)) (if "apple" then "boy" else b))) . e)
(\ c . (if ("apple" . a) then ((2 1) . b) else (succ (if 0 then 1 else b))))
(if (pred (if (a "apple") then (2 b) else (b a))) then ({ e = ({ a = (\ c . 2) , a = (succ 2) }) , e = ((pred (pred "boy")) . b) }) else (let a = (if (\ c . a) then (pred (a 1)) else (succ 0)) in (\ d . (\ d . c))))
({ d = ((pred 1) . e) , a = ((a (succ a)) . c) })
((if (pred ((0 . e) . a)) then (c . e) else (succ (\ e . false))) (if (\ e . "apple") then ({ d = "boy" , d = 2 }) else ({ a = false , c = a })))
(iszero (\ a . ("apple" (iszero "boy"))))
(iszero (succ (let d = (succ false) in b)))
(pred (iszero (\ e . 1)))
(\ e . (let e = (iszero ({ e = true , b = true })) in ((iszero (iszero 2)) (iszero 1))))
(pred (iszero (succ c)))
(succ (pred (let b = 1 in (true a))))
(let e = ((let d = c in b) (pred "apple")) in ({ c = (2 . d) , a = (pred false) }))
((iszero (pred "apple")) . d)
(\ e . (pred (iszero ("boy" a))))
(succ (succ (c (if true then true else 1))))
((if (succ 1) then ({ a = (1 1) , d = ({ d = "apple" , d = "apple" }) }) else (\ b . false)) (\ a . (\ e . b)))
((\ d . (pred true)) (iszero (succ (b true))))
((if (iszero ({ e = 2 , b = 0 })) then (pred (\ a . "apple")) else (succ (c . a))) (iszero (iszero a)))
({ c = (pred (c "boy")) , c = (iszero (succ 2)) })
((let b = (if (true . b) then (iszero c) else (\ b . "boy")) in (\ d . "boy")) . b)
(let e = (({ e = ("apple" . d) , d = (\ a . false) }) . a) in (iszero (iszero (pred true))))
(pred (if (\ a . (iszero 1)) then ((let a = 0 in c) (let e = a in 1)) else (let b = (let e = b in c) in 2)))
(pred (if (\ b . "apple") then (iszero b) else (let c = false in b)))
(iszero ((let d = ({ b = false , a = a }) in c) ("boy" 1)))
({ a = ((iszero (if 0 then b else b)) . b) , b = (pred (let c = (succ 2) in "boy")) })
(((succ c) (a c)) . a)
(({ b = ((if 0 then b else b) . b) , e = (let e = (\ c . b) in (if c then 0 else false)) }) . a)
(if ((true . a) ({ b = (succ 2) , a = (0 c) })) then ({ b = (\ c . ((succ "apple") (iszero 0))) , d = (pred ({ e = "boy" , c = 2 })) }) else (pred (succ (let d = "apple" in "apple"))))
(\ b . (\ e . (let e = 0 in 1)))
((let e = (pred (\ b . 0)) in (pred (iszero (0 . c)))) . b)
(if ((succ ("apple" c)) ((pred 2) 2)) then (pred (let a = (false "boy") in "boy")) else (iszero (succ 2)))
((succ (iszero 0)) (\ a . (\ e . (if c then 2 else 1))))
(let a = (\ e . (\ b . b)) in (succ ("apple" (true false))))
(if (iszero ("apple" . c)) then (let a = (if "boy" then "apple" else false) in (let a = "boy" in a)) else (("apple" 1) (\ e . false)))
(if (let e = (let b = c in "apple") in (let b = false in 2)) then ((pred (let d = "boy" in 2)) (let a = (if true then c else false) in (let a = "apple" in a))) else (\ b . (pred ({ a = 2 , c = 2 }))))
((iszero (2 . c)) (succ (pred 1)))
(pred ((succ (iszero c)) . d))
(if (let c = (iszero "boy") in (pred (1 . a))) then ((pred 1) . e) else ({ c = (\ b . c) , d = (iszero true) }))
(((let d = 0 in 1) (b false)) . c)
(let e = ((succ (succ "apple")) . c) in ((pred (let a = b in "apple")) (pred (c . c))))
(let c = (\ b . (pred (\ e . false))) in (succ (pred ({ e = a , b = a }))))
(\ e . (\ c . (iszero (iszero "apple"))))
(let c = (\ b . (succ "apple")) in (iszero (\ d . (let a = b in ({ a = false , c = true })))))
(iszero (succ (let a = ({ c = 0 , e = c }) in (pred b))))
(\ c . (let b = (let a = (1 1) in (let e = 0 in b)) in (pred (let b = 0 in 0))))
(let c = (iszero (let d = "apple" in c)) in (pred (let d = (pred false) in "apple")))
(((let e = false in 0) (succ ("apple" a))) ((c . c) ({ e = false , c = a })))
(({ d = (pred a) , b = ({ b = (succ 0) , a = (let a = false in 1) }) }) . b)
({ c = (\ b . (((pred "apple") . e) ({ b = "boy" , a = a }))) , d = ((if ((pred "apple") . c) then (iszero (iszero true)) else (if b then true else "boy")) . b) })
(\ a . ((pred c) . a))
((iszero (iszero "apple")) . a)
(if (let d = ({ b = a , d = true }) in (0 . a)) then (iszero (0 (succ false))) else (if (let c = (\ b . a) in (let d = true in 1)) then ((pred c) . d) else (if (c . d) then (let c = false in 1) else ("apple" c))))
(iszero (({ b = (succ 0) , e = (if true then 2 else "boy") }) (pred ({ b = b , b = c }))))
(({ b = (1 2) , c = (succ true) }) . e)
(iszero ((succ 0) . b))
((iszero (if (if true then "boy" else false) then (succ c) else (b . b))) (succ ({ c = (let c = 1 in true) , b = (\ c . 0) })))
(let d = ((pred 0) (("apple" . c) c)) in ((1 . c) . b))
(({ d = (a . e) , c = ((true . a) (succ 2)) }) (pred (succ "boy")))
(\ e . (let d = (\ c . (if "apple" then 2 else "apple")) in (iszero 2)))
