let x=true in x
\x:Bool. x
(\x:Bool->Bool. if x false then true else false) (\x:Bool. if x then false else true) 
\x:Nat. succ x
(\x:Nat. succ (succ x)) (succ 0) 
\x:A. x
(\x:X. \y:X->X. y x)
(\x: X->X. x 0)
(\x: X->X. x 0) (\y:Nat. y)
let f=\x:A.x in f
(iszero (succ (succ (let d = a in 1))))
(iszero (succ (if (let e = 0 in a) then (b a) else (iszero false))))
(pred ((succ 1) (1 false)))
(succ (\ d : (Nat -> Bool) . (2 0)))
(pred ((if b then 1 else 0) (iszero false)))
(if (succ (\ e : Bool . false)) then (iszero (let c = 0 in c)) else (if (if (if b then b else 0) then (2 b) else 1) then (pred 2) else (let d = c in a)))
(\ c : (((Bool -> Nat) -> (A -> A)) -> ((A -> Nat) -> (C -> C))) . (let c = (succ (succ a)) in (let d = ((iszero false) true) in (a true))))
(iszero (\ c : (B -> B) . (succ false)))
(let c = (if (if true then (pred c) else (pred 2)) then (succ (\ a : Bool . c)) else ((a 2) (let c = true in b))) in (pred (iszero false)))
(pred (pred (if ((\ d : C . a) 2) then (if 2 then (a a) else (if 1 then c else a)) else (\ e : Nat . 1))))
(pred (\ d : ((B -> C) -> (Nat -> C)) . (\ b : (Bool -> A) . 2)))
(if (iszero (if false then c else 1)) then ((let b = 0 in b) ((\ d : A . 1) (pred true))) else (pred (iszero 2)))
(pred (iszero (iszero (2 c))))
(pred (iszero (iszero (let c = 2 in (iszero true)))))
(iszero (let d = (if (iszero b) then b else (false false)) in (iszero 2)))
(iszero (iszero (succ (0 1))))
(succ (\ d : (Nat -> C) . (if true then 2 else b)))
(if (pred (succ 0)) then (iszero (\ c : (C -> C) . false)) else (succ (pred 1)))
(\ e : ((B -> (C -> B)) -> (((B -> C) -> (Nat -> Bool)) -> (C -> A))) . ((succ a) (succ (c 2))))
(let c = (\ c : (C -> A) . (pred c)) in (let b = (true 1) in (pred (\ a : Bool . b))))
(if (\ b : (Bool -> (Nat -> A)) . (iszero (iszero true))) then (\ c : (Bool -> C) . (succ b)) else (succ (iszero true)))
(let e = (if (succ (pred a)) then (2 2) else (\ c : B . (succ c))) in (if (\ a : (B -> C) . 2) then (a 0) else (\ a : B . c)))
(succ (succ (iszero (\ b : B . 0))))
(\ c : ((Bool -> Nat) -> ((C -> B) -> (B -> B))) . ((iszero false) (let d = b in (let a = true in a))))
(if (let a = (if a then true else 0) in (iszero b)) then (((iszero 0) (\ d : C . b)) (if (pred true) then b else (pred c))) else (if (succ 0) then (iszero (let e = false in true)) else (iszero (0 c))))
(if (pred (let d = (pred 2) in (iszero 1))) then (\ d : (Nat -> C) . (if (pred false) then (\ d : Bool . 2) else (pred 0))) else (succ (\ d : Nat . false)))
(\ c : ((Bool -> Nat) -> ((A -> Bool) -> A)) . (if (let b = (if c then 0 else true) in (pred (let c = c in a))) then (succ (iszero a)) else (iszero false)))
(succ (let e = (if c then 0 else c) in (\ b : Bool . false)))
(if (\ c : ((Bool -> (C -> Bool)) -> ((C -> B) -> Nat)) . (iszero (iszero (1 true)))) then (iszero (\ e : C . b)) else (iszero (succ 1)))
(iszero (if (if (let a = true in c) then 2 else 1) then (\ c : A . 1) else (succ (let e = c in true))))
(pred (if (succ (iszero c)) then (let d = (succ (if 2 then 1 else false)) in (iszero a)) else (succ (if 2 then false else 0))))
(succ ((iszero b) (pred false)))
(\ d : ((A -> (A -> C)) -> (((Nat -> Bool) -> Nat) -> ((Bool -> Bool) -> (Bool -> Bool)))) . (if (if (let a = 1 in true) then (succ true) else 0) then (let c = 0 in 2) else ((if 2 then false else (false b)) (pred 1))))
(let a = (pred (if false then (pred true) else 2)) in (if (if a then 1 else c) then (pred 0) else (pred b)))
((\ b : (C -> A) . ((succ c) (\ d : A . false))) (iszero (\ e : C . (succ c))))
(iszero (\ d : (B -> Bool) . (let e = 2 in false)))
(succ (iszero (let a = (succ b) in (pred a))))
(iszero (\ e : ((Bool -> A) -> Nat) . (succ (iszero false))))
(\ b : (((A -> Nat) -> (Nat -> Nat)) -> ((B -> C) -> (Bool -> C))) . (iszero (iszero 0)))
(if (succ (if 1 then 0 else true)) then ((succ (\ a : Nat . false)) (\ d : ((Bool -> B) -> C) . (pred 1))) else (succ (\ d : Nat . (c true))))
(\ c : ((B -> B) -> (Nat -> Bool)) . (if (let d = true in 2) then (succ (succ a)) else (\ e : (Bool -> C) . false)))
(iszero (succ (let c = (pred true) in (\ a : C . 1))))
(((true 2) (false 0)) (if (iszero (let c = (0 a) in (iszero 1))) then (succ (c false)) else (iszero (succ 1))))
(if (\ e : (Bool -> A) . (let e = (2 1) in (iszero b))) then (let c = (true false) in (pred false)) else (if ((\ c : (C -> C) . c) (\ d : C . 2)) then (pred (succ 0)) else (\ a : Nat . false)))
(iszero (pred (succ (let c = false in c))))
(if ((let c = (pred false) in (let b = false in 0)) (\ b : (Nat -> Bool) . (iszero b))) then (pred (if 2 then a else false)) else (succ (\ a : (A -> Bool) . b)))
(succ ((c true) (pred c)))
(let a = ((succ 2) (succ false)) in (succ (succ true)))
((if (pred 1) then (succ b) else (succ true)) (\ d : (((A -> B) -> (A -> A)) -> (B -> Bool)) . ((if 2 then b else c) c)))
(((let b = 2 in 1) (pred a)) (let e = (b true) in (succ false)))
((succ (let b = (pred b) in (succ 1))) (if ((\ b : B . b) b) then (succ (iszero b)) else (iszero 2)))
(if (if (2 false) then (2 c) else (\ b : C . b)) then (succ (if (let d = 0 in false) then a else true)) else (let d = (iszero (1 0)) in (pred c)))
(iszero (iszero (if 1 then c else false)))
(succ (succ (pred (b 1))))
(if (iszero (\ c : A . 2)) then (\ e : (C -> Bool) . (if 1 then false else c)) else (iszero (pred (let b = (if c then true else 2) in (let d = 2 in 1)))))
(succ ((if (iszero 1) then 0 else true) (pred false)))
(pred (if (\ e : (Nat -> A) . b) then (pred (let c = c in false)) else (1 (\ b : C . true))))
(pred (pred (let a = 2 in false)))
((pred (let e = c in false)) (iszero (if (let d = 1 in 0) then c else (pred a))))
(\ b : (((Nat -> Bool) -> A) -> (Nat -> (B -> B))) . (if (succ 0) then (succ c) else (true true)))
(let a = ((\ a : C . 0) (succ a)) in (if (succ 0) then (2 b) else (false a)))
((iszero (pred true)) (\ e : ((C -> A) -> (Bool -> A)) . (\ a : (C -> B) . (pred c))))
((if (succ (iszero a)) then (\ c : (A -> Bool) . (succ c)) else (pred (\ d : Bool . true))) (pred (if (\ d : C . 0) then (pred a) else (if c then false else b))))
(\ d : (((B -> A) -> ((Nat -> B) -> (Bool -> Bool))) -> ((Bool -> (A -> B)) -> ((B -> B) -> (Bool -> Bool)))) . (pred (if b then 2 else b)))
(succ ((if (pred false) then (let a = 2 in true) else (a 0)) (\ c : ((B -> B) -> A) . (iszero 2))))
(pred (if (0 2) then (\ b : (C -> A) . (pred 1)) else (let e = (c 1) in (true (let e = true in b)))))
(succ (iszero (iszero 2)))
(iszero (if (iszero (pred 0)) then ((true 2) (2 b)) else (iszero false)))
(\ b : (((A -> Nat) -> ((Bool -> B) -> Nat)) -> (Bool -> Bool)) . (succ (let b = ((0 c) (succ c)) in (let a = 1 in 0))))
(iszero (let e = (iszero false) in (pred true)))
(let e = (let a = (if (b 2) then (iszero true) else 1) in (let b = 0 in a)) in ((let a = (pred 0) in b) (if (\ b : B . 0) then (let c = true in a) else (succ 0))))
(if (pred (let c = (\ a : Bool . a) in 0)) then (pred (succ 1)) else (iszero (\ c : Nat . (let c = 0 in 1))))
(iszero (if (pred 0) then (if (if (succ 0) then (succ c) else b) then (let c = (\ c : C . 1) in (succ 0)) else (\ c : Nat . 2)) else (succ 2)))
(iszero (iszero (if false then (if 1 then true else c) else (pred true))))
(\ e : ((A -> (Bool -> C)) -> ((Bool -> Nat) -> (A -> B))) . (iszero (succ 0)))
(succ (let e = (if (succ 0) then 2 else 2) in (pred (iszero 2))))
(let c = (iszero (pred a)) in (iszero (\ a : (C -> Nat) . (pred 1))))
(((succ (succ c)) (\ e : ((A -> Nat) -> Nat) . (false 2))) (pred (b 1)))
(succ (pred (succ 0)))
(let e = (pred (pred 1)) in (if (1 a) then (if false then false else 0) else (\ a : (Bool -> Bool) . b)))
(pred (\ e : (Nat -> C) . (succ (iszero (pred 1)))))
(let e = (iszero ((let e = 1 in true) (if 2 then 1 else 2))) in (let e = (iszero 0) in (succ c)))
(if (pred (pred c)) then (pred (\ e : (Bool -> A) . (succ 1))) else (\ b : (A -> C) . (succ 0)))
(iszero (if (iszero true) then (\ b : Nat . (\ d : Nat . a)) else (let a = 2 in b)))
(\ e : (((Bool -> Bool) -> (C -> A)) -> (((A -> A) -> Nat) -> (B -> B))) . (if ((c c) (pred a)) then (let e = (iszero (succ b)) in (if 2 then a else a)) else (succ 1)))
((if (if (\ d : A . false) then (if a then true else false) else (iszero 2)) then (pred 2) else (if (iszero a) then (succ 2) else (if 2 then a else 1))) (if (2 (succ 2)) then (pred b) else (if (if 1 then a else 2) then (succ 1) else (\ c : B . true))))
(succ (\ a : ((A -> B) -> (A -> C)) . (pred (let b = true in false))))
(\ a : ((B -> C) -> (A -> (B -> Bool))) . (iszero (pred (iszero (pred true)))))
(succ (if (\ a : (A -> A) . (let e = true in a)) then (\ c : (C -> (Nat -> A)) . (iszero 2)) else (pred (succ true))))
(iszero (succ (succ (\ a : Nat . false))))
(\ a : ((((C -> Nat) -> A) -> ((Nat -> Nat) -> A)) -> (B -> Nat)) . (iszero (pred 0)))
((pred ((succ a) (pred (iszero true)))) (let c = (\ d : C . (if false then b else c)) in ((succ false) c)))
(iszero (\ c : (((C -> B) -> (B -> Bool)) -> (Nat -> C)) . ((pred (pred a)) (if 2 then b else 0))))
(if (let a = (pred false) in (iszero true)) then (succ ((pred false) b)) else (\ c : ((Bool -> Nat) -> (Nat -> A)) . (iszero (let d = false in a))))
(let d = (if (let d = (iszero 0) in (iszero c)) then (succ (let a = true in (1 true))) else (succ (pred c))) in ((0 true) (pred 0)))
(\ b : ((C -> Nat) -> (A -> Nat)) . (\ a : (Bool -> B) . (let a = 0 in 1)))
(iszero ((\ c : Nat . a) (let b = (if 2 then 1 else c) in (\ a : C . 0))))
(\ c : ((Bool -> Nat) -> ((A -> Nat) -> C)) . ((let d = false in 2) (pred c)))
(if (pred (iszero (iszero 0))) then (\ e : ((Bool -> Nat) -> B) . (let c = 2 in b)) else (pred (succ (iszero true))))
(pred (if (succ (pred 1)) then (let a = 0 in (succ 0)) else (\ b : C . 2)))
(pred (succ (pred (\ d : C . 0))))
(pred (\ b : ((B -> (B -> B)) -> (Nat -> C)) . (let b = (pred true) in (let e = a in true))))
(let b = (if (pred a) then (iszero false) else (iszero a)) in (succ (pred 1)))
(let e = (let b = (\ c : (Nat -> C) . (if a then b else 2)) in ((\ a : Bool . a) (iszero c))) in (succ (succ 0)))
(let d = ((if false then 0 else c) (succ 1)) in (succ (let c = (succ a) in (if (\ b : Nat . b) then true else 2))))
(pred (pred (let c = b in (let c = 0 in a))))
(if (pred (\ b : (Nat -> B) . (iszero b))) then (\ e : ((B -> Bool) -> (B -> B)) . (\ a : B . (if 1 then true else true))) else (iszero (iszero (let d = b in c))))
(iszero (\ e : ((A -> C) -> (Nat -> A)) . ((\ c : B . a) (iszero 1))))
(pred (\ a : (B -> C) . (\ b : Bool . true)))
(pred (if (if 0 then false else 1) then (let a = true in b) else (iszero (1 false))))
(succ (\ a : ((Nat -> C) -> ((A -> B) -> A)) . (0 (iszero 0))))
((let e = ((\ e : (Bool -> C) . 1) (let a = (if 2 then a else a) in true)) in (\ d : A . (iszero b))) (pred (b (iszero 1))))
(succ (let b = (pred (iszero c)) in (if (succ true) then (\ a : B . 0) else (iszero true))))
(let a = (iszero (succ a)) in (\ b : ((A -> A) -> ((B -> C) -> (Nat -> Nat))) . (if false then c else false)))
(pred (\ b : ((C -> Nat) -> (A -> Nat)) . (\ c : B . 0)))
(succ (iszero (let d = (\ b : A . (\ b : C . c)) in ((true b) false))))
(let d = (iszero (\ e : Bool . a)) in (succ (pred 2)))
(\ d : (((B -> B) -> (A -> B)) -> ((Nat -> B) -> (B -> Nat))) . (if ((succ b) (pred c)) then (\ b : Nat . (succ true)) else (if (iszero 0) then (iszero (iszero 2)) else (a 2))))
(succ (iszero (let d = (let a = 1 in b) in (succ 0))))
(succ (pred (iszero (iszero 1))))
(succ (pred (succ false)))
(\ d : ((((A -> C) -> (B -> B)) -> (Nat -> Bool)) -> ((Bool -> (A -> Nat)) -> (B -> C))) . (succ (if b then 0 else (if b then b else 0))))
(pred ((\ d : Bool . b) (pred 0)))
(iszero (pred (pred (\ d : Nat . a))))
(let c = (pred (c true)) in (pred (if (iszero c) then 2 else (true false))))
(iszero (\ c : (C -> Bool) . (pred (pred c))))
(pred (((succ a) (\ c : Nat . false)) (succ c)))
(\ c : (((B -> A) -> (B -> B)) -> (Nat -> B)) . (pred (\ a : A . false)))
(pred (\ c : (A -> Bool) . (\ e : C . 2)))
(iszero (pred (a a)))
((iszero (0 2)) (pred (c a)))
((if ((if true then true else c) (if true then false else true)) then ((if false then false else a) true) else (pred a)) (iszero (succ b)))
(\ d : (((C -> Bool) -> (C -> B)) -> (((C -> Bool) -> (B -> C)) -> (C -> B))) . (pred (let a = (iszero true) in (pred false))))
(succ (iszero (\ a : (C -> Bool) . 2)))
(iszero (let a = (pred 0) in (succ a)))
(pred (\ a : (B -> C) . (\ c : Bool . 0)))
((if (if true then true else 2) then (true false) else (1 true)) (\ e : (Bool -> B) . (let d = 0 in 1)))
(iszero (pred (succ false)))
(pred (let c = (pred (iszero a)) in (\ e : (B -> A) . 0)))
((if (\ d : (A -> A) . (pred b)) then ((pred 0) (iszero 0)) else (let b = (b 2) in (iszero false))) (pred (pred (\ e : A . 1))))
(iszero (iszero (let d = (let c = true in (\ d : B . true)) in (let a = b in false))))
(pred (pred (if (succ (succ c)) then (let d = (a c) in (let a = true in 0)) else (succ (pred false)))))
((pred (\ c : (B -> B) . (pred a))) (succ (if (succ true) then (c a) else 0)))
(if (pred (succ (if 1 then b else 0))) then (pred (pred 0)) else (pred (iszero 2)))
(let b = (succ (pred 0)) in (pred (pred (pred c))))
(iszero (let d = ((pred b) (if 1 then (true 1) else (let b = 1 in c))) in (iszero 0)))
(pred (let c = (pred a) in (let b = true in false)))
((if (let a = false in c) then (\ a : Nat . 1) else (true 1)) (\ b : (C -> C) . (iszero (if true then true else false))))
(succ (\ a : (B -> Nat) . (let c = (pred true) in false)))
((let e = (pred false) in (iszero (if true then 1 else 1))) (if ((let d = 2 in a) false) then (let d = (if 2 then 1 else c) in 0) else (1 1)))
(if ((\ b : ((A -> Nat) -> A) . (iszero true)) (\ a : Nat . (b 0))) then (succ (b false)) else (if (false 1) then (if 2 then a else false) else (let e = (a 1) in (iszero a))))
(succ (iszero (\ c : (Nat -> B) . (\ a : Bool . true))))
(let e = (iszero (if (pred b) then (if 0 then 0 else b) else (if 0 then b else 2))) in (succ (\ b : Nat . (succ c))))
(iszero (succ (if 2 then (a a) else (pred 2))))
(succ (pred (let c = 1 in a)))
(pred (succ (\ b : B . a)))
(if (iszero (\ e : Bool . 1)) then ((iszero (let c = 0 in 0)) (succ b)) else (if (succ c) then (\ b : A . 1) else (iszero (iszero 2))))
(pred (pred (\ b : A . true)))
(let a = (pred (\ c : (B -> B) . (if a then true else 1))) in (\ a : (A -> A) . (pred 1)))
(if (let e = (let b = 2 in a) in (let c = 1 in (if 0 then c else 0))) then (\ e : (C -> (B -> Nat)) . (let d = 1 in true)) else (iszero (if false then (false 0) else true)))
(let e = (\ c : ((Bool -> C) -> (Bool -> C)) . (if (if 1 then b else b) then (if true then 1 else true) else (false 1))) in ((if (let c = a in false) then (succ a) else (iszero 1)) (let d = (succ a) in (pred 2))))
(succ (\ c : (B -> C) . (succ 2)))
((pred (if (iszero a) then (let c = a in 0) else false)) (if (succ 2) then (if false then (2 0) else (pred false)) else (iszero false)))
(\ d : ((B -> Bool) -> (C -> (B -> B))) . (succ (succ c)))
(if (pred ((if c then a else 1) (let a = true in 0))) then (let d = (succ (if c then true else true)) in (pred false)) else (\ b : ((B -> C) -> (Nat -> (C -> B))) . (succ (1 2))))
(let b = (if (iszero (let e = 0 in c)) then (pred (a 1)) else (if (\ a : Nat . 2) then c else 0)) in (pred (iszero (iszero 1))))
(let b = (let d = (\ d : A . 1) in (succ (iszero true))) in (succ (if (let b = 2 in false) then (\ a : Nat . a) else (succ false))))
(pred (succ (pred 0)))
((\ c : (C -> Bool) . (let d = b in 0)) ((pred (iszero b)) (pred 1)))
(iszero (succ (let d = (pred false) in (succ (\ e : Bool . false)))))
(let c = (let e = ((if true then b else true) (succ (succ b))) in (iszero (iszero b))) in (pred (iszero (1 1))))
(let e = ((pred (let d = (if 0 then true else 2) in c)) (succ (\ c : B . (if c then false else false)))) in (succ (false (\ b : Nat . b))))
(iszero (let a = (succ 0) in (pred (if false then b else 1))))
(\ d : ((A -> Bool) -> ((B -> Bool) -> (Bool -> Nat))) . (pred (if c then a else c)))
((if (if 1 then b else true) then (\ c : (C -> Bool) . (iszero false)) else (pred c)) ((pred (succ 0)) ((\ d : Nat . a) (if c then true else true))))
(pred ((if ((let a = 1 in 0) false) then (succ (pred 2)) else (if 0 then a else 1)) (pred (\ b : (A -> Nat) . (succ false)))))
(iszero (if (pred (succ b)) then (succ (let d = c in (c b))) else (iszero (if (succ 2) then 1 else b))))
(if (if (if (pred c) then (pred 1) else (succ 1)) then (iszero true) else (let e = (false a) in (\ b : A . c))) then (\ d : ((Nat -> B) -> (Nat -> C)) . (\ e : (Bool -> (C -> B)) . (iszero false))) else (if (iszero (pred true)) then ((iszero 2) (iszero a)) else (pred c)))
(iszero (if (iszero true) then (pred a) else (iszero a)))
(succ (iszero (if (iszero true) then (pred c) else (succ (2 0)))))
((pred (\ b : Bool . false)) (pred (\ c : (Nat -> Nat) . 2)))
((succ (if 0 then (if 1 then b else false) else false)) ((if (succ 1) then (if (\ a : C . 1) then (let a = 1 in 1) else (succ a)) else (iszero 2)) (pred (succ 2))))
(\ d : (((Bool -> (Bool -> Bool)) -> (A -> Bool)) -> ((A -> B) -> C)) . (iszero ((false false) (\ d : (C -> Bool) . 1))))
(iszero (\ d : (((Bool -> B) -> Nat) -> (C -> B)) . (let d = c in b)))
(\ a : ((A -> B) -> (Nat -> Nat)) . (iszero (if a then (\ c : A . false) else (iszero true))))
((let a = (if (let e = 2 in true) then (if 0 then true else false) else (iszero 0)) in (\ d : (Nat -> Nat) . (\ e : C . false))) ((let a = (1 c) in 1) (succ (pred b))))
(iszero ((\ b : Nat . 2) (\ b : C . 2)))
(pred (iszero (if (iszero b) then false else (pred 1))))
(iszero (iszero (false 0)))
(\ a : ((((A -> B) -> (C -> A)) -> (Nat -> Bool)) -> (((Nat -> C) -> Nat) -> (C -> Nat))) . ((iszero (pred (1 b))) (let e = (a b) in (let d = true in b))))
(iszero (pred (let b = false in (false 1))))
(let a = (succ (pred 2)) in ((let a = b in 2) (let b = a in a)))
(succ (iszero (if (if 1 then 0 else c) then (2 false) else (iszero a))))
(\ a : (((C -> B) -> (A -> B)) -> ((Nat -> B) -> Bool)) . (let d = ((if 1 then false else b) (iszero b)) in (iszero (if b then a else (if b then 0 else c)))))
(succ (pred (let a = (\ d : C . true) in (succ true))))
(\ b : ((Nat -> (B -> Nat)) -> ((C -> B) -> (Bool -> Bool))) . (if (b true) then (iszero c) else (let b = 1 in 2)))
((succ (iszero false)) (let e = ((pred 0) 0) in (let e = b in false)))
(succ (succ (succ c)))
(pred (let a = ((true 2) (succ (iszero b))) in (\ a : Bool . (if a then 1 else b))))
(succ (let d = ((iszero false) (succ 2)) in (if (pred (iszero false)) then (\ a : B . a) else (if 2 then true else false))))
(if (succ ((true b) (c (pred 1)))) then (iszero (succ c)) else (iszero (pred c)))
(\ a : (((Nat -> Nat) -> (C -> C)) -> ((A -> Bool) -> (B -> Nat))) . (\ c : (C -> B) . (\ c : Nat . (pred a))))
(iszero (\ d : (((Bool -> C) -> (Bool -> A)) -> ((B -> A) -> (Nat -> C))) . (iszero 0)))
(pred (succ (c false)))
(let e = (let d = (\ b : Bool . c) in (succ 2)) in (succ (\ e : Bool . c)))
(iszero (pred (pred a)))
(pred (if (if a then c else false) then (pred b) else (\ d : B . 1)))
(pred (if (let a = (iszero (let d = c in a)) in (if b then 2 else (if 2 then false else 0))) then ((\ a : Nat . a) (iszero 0)) else (let e = (let e = b in c) in (succ b))))
(succ (succ (\ a : B . 2)))
(iszero (\ a : ((C -> Bool) -> (A -> Nat)) . (\ b : (B -> Nat) . 0)))
(if (\ d : (((C -> A) -> (B -> Nat)) -> ((B -> Nat) -> (C -> Nat))) . ((iszero a) (succ 0))) then (succ (false 1)) else (pred ((let a = false in true) (\ e : (Bool -> A) . (false 2)))))
(succ (\ c : (((Nat -> B) -> (C -> C)) -> (Bool -> C)) . (\ e : (A -> Bool) . (iszero (iszero 2)))))
(succ (let c = (c (\ b : A . a)) in (\ b : ((C -> A) -> C) . (iszero 0))))
(\ d : ((((Nat -> A) -> Bool) -> (A -> C)) -> ((A -> B) -> (C -> C))) . (iszero (\ b : Nat . (if a then 2 else 1))))
(iszero (let b = (\ d : (B -> B) . 1) in (let b = 0 in (let a = c in true))))
(iszero (\ d : (A -> C) . (let b = a in (pred c))))
(pred ((succ (2 2)) (let a = 2 in 0)))
(let a = (\ c : (C -> C) . (succ 0)) in (\ e : ((Nat -> A) -> (B -> (Bool -> A))) . (let c = 2 in a)))
((if (if 1 then c else b) then (let c = (succ (pred a)) in (if false then 0 else false)) else (pred (iszero (succ a)))) ((if (\ d : A . c) then false else (succ 2)) (pred (succ true))))
(let a = (if (\ c : C . b) then (iszero a) else (0 b)) in (if (iszero 2) then (iszero false) else (iszero a)))
(let d = (iszero (if true then c else true)) in (\ b : ((B -> A) -> (Nat -> Nat)) . (\ e : (Nat -> (B -> Nat)) . (succ a))))
(let c = (if (succ (if (iszero a) then (a false) else (if 2 then a else c))) then (iszero (\ d : A . 0)) else (if (succ c) then (0 true) else (succ c))) in ((pred (\ e : C . true)) (let c = b in 0)))
(\ a : ((Nat -> A) -> ((A -> B) -> C)) . (succ (2 (let c = false in false))))
(iszero (\ b : (Bool -> A) . ((\ b : Nat . 1) (iszero 2))))
(\ d : ((C -> (C -> C)) -> ((B -> Bool) -> A)) . (iszero (if 1 then 2 else c)))
((iszero (let e = b in b)) (iszero (if a then false else 2)))
(succ (if (succ (succ (iszero 2))) then (iszero (iszero (\ e : A . c))) else (\ d : ((Bool -> B) -> (Nat -> B)) . (\ c : B . 2))))
(pred (iszero (if true then c else (\ c : A . 0))))
(pred (pred ((iszero 2) 1)))
(iszero (let d = (if 0 then b else 0) in (succ 1)))
(pred (if (iszero 0) then (let b = 0 in c) else (pred 2)))
(let b = (if (iszero 2) then (if a then 2 else true) else (pred 1)) in (succ (\ b : (C -> Nat) . (\ e : B . false))))
(pred (iszero (succ ((if 2 then 0 else true) (\ b : A . a)))))
(if (succ (let e = (pred 2) in b)) then ((iszero 0) (if 1 then 0 else c)) else (pred (let d = a in (succ true))))
(pred (let a = (succ (succ b)) in (iszero c)))
(\ d : ((((Nat -> Bool) -> C) -> (C -> A)) -> (Nat -> Bool)) . (\ e : (C -> (Bool -> Bool)) . (\ b : C . (\ d : Nat . false))))
(succ (let b = (((2 c) (let e = 1 in 0)) (iszero false)) in (succ (pred b))))
(if (succ (\ e : (Bool -> Bool) . (let b = 0 in b))) then (pred (0 (iszero false))) else (if (succ 2) then (if b then 0 else c) else (if (succ a) then 2 else (false false))))
(if (\ c : ((A -> Nat) -> Bool) . (if (iszero true) then false else c)) then (succ (iszero false)) else (\ e : (((A -> Nat) -> Nat) -> (A -> A)) . (pred true)))
(let c = (iszero (pred 0)) in (if (\ e : (C -> A) . a) then (if 0 then 2 else a) else (\ e : C . b)))
(iszero (pred (\ b : (A -> Bool) . (succ true))))
(\ a : ((Nat -> B) -> (C -> B)) . (\ c : (Nat -> (C -> C)) . (c b)))
(if (if (if (if 0 then false else 2) then (succ 1) else (pred c)) then (iszero (pred a)) else ((let c = 2 in 0) (iszero true))) then (let b = (if (pred 1) then (let b = b in b) else false) in (\ d : Bool . b)) else (iszero (succ (\ e : Bool . false))))
(\ b : ((Bool -> C) -> ((A -> A) -> Bool)) . (let d = (iszero 1) in (a 2)))
(pred (let c = (let e = (pred 2) in b) in (pred (if 1 then true else a))))
(let d = (if ((\ c : Nat . 1) (let c = 2 in 0)) then (succ b) else (iszero 1)) in (iszero (pred (iszero 1))))
(if (\ d : (C -> A) . (let e = (\ b : C . true) in (if false then b else c))) then (succ (if (\ e : B . a) then (if false then false else true) else b)) else (if ((iszero false) 1) then (iszero (pred false)) else (iszero (iszero b))))
(iszero (iszero (2 2)))
(iszero (iszero (let c = (0 2) in (pred 1))))
(if ((iszero (\ e : C . false)) (iszero (1 a))) then (succ (let d = (1 0) in (let c = (\ d : B . true) in (let b = 1 in 1)))) else (succ (iszero true)))
(let a = (succ (pred (iszero a))) in (pred (pred (succ false))))
(iszero (iszero ((let c = (succ false) in (b a)) (\ d : Nat . (if c then 2 else b)))))
((if (pred a) then (let b = 1 in 1) else (pred 2)) (let a = (true 2) in (iszero (0 b))))
(\ c : ((Nat -> C) -> (Bool -> Nat)) . (succ (succ (if 0 then b else 1))))
(\ a : ((Bool -> Bool) -> ((C -> Nat) -> Nat)) . (\ c : (C -> Nat) . (pred 2)))
(iszero ((if 1 then (\ c : A . 1) else b) (iszero (a 1))))
(\ e : (((B -> C) -> (A -> Nat)) -> (B -> C)) . ((pred (succ a)) (iszero (1 1))))
((succ (pred (if 2 then true else 2))) ((iszero (\ d : A . a)) (if c then a else c)))
(if (let e = (iszero 2) in (pred false)) then (succ (pred (let b = 1 in true))) else (let e = (\ b : Nat . 1) in (pred (if c then 1 else false))))
(pred (\ a : (B -> A) . (pred false)))
(if ((iszero (if 2 then false else false)) (let b = 2 in (let b = a in false))) then (\ b : (Nat -> B) . (succ 0)) else (let b = (iszero (succ 2)) in (b false)))
(iszero (let a = ((\ c : C . a) (1 0)) in (let a = (pred c) in (iszero b))))
(if (succ (let a = true in (if 2 then false else c))) then (let c = (let a = 2 in 0) in (\ c : A . 0)) else (succ (let c = (pred c) in c)))
(\ a : (((Bool -> A) -> A) -> ((A -> Bool) -> (C -> Bool))) . (let e = ((let a = b in c) (if c then 1 else 0)) in (\ c : ((Bool -> A) -> (C -> Bool)) . (let e = c in 0))))
(pred (\ c : ((C -> Bool) -> (B -> Nat)) . (succ (pred c))))
(let a = (iszero ((\ e : A . 1) b)) in (succ (succ false)))
(succ (succ (pred (succ b))))
(pred (succ (c true)))
(pred (iszero (iszero (\ b : B . a))))
(let e = (iszero (succ a)) in (succ (succ (iszero 0))))
((if (let b = 2 in false) then (pred (succ c)) else (pred c)) (if (\ c : (Bool -> Nat) . (succ a)) then (let e = (succ a) in (if 1 then 2 else true)) else (let d = (let c = (pred false) in 2) in (succ (let c = false in false)))))
(let a = (iszero (succ (succ 1))) in ((pred (let b = b in 2)) (let d = (iszero c) in 1)))
(let e = (let a = (iszero true) in (let c = 2 in true)) in (pred ((\ c : Bool . b) false)))
(\ b : (((Nat -> Bool) -> (Nat -> A)) -> ((Bool -> A) -> A)) . (pred (if (succ (if b then c else c)) then (iszero 1) else (pred 0))))
((pred (iszero true)) (succ (2 (succ 1))))
((iszero (\ c : ((C -> Nat) -> (Bool -> Nat)) . (pred 2))) (let e = (pred (succ false)) in ((if 1 then b else false) false)))
(let c = (if (\ e : (C -> B) . c) then (pred 1) else (succ false)) in (succ (1 (succ c))))
((let d = (if 1 then 0 else c) in (\ e : B . true)) (iszero (iszero 0)))
(succ (let c = (let a = false in a) in (\ e : (Nat -> C) . (pred c))))
(((let d = b in (succ c)) (iszero false)) (iszero (if (\ e : Nat . true) then (pred 2) else a)))
(iszero (if (iszero a) then (let d = 0 in 2) else (if true then a else 0)))
(succ (pred (if (if 0 then true else a) then (iszero (succ 1)) else (iszero a))))
(iszero ((succ (\ c : B . b)) (iszero 1)))
(let e = (succ (a c)) in (succ (succ (succ 1))))
(pred (let c = (if (if a then c else false) then c else a) in (let e = (iszero c) in (let c = false in false))))
((succ (iszero false)) (pred (pred b)))
((\ b : (((C -> C) -> Nat) -> (B -> B)) . (iszero (iszero 0))) (\ b : (Bool -> (B -> Bool)) . (0 1)))
((succ (\ a : (Bool -> A) . 2)) (let b = (if 1 then b else a) in (let c = true in true)))
(let a = ((let d = b in a) (succ (if c then 1 else b))) in ((succ c) (let d = (iszero b) in (iszero b))))
(succ (\ c : ((A -> (C -> C)) -> (Bool -> Nat)) . (iszero (succ c))))
(iszero (pred (if 0 then a else true)))
(\ e : (((A -> Bool) -> (A -> C)) -> ((Nat -> Bool) -> Bool)) . (pred (let b = (false c) in (iszero (let e = 2 in true)))))
((pred (pred (let b = (if b then c else 2) in c))) (if (succ (pred a)) then (\ e : Nat . true) else (succ false)))
(if (succ (iszero (\ d : A . c))) then ((iszero (\ b : (C -> B) . (if true then c else true))) (if 2 then 2 else (let a = b in c))) else ((let b = 0 in 1) (succ true)))
(succ (let b = (iszero (pred 0)) in (\ c : (C -> C) . (succ b))))
(pred (succ (\ d : Nat . a)))
(\ e : ((((Nat -> A) -> (C -> Nat)) -> ((B -> Bool) -> (A -> B))) -> (Nat -> (B -> Nat))) . ((\ c : B . c) (pred 0)))
((succ (iszero (if (if 0 then a else true) then (iszero a) else (iszero false)))) (if (let b = (\ b : B . b) in b) then (succ false) else (let c = 0 in 1)))
(iszero (if (\ a : Bool . c) then (pred 1) else (pred (let e = true in true))))
(if (iszero (iszero (\ a : C . a))) then (if (succ (iszero false)) then (iszero (0 c)) else (\ c : (Nat -> B) . (let c = (if true then true else b) in (\ d : Bool . c)))) else (if (\ a : B . c) then (\ c : (Nat -> Nat) . (\ e : A . false)) else (pred 2)))
((iszero (succ (iszero 0))) (let d = (1 true) in (pred 2)))
((iszero (pred 1)) ((let a = (if 0 then 1 else a) in (if c then (iszero c) else b)) (if (true false) then (iszero (\ b : B . c)) else (1 2))))
(let e = (pred (\ a : Nat . 2)) in (if (succ a) then (succ (pred a)) else (\ a : ((C -> Nat) -> C) . (succ (\ d : C . 2)))))
(\ a : (((C -> C) -> (A -> A)) -> (((A -> A) -> Nat) -> (C -> C))) . (\ c : ((Bool -> Nat) -> B) . (if 1 then b else 0)))
((pred (let e = false in true)) (iszero (\ e : (B -> C) . b)))
((if ((\ d : Bool . (pred true)) (iszero (if 1 then c else 2))) then (\ c : (Bool -> B) . (\ a : A . 2)) else (if 0 then (if 0 then true else b) else (succ a))) (\ d : ((C -> Bool) -> (B -> C)) . (succ (if c then true else a))))
(let b = (pred (succ b)) in (\ e : (C -> Bool) . (if (pred 1) then (iszero 2) else c)))
(\ c : ((Nat -> Bool) -> (B -> A)) . ((if (0 1) then 0 else (pred false)) (\ c : A . (if 2 then true else c))))
(let b = (pred (pred (let c = true in 0))) in (((if 1 then false else a) (\ a : Nat . false)) ((\ e : C . b) (\ a : A . b))))
(pred (pred (let e = true in c)))
(if (let b = (iszero (iszero c)) in (b 2)) then ((pred (iszero (pred 1))) (let e = (let e = a in 1) in ((if c then c else 2) c))) else (iszero (iszero (let b = (succ 1) in (iszero false)))))
(let a = (succ (let c = (pred 1) in a)) in (let a = (if 2 then false else 1) in (\ e : C . (false false))))
(if (pred (iszero (\ a : C . false))) then (\ c : (Nat -> Bool) . ((pred (1 1)) (iszero b))) else (succ (iszero c)))
((succ (succ true)) (iszero (\ d : B . 2)))
(if (\ b : ((Nat -> C) -> (Nat -> A)) . (true 0)) then ((c b) (iszero (pred b))) else (let e = (let d = (if 0 then true else false) in (false b)) in (pred (let c = true in false))))
(iszero (succ (if c then 0 else 1)))
(let d = (pred (succ c)) in (iszero (let e = 1 in b)))
(succ (iszero (if 1 then 0 else 2)))
((let b = (succ (if true then 0 else true)) in ((succ false) a)) (pred (a true)))
(pred ((pred (succ a)) (let d = (\ d : C . true) in (\ a : B . false))))
(if (if (\ b : C . 1) then (if a then (let c = b in 0) else 1) else (pred false)) then (succ (succ a)) else ((pred (succ c)) (pred 0)))
(pred ((let e = (succ 2) in c) (pred a)))
(pred (if (succ 2) then (let d = true in (succ b)) else (iszero b)))
(\ b : (((Nat -> C) -> ((Bool -> A) -> (Nat -> C))) -> ((B -> B) -> (Nat -> Nat))) . ((succ 2) (iszero false)))
(pred ((if (let b = b in c) then (1 b) else (succ 0)) (iszero (pred false))))
(if ((\ e : B . a) (pred (pred true))) then ((let d = false in a) (if (pred 1) then (\ a : Nat . 1) else (0 (\ a : A . 2)))) else (succ (iszero 0)))
(if (if (iszero false) then (if true then 1 else 0) else (iszero (let a = c in true))) then (succ (let e = (\ b : Bool . 0) in (\ a : B . c))) else (iszero (\ a : ((B -> B) -> (Bool -> C)) . (pred false))))
((((iszero 0) a) (succ (let a = b in a))) (succ (\ e : (A -> Nat) . (succ a))))
(if ((\ a : Bool . false) (\ e : A . a)) then (let a = (\ d : ((Nat -> Nat) -> Nat) . (1 0)) in (\ d : (Nat -> B) . b)) else (if (iszero c) then (if true then b else (let d = c in b)) else (pred 2)))
(iszero (succ (2 2)))
((succ (succ c)) (iszero (succ (if 2 then 2 else b))))
(succ (succ (let c = (iszero 2) in (succ false))))
(if (let e = (false a) in (if (pred 0) then true else (succ a))) then (pred (pred (iszero c))) else (let e = (if a then a else b) in (succ (succ true))))
(\ c : ((Bool -> B) -> (Nat -> Bool)) . (pred (let e = b in (\ a : Nat . 1))))
((let e = (pred (pred true)) in (pred (\ a : (A -> A) . (if b then 0 else a)))) (\ d : (A -> Bool) . (let a = 1 in c)))
(\ d : ((((Bool -> B) -> (C -> B)) -> (Nat -> B)) -> (Nat -> B)) . (succ (if (iszero false) then 2 else 1)))
((\ a : (Bool -> Bool) . (\ d : Bool . a)) (let a = (succ (iszero 0)) in (let a = (pred (\ a : A . c)) in (pred a))))
(let d = (if (if 0 then (succ b) else 1) then (pred (let c = (succ 0) in (iszero true))) else (let d = (if (if true then 0 else 0) then (2 true) else a) in (succ true))) in (pred (iszero (let c = true in true))))
(succ (succ (a 1)))
(\ e : (((B -> B) -> (B -> Nat)) -> ((Bool -> B) -> (Nat -> C))) . (\ b : (B -> A) . (pred b)))
(\ e : ((Bool -> (Bool -> C)) -> ((C -> A) -> (Bool -> A))) . (pred (pred (iszero (let d = a in b)))))
(let c = (succ (iszero 1)) in (if (if (pred false) then (iszero 2) else (let b = 1 in 1)) then (\ c : (Bool -> C) . (let e = 2 in true)) else (\ e : ((B -> Nat) -> C) . (succ (iszero false)))))
(pred (\ e : (Nat -> Bool) . (\ d : Nat . (true true))))
(let a = (let a = (let e = 1 in 1) in (\ b : A . 2)) in (pred (iszero true)))
(if ((let d = (pred 1) in (iszero b)) (iszero 2)) then (let d = (iszero (\ e : C . a)) in (a 0)) else (pred (if 2 then b else b)))
((pred (iszero 2)) (iszero ((if 2 then b else 2) 1)))
(succ ((succ 1) (if 1 then false else 0)))
(if (let c = (\ d : Bool . c) in (iszero 0)) then (iszero (iszero (pred 1))) else (succ (pred 1)))
(((iszero (iszero b)) (\ b : B . (if b then true else false))) (\ c : ((Nat -> B) -> (Nat -> B)) . (let b = 0 in (b 0))))
(\ c : ((Bool -> A) -> (Bool -> B)) . (iszero (iszero (let e = false in b))))
(let c = (iszero (let e = 0 in a)) in (pred (\ d : ((Nat -> B) -> (C -> Nat)) . (let e = (if b then b else 2) in false))))
(iszero (\ a : (A -> (Bool -> Bool)) . (pred 2)))
(iszero (succ (succ c)))
((if (\ d : (Bool -> (C -> Nat)) . (pred 2)) then (iszero (pred a)) else (\ c : (A -> Bool) . (pred 0))) (pred (let e = 0 in c)))
(pred (iszero (0 true)))
(pred (if (if c then 0 else a) then (iszero 2) else (\ b : (C -> B) . c)))
((pred (true (iszero 0))) (if (((let d = true in 1) (pred 1)) (if false then false else 0)) then (iszero (iszero (1 false))) else (succ c)))
(pred (iszero (succ (if 2 then c else false))))
(iszero ((\ a : Nat . 1) (iszero (if c then c else 2))))
(let c = (iszero (false 2)) in (if (iszero a) then (1 true) else (succ c)))
(if (succ (iszero c)) then (\ b : (Nat -> Bool) . (a (iszero 0))) else (if (iszero (pred false)) then (if (pred a) then (\ e : (C -> B) . b) else (iszero 2)) else ((pred 1) a)))
(\ d : ((A -> (C -> B)) -> ((Nat -> B) -> (Bool -> C))) . (pred (succ 1)))
(if (iszero (\ a : A . false)) then (if (\ e : B . 1) then (if false then a else true) else (let c = (true 2) in (\ d : B . a))) else (iszero (b (0 b))))
(iszero (succ (if true then c else 1)))
(\ a : ((C -> Bool) -> ((Bool -> A) -> (B -> Bool))) . (succ (pred b)))
(iszero (let b = (iszero 2) in (\ a : Nat . 0)))
(\ b : ((A -> B) -> (Nat -> C)) . (\ e : (C -> Nat) . (pred c)))
(iszero (iszero (if (b b) then (let c = true in 2) else (pred false))))
(\ e : (((B -> C) -> (Nat -> Nat)) -> (B -> Bool)) . (if ((let b = b in b) (iszero (let b = false in b))) then (let c = (true 1) in (let b = b in true)) else (iszero 1)))
((pred (iszero b)) (if (if (\ b : A . true) then (let b = 0 in true) else (if true then (pred a) else 0)) then ((iszero false) (succ c)) else (succ (\ d : A . c))))
(succ (iszero (succ (\ d : B . 1))))
(iszero (pred (if b then a else a)))
(iszero (\ b : (A -> B) . (succ (false false))))
(succ (\ c : (((C -> C) -> (B -> B)) -> (B -> (C -> Nat))) . (let a = true in b)))
(let e = (let a = (iszero 0) in (iszero b)) in (let d = (2 1) in (succ false)))
(pred (pred (succ c)))
(\ c : ((Bool -> B) -> ((B -> A) -> (A -> C))) . (let d = ((\ a : Bool . 0) (let a = 1 in true)) in (\ a : (A -> Nat) . (iszero 0))))
(iszero ((\ a : B . c) (pred c)))
(let a = (let d = (succ (iszero true)) in (pred (succ 1))) in (pred (if 1 then 0 else a)))
(iszero (\ d : (A -> C) . (let b = 2 in 1)))
(\ e : (((Bool -> A) -> ((A -> Bool) -> Nat)) -> ((Nat -> A) -> (C -> B))) . (if (if (if (iszero true) then c else (succ 0)) then (let d = 2 in a) else (let c = 2 in a)) then (\ c : A . a) else (iszero 1)))
(\ a : ((((Bool -> Nat) -> (B -> Nat)) -> (Bool -> (A -> C))) -> ((Bool -> B) -> Nat)) . (iszero (succ (pred c))))
(if (if (\ c : (A -> Bool) . (succ 2)) then (let e = (2 2) in (\ a : Nat . (succ 2))) else (\ a : (C -> Nat) . (let d = 0 in a))) then (pred (iszero (let b = false in b))) else (let d = (succ 1) in (iszero 2)))
(iszero (succ (\ c : (C -> Nat) . (\ a : (C -> Bool) . (pred 1)))))
(pred (iszero (if a then (true c) else (let c = a in c))))
(let a = (if (if b then c else 1) then (\ c : B . 2) else (pred a)) in (pred (if true then (0 0) else false)))
(\ d : ((A -> B) -> (Nat -> C)) . (succ (succ 2)))
(if (\ d : ((C -> Bool) -> B) . (0 1)) then (pred (let c = (iszero a) in 1)) else (pred (let d = (iszero (\ e : A . 0)) in (let d = true in c))))
(\ b : (((Bool -> B) -> C) -> (((B -> Bool) -> (Nat -> A)) -> (B -> (Bool -> Bool)))) . (pred (if true then (if true then a else c) else 1)))
(\ a : (((A -> A) -> B) -> (((Bool -> Nat) -> (A -> C)) -> (A -> C))) . (iszero (iszero 1)))
(succ (if (\ d : Bool . (if 1 then false else c)) then (let a = c in 1) else (\ a : Nat . false)))
(iszero (if (pred (if c then true else false)) then (pred b) else (\ e : A . true)))
(pred ((\ e : C . true) (succ 1)))
(let c = (pred (\ a : B . true)) in (iszero (\ c : Bool . 0)))
(\ b : (((A -> C) -> (C -> A)) -> ((Nat -> Bool) -> (B -> A))) . (succ (iszero b)))
(let e = (succ (pred b)) in (pred (if c then 2 else (iszero b))))
(succ (if (succ true) then (pred 2) else (2 2)))
(pred (succ (pred (pred 2))))
(\ c : (((Nat -> Bool) -> (Nat -> Bool)) -> ((A -> Nat) -> (Bool -> C))) . (pred (pred 0)))
(let c = (if (let e = b in a) then (let d = c in 0) else (if b then (if false then 1 else true) else true)) in (iszero (\ e : Nat . (succ 2))))
(succ (let d = (pred (succ b)) in (succ ((pred a) (\ b : B . b)))))
(succ (iszero (((\ a : B . true) (let c = b in true)) (\ b : Bool . (iszero c)))))
((\ e : ((B -> (Nat -> Bool)) -> (Bool -> A)) . (iszero ((succ 2) 2))) (let b = (if b then (succ a) else (a false)) in (pred (succ b))))
(if (iszero (\ a : (Nat -> A) . (true 2))) then (pred (\ d : (C -> C) . (pred a))) else (succ (pred (if true then 2 else 1))))
(pred (pred (0 a)))
(((let d = 0 in false) (if true then b else c)) (succ (if a then b else c)))
(\ e : ((A -> (Nat -> Bool)) -> ((B -> A) -> (B -> Nat))) . (succ (\ e : Bool . true)))
((pred (succ true)) ((let c = (iszero 2) in ((if b then 1 else false) 0)) (\ d : (Nat -> C) . b)))
(succ (succ (iszero true)))
(((let a = c in 0) (if c then (iszero true) else (let d = 0 in 0))) (iszero (succ 0)))
(if (pred (iszero (if false then (let c = b in true) else (\ e : A . true)))) then ((succ true) (a (pred 0))) else (if (succ a) then (true true) else (pred c)))
(\ e : (((Nat -> Nat) -> (A -> Bool)) -> (B -> Bool)) . (if (\ e : B . false) then (succ c) else (succ (let c = false in false))))
((\ c : (C -> Bool) . ((\ c : Bool . c) (\ b : Nat . b))) (let c = (\ b : (C -> A) . (b b)) in (false b)))
(let d = (succ (\ b : C . (pred c))) in (iszero (pred (iszero (\ d : Bool . 1)))))
((\ a : ((Bool -> Bool) -> (A -> (A -> A))) . (false 0)) (\ a : ((A -> C) -> (B -> B)) . (pred (if false then true else (let b = 2 in 2)))))
(let c = (let b = (let a = 1 in 2) in (pred 1)) in (if (let d = 2 in false) then (pred 0) else (1 true)))
((let b = (iszero (c 1)) in (succ (let c = 2 in c))) (let b = (let a = 0 in (let b = b in a)) in (pred 1)))
(if (((if true then b else b) c) (let a = (iszero true) in (let c = a in true))) then ((let b = 0 in false) (\ d : A . (if false then 2 else true))) else (\ b : (Nat -> (Bool -> Nat)) . (succ (\ c : Bool . 2))))
(pred (\ d : (Bool -> C) . (iszero 0)))
((\ d : ((Nat -> B) -> A) . ((if c then true else a) 0)) (\ a : (A -> Nat) . (pred c)))
((let d = (\ a : A . a) in (iszero b)) (iszero (succ (iszero 0))))
(pred (let d = (\ d : C . c) in (succ (pred 0))))
(\ a : ((Nat -> A) -> (Bool -> C)) . (iszero (if c then b else false)))
(\ a : ((C -> Nat) -> (B -> B)) . (let c = (if (2 0) then (pred 2) else 0) in (succ (if 1 then a else b))))
((succ (pred (succ 1))) ((\ c : A . c) (if c then 0 else (iszero 1))))
(succ (let c = (pred c) in (\ b : Bool . 1)))
(iszero (if (succ 1) then (iszero 0) else (succ c)))
(succ (pred ((let c = false in c) (let c = c in (false 0)))))
(\ a : (((C -> B) -> (C -> B)) -> ((A -> Bool) -> (C -> Bool))) . (pred (succ false)))
(pred (let a = (succ (pred 2)) in (\ b : ((Bool -> Bool) -> (A -> B)) . (succ 0))))
(iszero (let e = ((if 2 then false else false) false) in (succ b)))
(let d = (let c = (\ b : C . true) in (succ a)) in (\ d : (Nat -> C) . (pred 2)))
((iszero (iszero (let a = true in 1))) (\ e : ((A -> B) -> (A -> Nat)) . (let c = (let d = (let d = false in c) in (iszero b)) in (\ b : Bool . (pred true)))))
(if (if (a b) then (\ c : A . (pred true)) else (\ b : C . (1 0))) then (\ d : (Nat -> Nat) . (if 2 then (pred 0) else b)) else (succ (iszero (succ 2))))
(iszero (pred (c c)))
(iszero (succ (succ (let b = a in true))))
(pred ((let c = (if 2 then c else 1) in 2) (0 a)))
(iszero (iszero (let c = (succ (iszero a)) in (\ d : A . 2))))
(\ a : ((Nat -> Nat) -> (Nat -> Bool)) . (let c = (pred (pred 2)) in (let b = b in 1)))
(pred (iszero (iszero (pred c))))
(\ d : ((Nat -> A) -> (((C -> Nat) -> Nat) -> (A -> A))) . (succ (let c = (c 2) in b)))
((if (\ c : (A -> Nat) . (\ c : B . b)) then ((if false then b else true) (iszero false)) else ((let d = true in (succ false)) (if 0 then c else 2))) (iszero ((iszero 0) false)))
(succ (iszero (iszero 0)))
(let b = (succ ((iszero b) b)) in (succ (if (2 c) then (if (iszero 1) then false else c) else (iszero (let a = true in 0)))))
(succ (iszero (let a = 1 in b)))
(\ e : ((Bool -> Bool) -> (Nat -> (A -> Bool))) . (\ b : ((Bool -> Nat) -> B) . (let b = (if a then 1 else 1) in (\ e : A . true))))
(succ (let c = (let d = 0 in b) in (if false then c else a)))
(iszero (let a = (if 0 then b else 1) in ((let c = 2 in true) (pred false))))
(((iszero 0) (pred 1)) (iszero (succ 2)))
(let b = (let d = (succ true) in (succ (\ e : A . b))) in (succ ((pred true) ((succ c) true))))
(let e = (if (iszero true) then (pred (pred 1)) else (let e = 0 in 2)) in (pred (\ d : A . 2)))
(if (pred (iszero (\ a : B . 0))) then (let e = (iszero (succ 2)) in (let c = (if true then 0 else b) in (pred b))) else (iszero (pred (iszero c))))
(pred (if (pred (succ 2)) then (let a = (b 0) in (let e = c in 2)) else (succ (c b))))
(succ (iszero (\ d : (Bool -> Nat) . (let e = c in 2))))
(pred (iszero (\ b : (A -> B) . (succ 2))))
(if (iszero (iszero c)) then (pred (succ (pred 0))) else (pred (iszero true)))
(\ c : ((Bool -> Nat) -> ((Nat -> Bool) -> (Nat -> C))) . (((if c then true else 1) (if a then true else false)) (if 0 then 0 else 2)))
(\ c : (((Nat -> C) -> (B -> Bool)) -> ((C -> A) -> (B -> (C -> C)))) . (\ c : ((B -> B) -> C) . ((1 false) 0)))
((iszero (iszero (\ d : Bool . b))) (\ c : (Bool -> Bool) . (pred true)))
(let d = (let c = (succ true) in (b 2)) in (let d = (pred 0) in ((pred true) (pred b))))
(succ (let c = (\ e : (Bool -> A) . (\ e : (B -> A) . (succ true))) in (succ (let c = c in true))))
(let b = (let e = (if (iszero b) then (iszero true) else (let c = 1 in 2)) in (succ c)) in (if (2 c) then (if 2 then a else false) else (if false then a else 0)))
(let d = ((let c = true in b) (if 2 then 2 else 2)) in (\ e : ((Bool -> (B -> C)) -> (B -> (B -> A))) . (let e = (pred 0) in (let b = (if false then true else 1) in true))))
((let d = (let a = (if b then c else a) in (succ (succ 2))) in (\ e : A . (iszero a))) ((if true then true else c) (pred (let a = 0 in a))))
(succ (\ d : (C -> Bool) . (let a = true in true)))
(succ (iszero (let d = (\ c : Nat . 0) in 2)))
(iszero (\ e : (C -> Nat) . (pred false)))
((let e = (iszero (iszero a)) in (let c = b in (let b = true in a))) (if (if 2 then a else 0) then (let b = 1 in 2) else (pred (\ e : C . a))))
(\ d : ((A -> (A -> Nat)) -> ((B -> Nat) -> (C -> C))) . (\ e : (Nat -> (C -> Nat)) . (iszero false)))
(let d = (succ (iszero 1)) in (let c = (iszero (succ (let e = 0 in false))) in (\ c : (B -> Nat) . b)))
(if (iszero (succ 1)) then (\ d : ((Bool -> B) -> Nat) . (iszero (let c = (if c then 0 else b) in b))) else (if (pred false) then (pred 1) else (succ 0)))
(pred (succ (\ a : (B -> B) . (pred 1))))
(pred (if (let a = false in false) then (let c = 2 in 0) else (false b)))
(let a = (pred ((let a = a in false) (pred (iszero true)))) in ((succ (let e = 0 in c)) (let e = b in (pred false))))
(\ b : ((Bool -> A) -> (B -> A)) . (iszero (if (pred 0) then (let c = b in false) else (pred 1))))
(succ (let b = (succ a) in ((if c then 0 else c) 1)))
(pred (let b = (pred 0) in (succ 2)))
(if (pred (iszero (\ c : Nat . 0))) then (let d = (pred (false b)) in ((pred (pred 1)) (c c))) else (iszero (\ a : Nat . 0)))
(((let b = (1 false) in (pred a)) ((succ a) (succ false))) (\ e : (Nat -> Nat) . (iszero c)))
((pred (pred (iszero c))) (pred (\ e : B . c)))
(\ a : (((C -> C) -> Nat) -> ((A -> A) -> (A -> Bool))) . (\ b : ((Nat -> (C -> A)) -> (Nat -> C)) . (pred (let b = (\ c : B . 0) in 1))))
(pred (let b = (succ true) in (2 b)))
(if (if ((succ 1) (pred 2)) then (if 2 then a else b) else ((succ true) (iszero b))) then (let e = (iszero true) in (\ b : (Bool -> (B -> C)) . (if 2 then 2 else (\ c : B . 0)))) else (if (let c = b in 2) then (iszero (pred false)) else (c 2)))
(succ (if (pred (if a then true else true)) then (iszero (2 b)) else (pred false)))
(if (if (if (if 2 then b else a) then (iszero b) else true) then (succ 1) else (\ e : (C -> C) . c)) then (\ c : ((Bool -> Nat) -> A) . (2 (iszero true))) else ((\ d : (Nat -> A) . (if a then c else a)) (iszero (succ c))))
(if (pred (let e = (pred 1) in (\ b : A . 0))) then (let d = (if true then a else b) in (if (pred 2) then (iszero false) else 2)) else (iszero (succ 0)))
(let a = (let a = (\ d : B . a) in (let a = a in (\ b : A . false))) in (succ (\ e : Nat . 1)))
(pred (let d = (let d = b in 2) in (succ 0)))
(let b = (\ c : (B -> Bool) . (if 2 then 1 else 0)) in (succ (let b = (\ d : Nat . 0) in (let e = true in 2))))
((if (pred 1) then (succ 0) else (true 2)) (succ (let a = (0 0) in ((succ false) b))))
